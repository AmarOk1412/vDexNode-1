/* Generated by Cython 0.26.1 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "extra_compile_args": [
            "-std=c++11"
        ],
        "extra_link_args": [
            "-std=c++11"
        ],
        "include_dirs": [
            "../../include",
            "/home/sylvain/opendht/include"
        ],
        "language": "c++",
        "libraries": [
            "opendht",
            "gnutls"
        ],
        "library_dirs": [
            "../../src",
            "/home/sylvain/opendht/build/python",
            "/home/sylvain/opendht/build"
        ],
        "name": "opendht",
        "sources": [
            "/home/sylvain/opendht/python/opendht.pyx"
        ]
    },
    "module_name": "opendht"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_26_1"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #ifdef __cplusplus
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough) || (defined(__GNUC__) && defined(__attribute__))
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__opendht
#define __PYX_HAVE_API__opendht
#include <utility>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <map>
#include <string.h>
#include <string>
#include <memory>
#include <stdio.h>
#include "pythread.h"
#include <stdint.h>
#include <vector>
#include <functional>
#include <future>
#include "opendht/infohash.h"
#include "opendht/sockaddr.h"
#include "opendht/crypto.h"
#include "opendht/value.h"
#include "opendht/node.h"
#include "opendht/callbacks.h"
#include "opendht/dhtrunner.h"
#include "opendht/log.h"
#include "opendht/indexation/pht.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "opendht.pyx",
  "stringsource",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};

/* "opendht_cpp.pxd":26
 * from libc.string cimport const_char, const_uchar
 * 
 * ctypedef uint16_t in_port_t             # <<<<<<<<<<<<<<
 * ctypedef unsigned short int sa_family_t;
 * 
 */
typedef uint16_t __pyx_t_11opendht_cpp_in_port_t;

/* "opendht_cpp.pxd":27
 * 
 * ctypedef uint16_t in_port_t
 * ctypedef unsigned short int sa_family_t;             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<memory>" namespace "std" nogil:
 */
typedef unsigned short __pyx_t_11opendht_cpp_sa_family_t;

/*--- Type declarations ---*/
struct __pyx_obj_7opendht__WithID;
struct __pyx_obj_7opendht_InfoHash;
struct __pyx_obj_7opendht_SockAddr;
struct __pyx_obj_7opendht_Node;
struct __pyx_obj_7opendht_NodeEntry;
struct __pyx_obj_7opendht_Query;
struct __pyx_obj_7opendht_Select;
struct __pyx_obj_7opendht_Where;
struct __pyx_obj_7opendht_Value;
struct __pyx_obj_7opendht_NodeSetIter;
struct __pyx_obj_7opendht_NodeSet;
struct __pyx_obj_7opendht_PrivateKey;
struct __pyx_obj_7opendht_PublicKey;
struct __pyx_obj_7opendht_Certificate;
struct __pyx_obj_7opendht_VerifyResult;
struct __pyx_obj_7opendht_TrustList;
struct __pyx_obj_7opendht_ListenToken;
struct __pyx_obj_7opendht_Identity;
struct __pyx_obj_7opendht_DhtConfig;
struct __pyx_obj_7opendht_DhtRunner;
struct __pyx_obj_7opendht_IndexValue;
struct __pyx_obj_7opendht_Pht;
struct __pyx_obj_7opendht___pyx_scope_struct__ping;
struct __pyx_obj_7opendht___pyx_scope_struct_1_get;
struct __pyx_obj_7opendht___pyx_scope_struct_2_put;

/* "opendht_cpp.pxd":84
 *         bool isUnspecified() const
 * 
 * ctypedef vector[uint8_t] Blob             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "opendht/crypto.h" namespace "dht::crypto":
 */
typedef std::vector<uint8_t>  __pyx_t_11opendht_cpp_Blob;

/* "opendht_cpp.pxd":125
 *         VerifyResult verify(Certificate);
 * 
 * ctypedef TrustList.VerifyResult TrustListVerifyResult             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "opendht/value.h" namespace "dht::Value":
 */
typedef dht::crypto::TrustList::VerifyResult __pyx_t_11opendht_cpp_TrustListVerifyResult;

/* "opendht_cpp.pxd":241
 *         vector[unsigned] getNodeMessageStats(bool i)
 * 
 * ctypedef DhtRunner.Config DhtRunnerConfig             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "opendht/log.h" namespace "dht::log":
 */
typedef dht::DhtRunner::Config __pyx_t_11opendht_cpp_DhtRunnerConfig;

/* "opendht.pyx":86
 *     ref.Py_DECREF(cbs)
 * 
 * cdef class _WithID(object):             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return "<%s '%s'>" % (self.__class__.__name__, str(self))
 */
struct __pyx_obj_7opendht__WithID {
  PyObject_HEAD
};


/* "opendht.pyx":92
 *         return self.getId().toString().decode()
 * 
 * cdef class InfoHash(_WithID):             # <<<<<<<<<<<<<<
 *     cdef cpp.InfoHash _infohash
 *     def __cinit__(self, bytes str=b''):
 */
struct __pyx_obj_7opendht_InfoHash {
  struct __pyx_obj_7opendht__WithID __pyx_base;
  dht::InfoHash _infohash;
};


/* "opendht.pyx":130
 *         return h
 * 
 * cdef class SockAddr(object):             # <<<<<<<<<<<<<<
 *     cdef cpp.SockAddr _addr
 *     def toString(SockAddr self):
 */
struct __pyx_obj_7opendht_SockAddr {
  PyObject_HEAD
  dht::SockAddr _addr;
};


/* "opendht.pyx":153
 *         return "<%s '%s'>" % (self.__class__.__name__, str(self))
 * 
 * cdef class Node(_WithID):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cpp.Node] _node
 *     def getId(self):
 */
struct __pyx_obj_7opendht_Node {
  struct __pyx_obj_7opendht__WithID __pyx_base;
  std::shared_ptr<dht::Node>  _node;
};


/* "opendht.pyx":164
 *         return self._node.get().isExpired()
 * 
 * cdef class NodeEntry(_WithID):             # <<<<<<<<<<<<<<
 *     cdef cpp.pair[cpp.InfoHash, shared_ptr[cpp.Node]] _v
 *     def getId(self):
 */
struct __pyx_obj_7opendht_NodeEntry {
  struct __pyx_obj_7opendht__WithID __pyx_base;
  std::pair<dht::InfoHash,std::shared_ptr<dht::Node> >  _v;
};


/* "opendht.pyx":175
 *         return n
 * 
 * cdef class Query(object):             # <<<<<<<<<<<<<<
 *     cdef cpp.Query _query
 *     def __cinit__(self, str q_str=''):
 */
struct __pyx_obj_7opendht_Query {
  PyObject_HEAD
  dht::Query _query;
};


/* "opendht.pyx":186
 *         return self._query.isSatisfiedBy(q._query)
 * 
 * cdef class Select(object):             # <<<<<<<<<<<<<<
 *     cdef cpp.Select _select
 *     def __cinit__(self, str q_str=None):
 */
struct __pyx_obj_7opendht_Select {
  PyObject_HEAD
  dht::Select _select;
};


/* "opendht.pyx":201
 *         return self
 * 
 * cdef class Where(object):             # <<<<<<<<<<<<<<
 *     cdef cpp.Where _where
 *     def __cinit__(self, str q_str=None):
 */
struct __pyx_obj_7opendht_Where {
  PyObject_HEAD
  dht::Where _where;
};


/* "opendht.pyx":228
 *         return self
 * 
 * cdef class Value(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cpp.Value] _value
 *     def __init__(self, bytes val=b''):
 */
struct __pyx_obj_7opendht_Value {
  PyObject_HEAD
  std::shared_ptr<dht::Value>  _value;
};


/* "opendht.pyx":265
 *             return self._value.get().size()
 * 
 * cdef class NodeSetIter(object):             # <<<<<<<<<<<<<<
 *     cdef map[cpp.InfoHash, shared_ptr[cpp.Node]]* _nodes
 *     cdef map[cpp.InfoHash, shared_ptr[cpp.Node]].iterator _curIter
 */
struct __pyx_obj_7opendht_NodeSetIter {
  PyObject_HEAD
  std::map<dht::InfoHash,std::shared_ptr<dht::Node> >  *_nodes;
  std::map<dht::InfoHash,std::shared_ptr<dht::Node> > ::iterator _curIter;
};


/* "opendht.pyx":279
 *         return h
 * 
 * cdef class NodeSet(object):             # <<<<<<<<<<<<<<
 *     cdef map[cpp.InfoHash, shared_ptr[cpp.Node]] _nodes
 *     def size(self):
 */
struct __pyx_obj_7opendht_NodeSet {
  PyObject_HEAD
  std::map<dht::InfoHash,std::shared_ptr<dht::Node> >  _nodes;
};


/* "opendht.pyx":310
 *         return NodeSetIter(self)
 * 
 * cdef class PrivateKey(_WithID):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cpp.PrivateKey] _key
 *     def getId(self):
 */
struct __pyx_obj_7opendht_PrivateKey {
  struct __pyx_obj_7opendht__WithID __pyx_base;
  std::shared_ptr<dht::crypto::PrivateKey>  _key;
};


/* "opendht.pyx":342
 *         return k
 * 
 * cdef class PublicKey(_WithID):             # <<<<<<<<<<<<<<
 *     cdef cpp.PublicKey _key
 *     def getId(self):
 */
struct __pyx_obj_7opendht_PublicKey {
  struct __pyx_obj_7opendht__WithID __pyx_base;
  dht::crypto::PublicKey _key;
};


/* "opendht.pyx":358
 *         return encrypted_c_str[:length]
 * 
 * cdef class Certificate(_WithID):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cpp.Certificate] _cert
 *     def __init__(self, bytes dat = None):
 */
struct __pyx_obj_7opendht_Certificate {
  struct __pyx_obj_7opendht__WithID __pyx_base;
  std::shared_ptr<dht::crypto::Certificate>  _cert;
};


/* "opendht.pyx":387
 *         return c
 * 
 * cdef class VerifyResult(object):             # <<<<<<<<<<<<<<
 *     cdef cpp.TrustListVerifyResult _result
 *     def __bool__(self):
 */
struct __pyx_obj_7opendht_VerifyResult {
  PyObject_HEAD
  __pyx_t_11opendht_cpp_TrustListVerifyResult _result;
};


/* "opendht.pyx":394
 *         return self._result.toString()
 * 
 * cdef class TrustList(object):             # <<<<<<<<<<<<<<
 *     cdef cpp.TrustList _trust
 *     def add(self, Certificate cert):
 */
struct __pyx_obj_7opendht_TrustList {
  PyObject_HEAD
  dht::crypto::TrustList _trust;
};


/* "opendht.pyx":405
 *         return r
 * 
 * cdef class ListenToken(object):             # <<<<<<<<<<<<<<
 *     cdef cpp.InfoHash _h
 *     cdef cpp.shared_future[size_t] _t
 */
struct __pyx_obj_7opendht_ListenToken {
  PyObject_HEAD
  dht::InfoHash _h;
  std::shared_future<size_t>  _t;
};


/* "opendht.pyx":410
 *     _cb = dict()
 * 
 * cdef class Identity(object):             # <<<<<<<<<<<<<<
 *     cdef cpp.Identity _id
 *     def __init__(self, PrivateKey k = None, Certificate c = None):
 */
struct __pyx_obj_7opendht_Identity {
  PyObject_HEAD
  dht::crypto::Identity _id;
};


/* "opendht.pyx":438
 *             return k
 * 
 * cdef class DhtConfig(object):             # <<<<<<<<<<<<<<
 *     cdef cpp.DhtRunnerConfig _config
 *     def __init__(self):
 */
struct __pyx_obj_7opendht_DhtConfig {
  PyObject_HEAD
  __pyx_t_11opendht_cpp_DhtRunnerConfig _config;
};


/* "opendht.pyx":454
 *         self._config.dht_config.node_config.maintain_storage = maintain_storage
 * 
 * cdef class DhtRunner(_WithID):             # <<<<<<<<<<<<<<
 *     cdef cpp.shared_ptr[cpp.DhtRunner] thisptr
 *     def __cinit__(self):
 */
struct __pyx_obj_7opendht_DhtRunner {
  struct __pyx_obj_7opendht__WithID __pyx_base;
  std::shared_ptr<dht::DhtRunner>  thisptr;
};


/* "opendht.pyx":608
 *         # fixme: not thread safe
 * 
 * cdef class IndexValue(object):             # <<<<<<<<<<<<<<
 *     cdef cpp.shared_ptr[cpp.IndexValue] _value
 *     def __init__(self, InfoHash h=None, cpp.uint64_t vid=0):
 */
struct __pyx_obj_7opendht_IndexValue {
  PyObject_HEAD
  std::shared_ptr<dht::indexation::Value>  _value;
};


/* "opendht.pyx":622
 *         return self._value.get().second
 * 
 * cdef class Pht(object):             # <<<<<<<<<<<<<<
 *     cdef cpp.Pht* thisptr
 *     def __cinit__(self, bytes name, key_spec, DhtRunner dht):
 */
struct __pyx_obj_7opendht_Pht {
  PyObject_HEAD
  dht::indexation::Pht *thisptr;
};


/* "opendht.pyx":465
 *     def getNodeId(self):
 *         return self.thisptr.get().getNodeId().toString()
 *     def ping(self, SockAddr addr, done_cb=None):             # <<<<<<<<<<<<<<
 *         if done_cb:
 *             cb_obj = {'done':done_cb}
 */
struct __pyx_obj_7opendht___pyx_scope_struct__ping {
  PyObject_HEAD
  PyObject *__pyx_v_lock;
  PyObject *__pyx_v_ok;
  PyObject *__pyx_v_pending;
};


/* "opendht.pyx":530
 *         return stats
 * 
 *     def get(self, InfoHash key, get_cb=None, done_cb=None, filter=None, Where where=None):             # <<<<<<<<<<<<<<
 *         """Retreive values associated with a key on the DHT.
 * 
 */
struct __pyx_obj_7opendht___pyx_scope_struct_1_get {
  PyObject_HEAD
  PyObject *__pyx_v_lock;
  PyObject *__pyx_v_pending;
  PyObject *__pyx_v_res;
};


/* "opendht.pyx":567
 *                     lock.wait()
 *             return res
 *     def put(self, InfoHash key, Value val, done_cb=None):             # <<<<<<<<<<<<<<
 *         """Publish a new value on the DHT at key.
 * 
 */
struct __pyx_obj_7opendht___pyx_scope_struct_2_put {
  PyObject_HEAD
  PyObject *__pyx_v_lock;
  PyObject *__pyx_v_ok;
  PyObject *__pyx_v_pending;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* IncludeStringH.proto */
#include <string.h>

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* GetNameInClass.proto */
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
static int __Pyx_CLineForTraceback(int c_line);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint16_t(uint16_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_short(unsigned short value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint16_t __Pyx_PyInt_As_uint16_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned short __Pyx_PyInt_As_unsigned_short(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint8_t __Pyx_PyInt_As_uint8_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'opendht_cpp' */

/* Module declarations from 'opendht' */
static PyTypeObject *__pyx_ptype_7opendht__WithID = 0;
static PyTypeObject *__pyx_ptype_7opendht_InfoHash = 0;
static PyTypeObject *__pyx_ptype_7opendht_SockAddr = 0;
static PyTypeObject *__pyx_ptype_7opendht_Node = 0;
static PyTypeObject *__pyx_ptype_7opendht_NodeEntry = 0;
static PyTypeObject *__pyx_ptype_7opendht_Query = 0;
static PyTypeObject *__pyx_ptype_7opendht_Select = 0;
static PyTypeObject *__pyx_ptype_7opendht_Where = 0;
static PyTypeObject *__pyx_ptype_7opendht_Value = 0;
static PyTypeObject *__pyx_ptype_7opendht_NodeSetIter = 0;
static PyTypeObject *__pyx_ptype_7opendht_NodeSet = 0;
static PyTypeObject *__pyx_ptype_7opendht_PrivateKey = 0;
static PyTypeObject *__pyx_ptype_7opendht_PublicKey = 0;
static PyTypeObject *__pyx_ptype_7opendht_Certificate = 0;
static PyTypeObject *__pyx_ptype_7opendht_VerifyResult = 0;
static PyTypeObject *__pyx_ptype_7opendht_TrustList = 0;
static PyTypeObject *__pyx_ptype_7opendht_ListenToken = 0;
static PyTypeObject *__pyx_ptype_7opendht_Identity = 0;
static PyTypeObject *__pyx_ptype_7opendht_DhtConfig = 0;
static PyTypeObject *__pyx_ptype_7opendht_DhtRunner = 0;
static PyTypeObject *__pyx_ptype_7opendht_IndexValue = 0;
static PyTypeObject *__pyx_ptype_7opendht_Pht = 0;
static PyTypeObject *__pyx_ptype_7opendht___pyx_scope_struct__ping = 0;
static PyTypeObject *__pyx_ptype_7opendht___pyx_scope_struct_1_get = 0;
static PyTypeObject *__pyx_ptype_7opendht___pyx_scope_struct_2_put = 0;
static CYTHON_INLINE void __pyx_f_7opendht_lookup_callback(std::vector<std::shared_ptr<dht::indexation::Value> >  *, dht::indexation::Prefix *, void *); /*proto*/
static CYTHON_INLINE void __pyx_f_7opendht_shutdown_callback(void *); /*proto*/
static CYTHON_INLINE bool __pyx_f_7opendht_get_callback(std::shared_ptr<dht::Value> , void *); /*proto*/
static CYTHON_INLINE void __pyx_f_7opendht_done_callback(bool, std::vector<std::shared_ptr<dht::Node> >  *, void *); /*proto*/
static CYTHON_INLINE void __pyx_f_7opendht_done_callback_simple(bool, void *); /*proto*/
static PyObject *__pyx_f_7opendht___pyx_unpickle__WithID__set_state(struct __pyx_obj_7opendht__WithID *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static std::vector<uint8_t>  __pyx_convert_vector_from_py_uint8_t(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "opendht"
int __pyx_module_is_main_opendht = 0;

/* Implementation of 'opendht' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_NotImplemented;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_[] = "";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_af[] = "af";
static const char __pyx_k_ca[] = "ca";
static const char __pyx_k_cb[] = "_cb";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_ok[] = "ok";
static const char __pyx_k__20[] = " ";
static const char __pyx_k__21[] = "\n";
static const char __pyx_k__59[] = "(";
static const char __pyx_k__60[] = ", ";
static const char __pyx_k__61[] = ")";
static const char __pyx_k_bit[] = "bit";
static const char __pyx_k_dat[] = "dat";
static const char __pyx_k_dht[] = "dht";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_put[] = "put";
static const char __pyx_k_s_s[] = "<%s '%s'>";
static const char __pyx_k_str[] = "str";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_vid[] = "vid";
static const char __pyx_k_4222[] = "4222";
static const char __pyx_k_addr[] = "addr";
static const char __pyx_k_bits[] = "bits";
static const char __pyx_k_cb_2[] = "cb";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_done[] = "done";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_host[] = "host";
static const char __pyx_k_ipv4[] = "ipv4";
static const char __pyx_k_ipv6[] = "ipv6";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_ping[] = "ping";
static const char __pyx_k_port[] = "port";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_wait[] = "wait";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_getId[] = "getId";
static const char __pyx_k_is_ca[] = "is_ca";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_nodes[] = "nodes";
static const char __pyx_k_pydht[] = "pydht";
static const char __pyx_k_q_str[] = "q_str";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_where[] = "where";
static const char __pyx_k_config[] = "config";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_filter[] = "filter";
static const char __pyx_k_getKey[] = "getKey";
static const char __pyx_k_get_cb[] = "get_cb";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_insert[] = "insert";
static const char __pyx_k_lookup[] = "lookup";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_notify[] = "notify";
static const char __pyx_k_ok_ret[] = "ok_ret";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_done_cb[] = "done_cb";
static const char __pyx_k_opendht[] = "opendht";
static const char __pyx_k_tmp_get[] = "tmp_get";
static const char __pyx_k_generate[] = "generate";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_key_spec[] = "key_spec";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_shutdown[] = "shutdown";
static const char __pyx_k_tmp_done[] = "tmp_done";
static const char __pyx_k_toString[] = "toString";
static const char __pyx_k_Condition[] = "Condition";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_getRandom[] = "getRandom";
static const char __pyx_k_lookup_cb[] = "lookup_cb";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_threading[] = "threading";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_commonBits[] = "commonBits";
static const char __pyx_k_generateEC[] = "generateEC";
static const char __pyx_k_getValueId[] = "getValueId";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_setIdentity[] = "setIdentity";
static const char __pyx_k_shutdown_cb[] = "shutdown_cb";
static const char __pyx_k_is_bootstrap[] = "is_bootstrap";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_NotImplemented[] = "NotImplemented";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_get_locals_tmp_get[] = "get.<locals>.tmp_get";
static const char __pyx_k_get_locals_tmp_done[] = "get.<locals>.tmp_done";
static const char __pyx_k_put_locals_tmp_done[] = "put.<locals>.tmp_done";
static const char __pyx_k_ping_locals_tmp_done[] = "ping.<locals>.tmp_done";
static const char __pyx_k_pyx_unpickle__WithID[] = "__pyx_unpickle__WithID";
static const char __pyx_k_home_sylvain_opendht_python_ope[] = "/home/sylvain/opendht/python/opendht.pyx";
static const char __pyx_k_self__id_cannot_be_converted_to[] = "self._id cannot be converted to a Python object for pickling";
static const char __pyx_k_self__nodes_cannot_be_converted[] = "self._nodes cannot be converted to a Python object for pickling";
static const char __pyx_k_self__trust_cannot_be_converted[] = "self._trust cannot be converted to a Python object for pickling";
static const char __pyx_k_self__value_cannot_be_converted[] = "self._value cannot be converted to a Python object for pickling";
static const char __pyx_k_Incompatible_checksums_s_vs_0xd4[] = "Incompatible checksums (%s vs 0xd41d8cd = ())";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_self__addr_cannot_be_converted_t[] = "self._addr cannot be converted to a Python object for pickling";
static const char __pyx_k_self__cert_cannot_be_converted_t[] = "self._cert cannot be converted to a Python object for pickling";
static const char __pyx_k_self__config_cannot_be_converted[] = "self._config cannot be converted to a Python object for pickling";
static const char __pyx_k_self__curIter_self__nodes_cannot[] = "self._curIter,self._nodes cannot be converted to a Python object for pickling";
static const char __pyx_k_self__h_self__t_cannot_be_conver[] = "self._h,self._t cannot be converted to a Python object for pickling";
static const char __pyx_k_self__key_cannot_be_converted_to[] = "self._key cannot be converted to a Python object for pickling";
static const char __pyx_k_self__node_cannot_be_converted_t[] = "self._node cannot be converted to a Python object for pickling";
static const char __pyx_k_self__result_cannot_be_converted[] = "self._result cannot be converted to a Python object for pickling";
static const char __pyx_k_self__v_cannot_be_converted_to_a[] = "self._v cannot be converted to a Python object for pickling";
static PyObject *__pyx_kp_b_;
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_kp_b_4222;
static PyObject *__pyx_n_s_Condition;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xd4;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_n_s_NotImplemented;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u__20;
static PyObject *__pyx_kp_u__21;
static PyObject *__pyx_kp_u__59;
static PyObject *__pyx_kp_u__60;
static PyObject *__pyx_kp_u__61;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_addr;
static PyObject *__pyx_n_s_af;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_bit;
static PyObject *__pyx_n_s_bits;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_ca;
static PyObject *__pyx_n_s_cb;
static PyObject *__pyx_n_u_cb_2;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_commonBits;
static PyObject *__pyx_n_s_config;
static PyObject *__pyx_n_s_dat;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_dht;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_u_done;
static PyObject *__pyx_n_s_done_cb;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_filter;
static PyObject *__pyx_n_u_filter;
static PyObject *__pyx_n_s_generate;
static PyObject *__pyx_n_s_generateEC;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_u_get;
static PyObject *__pyx_n_s_getId;
static PyObject *__pyx_n_s_getKey;
static PyObject *__pyx_n_s_getRandom;
static PyObject *__pyx_n_s_getValueId;
static PyObject *__pyx_n_s_get_cb;
static PyObject *__pyx_n_s_get_locals_tmp_done;
static PyObject *__pyx_n_s_get_locals_tmp_get;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_kp_s_home_sylvain_opendht_python_ope;
static PyObject *__pyx_n_s_host;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_insert;
static PyObject *__pyx_n_s_ipv4;
static PyObject *__pyx_n_s_ipv6;
static PyObject *__pyx_n_s_is_bootstrap;
static PyObject *__pyx_n_s_is_ca;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_key_spec;
static PyObject *__pyx_n_u_lookup;
static PyObject *__pyx_n_s_lookup_cb;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_nodes;
static PyObject *__pyx_n_s_notify;
static PyObject *__pyx_n_s_ok;
static PyObject *__pyx_n_s_ok_ret;
static PyObject *__pyx_n_s_opendht;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_ping;
static PyObject *__pyx_n_s_ping_locals_tmp_done;
static PyObject *__pyx_n_s_port;
static PyObject *__pyx_n_s_put;
static PyObject *__pyx_n_s_put_locals_tmp_done;
static PyObject *__pyx_n_u_pydht;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle__WithID;
static PyObject *__pyx_n_s_q_str;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_kp_u_s_s;
static PyObject *__pyx_kp_s_self__addr_cannot_be_converted_t;
static PyObject *__pyx_kp_s_self__cert_cannot_be_converted_t;
static PyObject *__pyx_kp_s_self__config_cannot_be_converted;
static PyObject *__pyx_kp_s_self__curIter_self__nodes_cannot;
static PyObject *__pyx_kp_s_self__h_self__t_cannot_be_conver;
static PyObject *__pyx_kp_s_self__id_cannot_be_converted_to;
static PyObject *__pyx_kp_s_self__key_cannot_be_converted_to;
static PyObject *__pyx_kp_s_self__node_cannot_be_converted_t;
static PyObject *__pyx_kp_s_self__nodes_cannot_be_converted;
static PyObject *__pyx_kp_s_self__result_cannot_be_converted;
static PyObject *__pyx_kp_s_self__trust_cannot_be_converted;
static PyObject *__pyx_kp_s_self__v_cannot_be_converted_to_a;
static PyObject *__pyx_kp_s_self__value_cannot_be_converted;
static PyObject *__pyx_n_s_setIdentity;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_u_shutdown;
static PyObject *__pyx_n_s_shutdown_cb;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_threading;
static PyObject *__pyx_n_s_tmp_done;
static PyObject *__pyx_n_s_tmp_get;
static PyObject *__pyx_n_s_toString;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_kp_u_utf_8;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_vid;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_wait;
static PyObject *__pyx_n_s_where;
static PyObject *__pyx_pf_7opendht_7_WithID___repr__(struct __pyx_obj_7opendht__WithID *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_7_WithID_2__str__(struct __pyx_obj_7opendht__WithID *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_7_WithID_4__reduce_cython__(struct __pyx_obj_7opendht__WithID *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_7_WithID_6__setstate_cython__(struct __pyx_obj_7opendht__WithID *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7opendht_8InfoHash___cinit__(struct __pyx_obj_7opendht_InfoHash *__pyx_v_self, PyObject *__pyx_v_str); /* proto */
static int __pyx_pf_7opendht_8InfoHash_2__bool__(struct __pyx_obj_7opendht_InfoHash *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8InfoHash_4__richcmp__(struct __pyx_obj_7opendht_InfoHash *__pyx_v_self, struct __pyx_obj_7opendht_InfoHash *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_7opendht_8InfoHash_6getBit(struct __pyx_obj_7opendht_InfoHash *__pyx_v_self, PyObject *__pyx_v_bit); /* proto */
static PyObject *__pyx_pf_7opendht_8InfoHash_8setBit(struct __pyx_obj_7opendht_InfoHash *__pyx_v_self, PyObject *__pyx_v_bit, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7opendht_8InfoHash_10getId(struct __pyx_obj_7opendht_InfoHash *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8InfoHash_12toString(struct __pyx_obj_7opendht_InfoHash *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8InfoHash_14toFloat(struct __pyx_obj_7opendht_InfoHash *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8InfoHash_16commonBits(struct __pyx_obj_7opendht_InfoHash *__pyx_v_a, struct __pyx_obj_7opendht_InfoHash *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7opendht_8InfoHash_18get(PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7opendht_8InfoHash_20getRandom(); /* proto */
static PyObject *__pyx_pf_7opendht_8InfoHash_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_InfoHash *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8InfoHash_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_InfoHash *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opendht_8SockAddr_toString(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8SockAddr_2getPort(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8SockAddr_4getFamily(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8SockAddr_6setPort(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self, __pyx_t_11opendht_cpp_in_port_t __pyx_v_port); /* proto */
static PyObject *__pyx_pf_7opendht_8SockAddr_8setFamily(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self, __pyx_t_11opendht_cpp_sa_family_t __pyx_v_af); /* proto */
static PyObject *__pyx_pf_7opendht_8SockAddr_10isLoopback(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8SockAddr_12isPrivate(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8SockAddr_14isUnspecified(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8SockAddr_16__str__(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8SockAddr_18__repr__(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8SockAddr_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_SockAddr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8SockAddr_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_SockAddr *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opendht_4Node_getId(struct __pyx_obj_7opendht_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_4Node_2getAddr(struct __pyx_obj_7opendht_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_4Node_4isExpired(struct __pyx_obj_7opendht_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_4Node_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_4Node_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Node *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opendht_9NodeEntry_getId(struct __pyx_obj_7opendht_NodeEntry *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9NodeEntry_2getNode(struct __pyx_obj_7opendht_NodeEntry *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9NodeEntry_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_NodeEntry *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9NodeEntry_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_NodeEntry *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7opendht_5Query___cinit__(struct __pyx_obj_7opendht_Query *__pyx_v_self, PyObject *__pyx_v_q_str); /* proto */
static PyObject *__pyx_pf_7opendht_5Query_2__str__(struct __pyx_obj_7opendht_Query *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_5Query_4buildFrom(struct __pyx_obj_7opendht_Query *__pyx_v_self, struct __pyx_obj_7opendht_Select *__pyx_v_s, struct __pyx_obj_7opendht_Where *__pyx_v_w); /* proto */
static PyObject *__pyx_pf_7opendht_5Query_6isSatisfiedBy(struct __pyx_obj_7opendht_Query *__pyx_v_self, struct __pyx_obj_7opendht_Query *__pyx_v_q); /* proto */
static PyObject *__pyx_pf_7opendht_5Query_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Query *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_5Query_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Query *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7opendht_6Select___cinit__(struct __pyx_obj_7opendht_Select *__pyx_v_self, PyObject *__pyx_v_q_str); /* proto */
static PyObject *__pyx_pf_7opendht_6Select_2__str__(struct __pyx_obj_7opendht_Select *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_6Select_4isSatisfiedBy(struct __pyx_obj_7opendht_Select *__pyx_v_self, struct __pyx_obj_7opendht_Select *__pyx_v_os); /* proto */
static PyObject *__pyx_pf_7opendht_6Select_6field(struct __pyx_obj_7opendht_Select *__pyx_v_self, int __pyx_v_field); /* proto */
static PyObject *__pyx_pf_7opendht_6Select_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Select *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_6Select_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Select *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7opendht_5Where___cinit__(struct __pyx_obj_7opendht_Where *__pyx_v_self, PyObject *__pyx_v_q_str); /* proto */
static PyObject *__pyx_pf_7opendht_5Where_2__str__(struct __pyx_obj_7opendht_Where *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_5Where_4isSatisfiedBy(struct __pyx_obj_7opendht_Where *__pyx_v_self, struct __pyx_obj_7opendht_Where *__pyx_v_where); /* proto */
static PyObject *__pyx_pf_7opendht_5Where_6id(struct __pyx_obj_7opendht_Where *__pyx_v_self, uint64_t __pyx_v_id); /* proto */
static PyObject *__pyx_pf_7opendht_5Where_8valueType(struct __pyx_obj_7opendht_Where *__pyx_v_self, uint16_t __pyx_v_type); /* proto */
static PyObject *__pyx_pf_7opendht_5Where_10owner(struct __pyx_obj_7opendht_Where *__pyx_v_self, struct __pyx_obj_7opendht_InfoHash *__pyx_v_owner_pk_hash); /* proto */
static PyObject *__pyx_pf_7opendht_5Where_12seq(struct __pyx_obj_7opendht_Where *__pyx_v_self, uint16_t __pyx_v_seq_no); /* proto */
static PyObject *__pyx_pf_7opendht_5Where_14userType(struct __pyx_obj_7opendht_Where *__pyx_v_self, PyObject *__pyx_v_user_type); /* proto */
static PyObject *__pyx_pf_7opendht_5Where_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Where *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_5Where_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Where *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7opendht_5Value___init__(struct __pyx_obj_7opendht_Value *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_7opendht_5Value_2__str__(struct __pyx_obj_7opendht_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_5Value_5owner___get__(struct __pyx_obj_7opendht_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_5Value_9recipient___get__(struct __pyx_obj_7opendht_Value *__pyx_v_self); /* proto */
static int __pyx_pf_7opendht_5Value_9recipient_2__set__(struct __pyx_obj_7opendht_Value *__pyx_v_self, struct __pyx_obj_7opendht_InfoHash *__pyx_v_h); /* proto */
static PyObject *__pyx_pf_7opendht_5Value_4data___get__(struct __pyx_obj_7opendht_Value *__pyx_v_self); /* proto */
static int __pyx_pf_7opendht_5Value_4data_2__set__(struct __pyx_obj_7opendht_Value *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7opendht_5Value_9user_type___get__(struct __pyx_obj_7opendht_Value *__pyx_v_self); /* proto */
static int __pyx_pf_7opendht_5Value_9user_type_2__set__(struct __pyx_obj_7opendht_Value *__pyx_v_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_7opendht_5Value_2id___get__(struct __pyx_obj_7opendht_Value *__pyx_v_self); /* proto */
static int __pyx_pf_7opendht_5Value_2id_2__set__(struct __pyx_obj_7opendht_Value *__pyx_v_self, uint64_t __pyx_v_value); /* proto */
static PyObject *__pyx_pf_7opendht_5Value_4size___get__(struct __pyx_obj_7opendht_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_5Value_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_5Value_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Value *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7opendht_11NodeSetIter___init__(struct __pyx_obj_7opendht_NodeSetIter *__pyx_v_self, struct __pyx_obj_7opendht_NodeSet *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_7opendht_11NodeSetIter_2__next__(struct __pyx_obj_7opendht_NodeSetIter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_11NodeSetIter_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_NodeSetIter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_11NodeSetIter_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_NodeSetIter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opendht_7NodeSet_size(struct __pyx_obj_7opendht_NodeSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_7NodeSet_2insert(struct __pyx_obj_7opendht_NodeSet *__pyx_v_self, struct __pyx_obj_7opendht_NodeEntry *__pyx_v_l); /* proto */
static PyObject *__pyx_pf_7opendht_7NodeSet_4extend(struct __pyx_obj_7opendht_NodeSet *__pyx_v_self, PyObject *__pyx_v_li); /* proto */
static PyObject *__pyx_pf_7opendht_7NodeSet_6first(struct __pyx_obj_7opendht_NodeSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_7NodeSet_8last(struct __pyx_obj_7opendht_NodeSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_7NodeSet_10__str__(struct __pyx_obj_7opendht_NodeSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_7NodeSet_12__iter__(struct __pyx_obj_7opendht_NodeSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_7NodeSet_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_NodeSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_7NodeSet_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_NodeSet *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opendht_10PrivateKey_getId(struct __pyx_obj_7opendht_PrivateKey *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_10PrivateKey_2getPublicKey(struct __pyx_obj_7opendht_PrivateKey *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_10PrivateKey_4decrypt(struct __pyx_obj_7opendht_PrivateKey *__pyx_v_self, PyObject *__pyx_v_dat); /* proto */
static PyObject *__pyx_pf_7opendht_10PrivateKey_6__str__(struct __pyx_obj_7opendht_PrivateKey *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_10PrivateKey_8generate(); /* proto */
static PyObject *__pyx_pf_7opendht_10PrivateKey_10generateEC(); /* proto */
static PyObject *__pyx_pf_7opendht_10PrivateKey_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_PrivateKey *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_10PrivateKey_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_PrivateKey *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opendht_9PublicKey_getId(struct __pyx_obj_7opendht_PublicKey *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9PublicKey_2encrypt(struct __pyx_obj_7opendht_PublicKey *__pyx_v_self, PyObject *__pyx_v_dat); /* proto */
static PyObject *__pyx_pf_7opendht_9PublicKey_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_PublicKey *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9PublicKey_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_PublicKey *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7opendht_11Certificate___init__(struct __pyx_obj_7opendht_Certificate *__pyx_v_self, PyObject *__pyx_v_dat); /* proto */
static PyObject *__pyx_pf_7opendht_11Certificate_2getId(struct __pyx_obj_7opendht_Certificate *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_11Certificate_4toString(struct __pyx_obj_7opendht_Certificate *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_11Certificate_6getName(struct __pyx_obj_7opendht_Certificate *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_11Certificate_8revoke(struct __pyx_obj_7opendht_Certificate *__pyx_v_self, struct __pyx_obj_7opendht_PrivateKey *__pyx_v_k, struct __pyx_obj_7opendht_Certificate *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_7opendht_11Certificate_10__bytes__(struct __pyx_obj_7opendht_Certificate *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_11Certificate_6issuer___get__(struct __pyx_obj_7opendht_Certificate *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_11Certificate_12generate(struct __pyx_obj_7opendht_PrivateKey *__pyx_v_k, PyObject *__pyx_v_name, struct __pyx_obj_7opendht_Identity *__pyx_v_i, bool __pyx_v_is_ca); /* proto */
static PyObject *__pyx_pf_7opendht_11Certificate_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Certificate *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_11Certificate_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Certificate *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7opendht_12VerifyResult___bool__(struct __pyx_obj_7opendht_VerifyResult *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_12VerifyResult_2__str(struct __pyx_obj_7opendht_VerifyResult *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_12VerifyResult_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_VerifyResult *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_12VerifyResult_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_VerifyResult *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opendht_9TrustList_add(struct __pyx_obj_7opendht_TrustList *__pyx_v_self, struct __pyx_obj_7opendht_Certificate *__pyx_v_cert); /* proto */
static PyObject *__pyx_pf_7opendht_9TrustList_2remove(struct __pyx_obj_7opendht_TrustList *__pyx_v_self, struct __pyx_obj_7opendht_Certificate *__pyx_v_cert); /* proto */
static PyObject *__pyx_pf_7opendht_9TrustList_4verify(struct __pyx_obj_7opendht_TrustList *__pyx_v_self, struct __pyx_obj_7opendht_Certificate *__pyx_v_cert); /* proto */
static PyObject *__pyx_pf_7opendht_9TrustList_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_TrustList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9TrustList_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_TrustList *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opendht_11ListenToken___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_ListenToken *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_11ListenToken_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_ListenToken *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7opendht_8Identity___init__(struct __pyx_obj_7opendht_Identity *__pyx_v_self, struct __pyx_obj_7opendht_PrivateKey *__pyx_v_k, struct __pyx_obj_7opendht_Certificate *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_7opendht_8Identity_2generate(PyObject *__pyx_v_name, struct __pyx_obj_7opendht_Identity *__pyx_v_ca, unsigned int __pyx_v_bits); /* proto */
static PyObject *__pyx_pf_7opendht_8Identity_9publickey___get__(struct __pyx_obj_7opendht_Identity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8Identity_11certificate___get__(struct __pyx_obj_7opendht_Identity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8Identity_3key___get__(struct __pyx_obj_7opendht_Identity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8Identity_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Identity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_8Identity_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Identity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7opendht_9DhtConfig___init__(struct __pyx_obj_7opendht_DhtConfig *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtConfig_2setIdentity(struct __pyx_obj_7opendht_DhtConfig *__pyx_v_self, struct __pyx_obj_7opendht_Identity *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtConfig_4setBootstrapMode(struct __pyx_obj_7opendht_DhtConfig *__pyx_v_self, bool __pyx_v_bootstrap); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtConfig_6setNodeId(struct __pyx_obj_7opendht_DhtConfig *__pyx_v_self, struct __pyx_obj_7opendht_InfoHash *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtConfig_8setNetwork(struct __pyx_obj_7opendht_DhtConfig *__pyx_v_self, unsigned int __pyx_v_netid); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtConfig_10setMaintainStorage(struct __pyx_obj_7opendht_DhtConfig *__pyx_v_self, bool __pyx_v_maintain_storage); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtConfig_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_DhtConfig *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtConfig_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_DhtConfig *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7opendht_9DhtRunner___cinit__(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_2getId(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_4getNodeId(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_4ping_tmp_done(PyObject *__pyx_self, PyObject *__pyx_v_ok_ret); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_6ping(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, struct __pyx_obj_7opendht_SockAddr *__pyx_v_addr, PyObject *__pyx_v_done_cb); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_8bootstrap(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, PyObject *__pyx_v_host, PyObject *__pyx_v_port); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_10run(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, struct __pyx_obj_7opendht_Identity *__pyx_v_id, CYTHON_UNUSED PyObject *__pyx_v_is_bootstrap, __pyx_t_11opendht_cpp_in_port_t __pyx_v_port, PyObject *__pyx_v_ipv4, PyObject *__pyx_v_ipv6, struct __pyx_obj_7opendht_DhtConfig *__pyx_v_config); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_12join(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_14shutdown(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, PyObject *__pyx_v_shutdown_cb); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_16enableLogging(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_18disableLogging(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_20enableFileLogging(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, PyObject *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_22isRunning(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_24getBound(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, __pyx_t_11opendht_cpp_sa_family_t __pyx_v_af); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_26getStorageLog(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_28getRoutingTablesLog(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, __pyx_t_11opendht_cpp_sa_family_t __pyx_v_af); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_30getSearchesLog(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, __pyx_t_11opendht_cpp_sa_family_t __pyx_v_af); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_32getNodeMessageStats(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_3get_tmp_get(PyObject *__pyx_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_3get_2tmp_done(PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_ok, CYTHON_UNUSED PyObject *__pyx_v_nodes); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_34get(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, struct __pyx_obj_7opendht_InfoHash *__pyx_v_key, PyObject *__pyx_v_get_cb, PyObject *__pyx_v_done_cb, PyObject *__pyx_v_filter, struct __pyx_obj_7opendht_Where *__pyx_v_where); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_3put_tmp_done(PyObject *__pyx_self, PyObject *__pyx_v_ok_ret, CYTHON_UNUSED PyObject *__pyx_v_nodes); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_36put(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, struct __pyx_obj_7opendht_InfoHash *__pyx_v_key, struct __pyx_obj_7opendht_Value *__pyx_v_val, PyObject *__pyx_v_done_cb); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_38listen(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, struct __pyx_obj_7opendht_InfoHash *__pyx_v_key, PyObject *__pyx_v_get_cb); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_40cancelListen(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, struct __pyx_obj_7opendht_ListenToken *__pyx_v_token); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_42__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_9DhtRunner_44__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7opendht_10IndexValue___init__(struct __pyx_obj_7opendht_IndexValue *__pyx_v_self, struct __pyx_obj_7opendht_InfoHash *__pyx_v_h, uint64_t __pyx_v_vid); /* proto */
static PyObject *__pyx_pf_7opendht_10IndexValue_2__str__(struct __pyx_obj_7opendht_IndexValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_10IndexValue_4getKey(struct __pyx_obj_7opendht_IndexValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_10IndexValue_6getValueId(struct __pyx_obj_7opendht_IndexValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_10IndexValue_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_IndexValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_10IndexValue_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_IndexValue *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7opendht_3Pht___cinit__(struct __pyx_obj_7opendht_Pht *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_key_spec, struct __pyx_obj_7opendht_DhtRunner *__pyx_v_dht); /* proto */
static PyObject *__pyx_pf_7opendht_3Pht_20MAX_NODE_ENTRY_COUNT___get__(CYTHON_UNUSED struct __pyx_obj_7opendht_Pht *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_3Pht_2lookup(struct __pyx_obj_7opendht_Pht *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_lookup_cb, PyObject *__pyx_v_done_cb); /* proto */
static PyObject *__pyx_pf_7opendht_3Pht_4insert(struct __pyx_obj_7opendht_Pht *__pyx_v_self, PyObject *__pyx_v_key, struct __pyx_obj_7opendht_IndexValue *__pyx_v_value, PyObject *__pyx_v_done_cb); /* proto */
static PyObject *__pyx_pf_7opendht_3Pht_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Pht *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opendht_3Pht_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Pht *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opendht___pyx_unpickle__WithID(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_7opendht__WithID(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_InfoHash(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_SockAddr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_Node(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_NodeEntry(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_Query(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_Select(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_Where(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_Value(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_NodeSetIter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_NodeSet(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_PrivateKey(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_PublicKey(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_Certificate(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_VerifyResult(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_TrustList(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_ListenToken(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_Identity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_DhtConfig(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_DhtRunner(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_IndexValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht_Pht(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht___pyx_scope_struct__ping(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht___pyx_scope_struct_1_get(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opendht___pyx_scope_struct_2_put(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_222419149;
static struct __pyx_obj_7opendht_Identity *__pyx_k__28;
static struct __pyx_obj_7opendht_Identity *__pyx_k__37;
static struct __pyx_obj_7opendht_DhtConfig *__pyx_k__46;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;

/* "opendht.pyx":44
 * import threading
 * 
 * cdef inline void lookup_callback(cpp.vector[cpp.shared_ptr[cpp.IndexValue]]* values, cpp.Prefix* p, void *user_data) with gil:             # <<<<<<<<<<<<<<
 *     cbs = <object>user_data
 *     if 'lookup' in cbs and cbs['lookup']:
 */

static CYTHON_INLINE void __pyx_f_7opendht_lookup_callback(std::vector<std::shared_ptr<dht::indexation::Value> >  *__pyx_v_values, dht::indexation::Prefix *__pyx_v_p, void *__pyx_v_user_data) {
  PyObject *__pyx_v_cbs = NULL;
  PyObject *__pyx_v_vals = NULL;
  std::shared_ptr<dht::indexation::Value>  __pyx_v_val;
  struct __pyx_obj_7opendht_IndexValue *__pyx_v_v = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  std::vector<std::shared_ptr<dht::indexation::Value> > ::iterator __pyx_t_5;
  std::vector<std::shared_ptr<dht::indexation::Value> >  *__pyx_t_6;
  std::shared_ptr<dht::indexation::Value>  __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("lookup_callback", 0);

  /* "opendht.pyx":45
 * 
 * cdef inline void lookup_callback(cpp.vector[cpp.shared_ptr[cpp.IndexValue]]* values, cpp.Prefix* p, void *user_data) with gil:
 *     cbs = <object>user_data             # <<<<<<<<<<<<<<
 *     if 'lookup' in cbs and cbs['lookup']:
 *         vals = []
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_user_data);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_cbs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "opendht.pyx":46
 * cdef inline void lookup_callback(cpp.vector[cpp.shared_ptr[cpp.IndexValue]]* values, cpp.Prefix* p, void *user_data) with gil:
 *     cbs = <object>user_data
 *     if 'lookup' in cbs and cbs['lookup']:             # <<<<<<<<<<<<<<
 *         vals = []
 *         for val in deref(values):
 */
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_lookup, __pyx_v_cbs, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 46, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = PyObject_GetItem(__pyx_v_cbs, __pyx_n_u_lookup); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "opendht.pyx":47
 *     cbs = <object>user_data
 *     if 'lookup' in cbs and cbs['lookup']:
 *         vals = []             # <<<<<<<<<<<<<<
 *         for val in deref(values):
 *             v = IndexValue()
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_vals = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "opendht.pyx":48
 *     if 'lookup' in cbs and cbs['lookup']:
 *         vals = []
 *         for val in deref(values):             # <<<<<<<<<<<<<<
 *             v = IndexValue()
 *             v._value = val
 */
    __pyx_t_6 = &(*__pyx_v_values);
    __pyx_t_5 = __pyx_t_6->begin();
    for (;;) {
      if (!(__pyx_t_5 != __pyx_t_6->end())) break;
      __pyx_t_7 = *__pyx_t_5;
      ++__pyx_t_5;
      __pyx_v_val = __pyx_t_7;

      /* "opendht.pyx":49
 *         vals = []
 *         for val in deref(values):
 *             v = IndexValue()             # <<<<<<<<<<<<<<
 *             v._value = val
 *             vals.append(v)
 */
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_IndexValue), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_v, ((struct __pyx_obj_7opendht_IndexValue *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "opendht.pyx":50
 *         for val in deref(values):
 *             v = IndexValue()
 *             v._value = val             # <<<<<<<<<<<<<<
 *             vals.append(v)
 *         cbs['lookup'](vals, p.toString())
 */
      __pyx_v_v->_value = __pyx_v_val;

      /* "opendht.pyx":51
 *             v = IndexValue()
 *             v._value = val
 *             vals.append(v)             # <<<<<<<<<<<<<<
 *         cbs['lookup'](vals, p.toString())
 * 
 */
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_vals, ((PyObject *)__pyx_v_v)); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 51, __pyx_L1_error)

      /* "opendht.pyx":48
 *     if 'lookup' in cbs and cbs['lookup']:
 *         vals = []
 *         for val in deref(values):             # <<<<<<<<<<<<<<
 *             v = IndexValue()
 *             v._value = val
 */
    }

    /* "opendht.pyx":52
 *             v._value = val
 *             vals.append(v)
 *         cbs['lookup'](vals, p.toString())             # <<<<<<<<<<<<<<
 * 
 * cdef inline void shutdown_callback(void* user_data) with gil:
 */
    __pyx_t_9 = PyObject_GetItem(__pyx_v_cbs, __pyx_n_u_lookup); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_p->toString()); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = NULL;
    __pyx_t_12 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_12 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_v_vals, __pyx_t_10};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_v_vals, __pyx_t_10};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else
    #endif
    {
      __pyx_t_13 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (__pyx_t_11) {
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_11); __pyx_t_11 = NULL;
      }
      __Pyx_INCREF(__pyx_v_vals);
      __Pyx_GIVEREF(__pyx_v_vals);
      PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_12, __pyx_v_vals);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_12, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "opendht.pyx":46
 * cdef inline void lookup_callback(cpp.vector[cpp.shared_ptr[cpp.IndexValue]]* values, cpp.Prefix* p, void *user_data) with gil:
 *     cbs = <object>user_data
 *     if 'lookup' in cbs and cbs['lookup']:             # <<<<<<<<<<<<<<
 *         vals = []
 *         for val in deref(values):
 */
  }

  /* "opendht.pyx":44
 * import threading
 * 
 * cdef inline void lookup_callback(cpp.vector[cpp.shared_ptr[cpp.IndexValue]]* values, cpp.Prefix* p, void *user_data) with gil:             # <<<<<<<<<<<<<<
 *     cbs = <object>user_data
 *     if 'lookup' in cbs and cbs['lookup']:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_WriteUnraisable("opendht.lookup_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cbs);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "opendht.pyx":54
 *         cbs['lookup'](vals, p.toString())
 * 
 * cdef inline void shutdown_callback(void* user_data) with gil:             # <<<<<<<<<<<<<<
 *     cbs = <object>user_data
 *     if 'shutdown' in cbs and cbs['shutdown']:
 */

static CYTHON_INLINE void __pyx_f_7opendht_shutdown_callback(void *__pyx_v_user_data) {
  PyObject *__pyx_v_cbs = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("shutdown_callback", 0);

  /* "opendht.pyx":55
 * 
 * cdef inline void shutdown_callback(void* user_data) with gil:
 *     cbs = <object>user_data             # <<<<<<<<<<<<<<
 *     if 'shutdown' in cbs and cbs['shutdown']:
 *         cbs['shutdown']()
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_user_data);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_cbs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "opendht.pyx":56
 * cdef inline void shutdown_callback(void* user_data) with gil:
 *     cbs = <object>user_data
 *     if 'shutdown' in cbs and cbs['shutdown']:             # <<<<<<<<<<<<<<
 *         cbs['shutdown']()
 *     ref.Py_DECREF(cbs)
 */
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_shutdown, __pyx_v_cbs, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 56, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = PyObject_GetItem(__pyx_v_cbs, __pyx_n_u_shutdown); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "opendht.pyx":57
 *     cbs = <object>user_data
 *     if 'shutdown' in cbs and cbs['shutdown']:
 *         cbs['shutdown']()             # <<<<<<<<<<<<<<
 *     ref.Py_DECREF(cbs)
 * 
 */
    __pyx_t_5 = PyObject_GetItem(__pyx_v_cbs, __pyx_n_u_shutdown); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "opendht.pyx":56
 * cdef inline void shutdown_callback(void* user_data) with gil:
 *     cbs = <object>user_data
 *     if 'shutdown' in cbs and cbs['shutdown']:             # <<<<<<<<<<<<<<
 *         cbs['shutdown']()
 *     ref.Py_DECREF(cbs)
 */
  }

  /* "opendht.pyx":58
 *     if 'shutdown' in cbs and cbs['shutdown']:
 *         cbs['shutdown']()
 *     ref.Py_DECREF(cbs)             # <<<<<<<<<<<<<<
 * 
 * cdef inline bool get_callback(shared_ptr[cpp.Value] value, void *user_data) with gil:
 */
  Py_DECREF(__pyx_v_cbs);

  /* "opendht.pyx":54
 *         cbs['lookup'](vals, p.toString())
 * 
 * cdef inline void shutdown_callback(void* user_data) with gil:             # <<<<<<<<<<<<<<
 *     cbs = <object>user_data
 *     if 'shutdown' in cbs and cbs['shutdown']:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("opendht.shutdown_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cbs);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "opendht.pyx":60
 *     ref.Py_DECREF(cbs)
 * 
 * cdef inline bool get_callback(shared_ptr[cpp.Value] value, void *user_data) with gil:             # <<<<<<<<<<<<<<
 *     cbs = <object>user_data
 *     cb = cbs['get']
 */

static CYTHON_INLINE bool __pyx_f_7opendht_get_callback(std::shared_ptr<dht::Value>  __pyx_v_value, void *__pyx_v_user_data) {
  PyObject *__pyx_v_cbs = NULL;
  PyObject *__pyx_v_cb = NULL;
  PyObject *__pyx_v_f = NULL;
  struct __pyx_obj_7opendht_Value *__pyx_v_pv = NULL;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  bool __pyx_t_9;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("get_callback", 0);

  /* "opendht.pyx":61
 * 
 * cdef inline bool get_callback(shared_ptr[cpp.Value] value, void *user_data) with gil:
 *     cbs = <object>user_data             # <<<<<<<<<<<<<<
 *     cb = cbs['get']
 *     f = cbs['filter'] if 'filter' in cbs else None
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_user_data);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_cbs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "opendht.pyx":62
 * cdef inline bool get_callback(shared_ptr[cpp.Value] value, void *user_data) with gil:
 *     cbs = <object>user_data
 *     cb = cbs['get']             # <<<<<<<<<<<<<<
 *     f = cbs['filter'] if 'filter' in cbs else None
 *     pv = Value()
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_cbs, __pyx_n_u_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cb = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "opendht.pyx":63
 *     cbs = <object>user_data
 *     cb = cbs['get']
 *     f = cbs['filter'] if 'filter' in cbs else None             # <<<<<<<<<<<<<<
 *     pv = Value()
 *     pv._value = value
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_filter, __pyx_v_cbs, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 63, __pyx_L1_error)
  if ((__pyx_t_2 != 0)) {
    __pyx_t_3 = PyObject_GetItem(__pyx_v_cbs, __pyx_n_u_filter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_v_f = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "opendht.pyx":64
 *     cb = cbs['get']
 *     f = cbs['filter'] if 'filter' in cbs else None
 *     pv = Value()             # <<<<<<<<<<<<<<
 *     pv._value = value
 *     return cb(pv) if not f or f(pv) else True
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_Value), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pv = ((struct __pyx_obj_7opendht_Value *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":65
 *     f = cbs['filter'] if 'filter' in cbs else None
 *     pv = Value()
 *     pv._value = value             # <<<<<<<<<<<<<<
 *     return cb(pv) if not f or f(pv) else True
 * 
 */
  __pyx_v_pv->_value = __pyx_v_value;

  /* "opendht.pyx":66
 *     pv = Value()
 *     pv._value = value
 *     return cb(pv) if not f or f(pv) else True             # <<<<<<<<<<<<<<
 * 
 * cdef inline void done_callback(bool done, cpp.vector[shared_ptr[cpp.Node]]* nodes, void *user_data) with gil:
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_f); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 66, __pyx_L1_error)
  __pyx_t_5 = ((!__pyx_t_4) != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L3_bool_binop_done;
  }
  __Pyx_INCREF(__pyx_v_f);
  __pyx_t_6 = __pyx_v_f; __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, ((PyObject *)__pyx_v_pv)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, ((PyObject *)__pyx_v_pv)};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 66, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, ((PyObject *)__pyx_v_pv)};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 66, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 66, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_pv));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_pv));
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, ((PyObject *)__pyx_v_pv));
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 66, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_5;
  __pyx_L3_bool_binop_done:;
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_cb);
    __pyx_t_6 = __pyx_v_cb; __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, ((PyObject *)__pyx_v_pv)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 66, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, ((PyObject *)__pyx_v_pv)};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 66, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, ((PyObject *)__pyx_v_pv)};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 66, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 66, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_pv));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_pv));
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, ((PyObject *)__pyx_v_pv));
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 66, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = ((PyObject *)__pyx_t_9);
  } else {
    __pyx_t_1 = ((PyObject *)1);
  }
  __pyx_r = ((bool)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":60
 *     ref.Py_DECREF(cbs)
 * 
 * cdef inline bool get_callback(shared_ptr[cpp.Value] value, void *user_data) with gil:             # <<<<<<<<<<<<<<
 *     cbs = <object>user_data
 *     cb = cbs['get']
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("opendht.get_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cbs);
  __Pyx_XDECREF(__pyx_v_cb);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF((PyObject *)__pyx_v_pv);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "opendht.pyx":68
 *     return cb(pv) if not f or f(pv) else True
 * 
 * cdef inline void done_callback(bool done, cpp.vector[shared_ptr[cpp.Node]]* nodes, void *user_data) with gil:             # <<<<<<<<<<<<<<
 *     node_ids = []
 *     for n in deref(nodes):
 */

static CYTHON_INLINE void __pyx_f_7opendht_done_callback(bool __pyx_v_done, std::vector<std::shared_ptr<dht::Node> >  *__pyx_v_nodes, void *__pyx_v_user_data) {
  PyObject *__pyx_v_node_ids = NULL;
  std::shared_ptr<dht::Node>  __pyx_v_n;
  struct __pyx_obj_7opendht_NodeEntry *__pyx_v_h = NULL;
  PyObject *__pyx_v_cbs = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::shared_ptr<dht::Node> > ::iterator __pyx_t_2;
  std::vector<std::shared_ptr<dht::Node> >  *__pyx_t_3;
  std::shared_ptr<dht::Node>  __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("done_callback", 0);

  /* "opendht.pyx":69
 * 
 * cdef inline void done_callback(bool done, cpp.vector[shared_ptr[cpp.Node]]* nodes, void *user_data) with gil:
 *     node_ids = []             # <<<<<<<<<<<<<<
 *     for n in deref(nodes):
 *         h = NodeEntry()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_node_ids = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":70
 * cdef inline void done_callback(bool done, cpp.vector[shared_ptr[cpp.Node]]* nodes, void *user_data) with gil:
 *     node_ids = []
 *     for n in deref(nodes):             # <<<<<<<<<<<<<<
 *         h = NodeEntry()
 *         h._v.first = n.get().getId()
 */
  __pyx_t_3 = &(*__pyx_v_nodes);
  __pyx_t_2 = __pyx_t_3->begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_t_3->end())) break;
    __pyx_t_4 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_n = __pyx_t_4;

    /* "opendht.pyx":71
 *     node_ids = []
 *     for n in deref(nodes):
 *         h = NodeEntry()             # <<<<<<<<<<<<<<
 *         h._v.first = n.get().getId()
 *         h._v.second = n
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_NodeEntry), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_h, ((struct __pyx_obj_7opendht_NodeEntry *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "opendht.pyx":72
 *     for n in deref(nodes):
 *         h = NodeEntry()
 *         h._v.first = n.get().getId()             # <<<<<<<<<<<<<<
 *         h._v.second = n
 *         node_ids.append(h)
 */
    __pyx_v_h->_v.first = __pyx_v_n.get()->getId();

    /* "opendht.pyx":73
 *         h = NodeEntry()
 *         h._v.first = n.get().getId()
 *         h._v.second = n             # <<<<<<<<<<<<<<
 *         node_ids.append(h)
 *     cbs = <object>user_data
 */
    __pyx_v_h->_v.second = __pyx_v_n;

    /* "opendht.pyx":74
 *         h._v.first = n.get().getId()
 *         h._v.second = n
 *         node_ids.append(h)             # <<<<<<<<<<<<<<
 *     cbs = <object>user_data
 *     if 'done' in cbs and cbs['done']:
 */
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_node_ids, ((PyObject *)__pyx_v_h)); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 74, __pyx_L1_error)

    /* "opendht.pyx":70
 * cdef inline void done_callback(bool done, cpp.vector[shared_ptr[cpp.Node]]* nodes, void *user_data) with gil:
 *     node_ids = []
 *     for n in deref(nodes):             # <<<<<<<<<<<<<<
 *         h = NodeEntry()
 *         h._v.first = n.get().getId()
 */
  }

  /* "opendht.pyx":75
 *         h._v.second = n
 *         node_ids.append(h)
 *     cbs = <object>user_data             # <<<<<<<<<<<<<<
 *     if 'done' in cbs and cbs['done']:
 *         cbs['done'](done, node_ids)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_user_data);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_cbs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "opendht.pyx":76
 *         node_ids.append(h)
 *     cbs = <object>user_data
 *     if 'done' in cbs and cbs['done']:             # <<<<<<<<<<<<<<
 *         cbs['done'](done, node_ids)
 *     ref.Py_DECREF(cbs)
 */
  __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_done, __pyx_v_cbs, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_6 = __pyx_t_8;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_1 = PyObject_GetItem(__pyx_v_cbs, __pyx_n_u_done); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_t_8;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_6) {

    /* "opendht.pyx":77
 *     cbs = <object>user_data
 *     if 'done' in cbs and cbs['done']:
 *         cbs['done'](done, node_ids)             # <<<<<<<<<<<<<<
 *     ref.Py_DECREF(cbs)
 * 
 */
    __pyx_t_9 = PyObject_GetItem(__pyx_v_cbs, __pyx_n_u_done); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyBool_FromLong(__pyx_v_done); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = NULL;
    __pyx_t_12 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_12 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_10, __pyx_v_node_ids};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_10, __pyx_v_node_ids};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else
    #endif
    {
      __pyx_t_13 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (__pyx_t_11) {
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_11); __pyx_t_11 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_12, __pyx_t_10);
      __Pyx_INCREF(__pyx_v_node_ids);
      __Pyx_GIVEREF(__pyx_v_node_ids);
      PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_12, __pyx_v_node_ids);
      __pyx_t_10 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "opendht.pyx":76
 *         node_ids.append(h)
 *     cbs = <object>user_data
 *     if 'done' in cbs and cbs['done']:             # <<<<<<<<<<<<<<
 *         cbs['done'](done, node_ids)
 *     ref.Py_DECREF(cbs)
 */
  }

  /* "opendht.pyx":78
 *     if 'done' in cbs and cbs['done']:
 *         cbs['done'](done, node_ids)
 *     ref.Py_DECREF(cbs)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void done_callback_simple(bool done, void *user_data) with gil:
 */
  Py_DECREF(__pyx_v_cbs);

  /* "opendht.pyx":68
 *     return cb(pv) if not f or f(pv) else True
 * 
 * cdef inline void done_callback(bool done, cpp.vector[shared_ptr[cpp.Node]]* nodes, void *user_data) with gil:             # <<<<<<<<<<<<<<
 *     node_ids = []
 *     for n in deref(nodes):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_WriteUnraisable("opendht.done_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_node_ids);
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XDECREF(__pyx_v_cbs);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "opendht.pyx":80
 *     ref.Py_DECREF(cbs)
 * 
 * cdef inline void done_callback_simple(bool done, void *user_data) with gil:             # <<<<<<<<<<<<<<
 *     cbs = <object>user_data
 *     if 'done' in cbs and cbs['done']:
 */

static CYTHON_INLINE void __pyx_f_7opendht_done_callback_simple(bool __pyx_v_done, void *__pyx_v_user_data) {
  PyObject *__pyx_v_cbs = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("done_callback_simple", 0);

  /* "opendht.pyx":81
 * 
 * cdef inline void done_callback_simple(bool done, void *user_data) with gil:
 *     cbs = <object>user_data             # <<<<<<<<<<<<<<
 *     if 'done' in cbs and cbs['done']:
 *         cbs['done'](done)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_user_data);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_cbs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "opendht.pyx":82
 * cdef inline void done_callback_simple(bool done, void *user_data) with gil:
 *     cbs = <object>user_data
 *     if 'done' in cbs and cbs['done']:             # <<<<<<<<<<<<<<
 *         cbs['done'](done)
 *     ref.Py_DECREF(cbs)
 */
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_done, __pyx_v_cbs, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 82, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = PyObject_GetItem(__pyx_v_cbs, __pyx_n_u_done); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "opendht.pyx":83
 *     cbs = <object>user_data
 *     if 'done' in cbs and cbs['done']:
 *         cbs['done'](done)             # <<<<<<<<<<<<<<
 *     ref.Py_DECREF(cbs)
 * 
 */
    __pyx_t_5 = PyObject_GetItem(__pyx_v_cbs, __pyx_n_u_done); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_done); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 83, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "opendht.pyx":82
 * cdef inline void done_callback_simple(bool done, void *user_data) with gil:
 *     cbs = <object>user_data
 *     if 'done' in cbs and cbs['done']:             # <<<<<<<<<<<<<<
 *         cbs['done'](done)
 *     ref.Py_DECREF(cbs)
 */
  }

  /* "opendht.pyx":84
 *     if 'done' in cbs and cbs['done']:
 *         cbs['done'](done)
 *     ref.Py_DECREF(cbs)             # <<<<<<<<<<<<<<
 * 
 * cdef class _WithID(object):
 */
  Py_DECREF(__pyx_v_cbs);

  /* "opendht.pyx":80
 *     ref.Py_DECREF(cbs)
 * 
 * cdef inline void done_callback_simple(bool done, void *user_data) with gil:             # <<<<<<<<<<<<<<
 *     cbs = <object>user_data
 *     if 'done' in cbs and cbs['done']:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("opendht.done_callback_simple", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cbs);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "opendht.pyx":87
 * 
 * cdef class _WithID(object):
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s '%s'>" % (self.__class__.__name__, str(self))
 *     def __str__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_7_WithID_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_7_WithID_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_7_WithID___repr__(((struct __pyx_obj_7opendht__WithID *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_7_WithID___repr__(struct __pyx_obj_7opendht__WithID *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "opendht.pyx":88
 * cdef class _WithID(object):
 *     def __repr__(self):
 *         return "<%s '%s'>" % (self.__class__.__name__, str(self))             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         return self.getId().toString().decode()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_s_s, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":87
 * 
 * cdef class _WithID(object):
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s '%s'>" % (self.__class__.__name__, str(self))
 *     def __str__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opendht._WithID.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":89
 *     def __repr__(self):
 *         return "<%s '%s'>" % (self.__class__.__name__, str(self))
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.getId().toString().decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_7_WithID_3__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_7_WithID_3__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_7_WithID_2__str__(((struct __pyx_obj_7opendht__WithID *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_7_WithID_2__str__(struct __pyx_obj_7opendht__WithID *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "opendht.pyx":90
 *         return "<%s '%s'>" % (self.__class__.__name__, str(self))
 *     def __str__(self):
 *         return self.getId().toString().decode()             # <<<<<<<<<<<<<<
 * 
 * cdef class InfoHash(_WithID):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getId); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_toString); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":89
 *     def __repr__(self):
 *         return "<%s '%s'>" % (self.__class__.__name__, str(self))
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.getId().toString().decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opendht._WithID.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = ()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_7_WithID_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_7_WithID_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_7_WithID_4__reduce_cython__(((struct __pyx_obj_7opendht__WithID *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_7_WithID_4__reduce_cython__(struct __pyx_obj_7opendht__WithID *__pyx_v_self) {
  int __pyx_v_use_setstate;
  PyObject *__pyx_v_state = NULL;
  PyObject *__pyx_v__dict = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":4
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":5
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":6
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":7
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":5
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":9
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle__WithID, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":10
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle__WithID, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":11
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle__WithID, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle__WithID, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle__WithID); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":10
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle__WithID, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":13
 *         return __pyx_unpickle__WithID, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle__WithID, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle__WithID__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle__WithID); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = ()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opendht._WithID.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle__WithID, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle__WithID__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_7_WithID_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_7_WithID_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_7_WithID_6__setstate_cython__(((struct __pyx_obj_7opendht__WithID *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_7_WithID_6__setstate_cython__(struct __pyx_obj_7opendht__WithID *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":15
 *         return __pyx_unpickle__WithID, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle__WithID__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7opendht___pyx_unpickle__WithID__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle__WithID, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle__WithID__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht._WithID.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":94
 * cdef class InfoHash(_WithID):
 *     cdef cpp.InfoHash _infohash
 *     def __cinit__(self, bytes str=b''):             # <<<<<<<<<<<<<<
 *         self._infohash = cpp.InfoHash(str) if str else cpp.InfoHash()
 *     def __bool__(InfoHash self):
 */

/* Python wrapper */
static int __pyx_pw_7opendht_8InfoHash_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opendht_8InfoHash_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_str = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_str,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)__pyx_kp_b_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_str);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 94, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_str = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 94, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.InfoHash.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_str), (&PyBytes_Type), 1, "str", 1))) __PYX_ERR(0, 94, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_8InfoHash___cinit__(((struct __pyx_obj_7opendht_InfoHash *)__pyx_v_self), __pyx_v_str);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_8InfoHash___cinit__(struct __pyx_obj_7opendht_InfoHash *__pyx_v_self, PyObject *__pyx_v_str) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  dht::InfoHash __pyx_t_1;
  int __pyx_t_2;
  std::string __pyx_t_3;
  dht::InfoHash __pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "opendht.pyx":95
 *     cdef cpp.InfoHash _infohash
 *     def __cinit__(self, bytes str=b''):
 *         self._infohash = cpp.InfoHash(str) if str else cpp.InfoHash()             # <<<<<<<<<<<<<<
 *     def __bool__(InfoHash self):
 *         return <bool>self._infohash
 */
  __pyx_t_2 = (__pyx_v_str != Py_None) && (PyBytes_GET_SIZE(__pyx_v_str) != 0);
  if (__pyx_t_2) {
    __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_v_str); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L1_error)
    try {
      __pyx_t_4 = dht::InfoHash(__pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 95, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_t_4;
  } else {
    try {
      __pyx_t_4 = dht::InfoHash();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 95, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_t_4;
  }
  __pyx_v_self->_infohash = __pyx_t_1;

  /* "opendht.pyx":94
 * cdef class InfoHash(_WithID):
 *     cdef cpp.InfoHash _infohash
 *     def __cinit__(self, bytes str=b''):             # <<<<<<<<<<<<<<
 *         self._infohash = cpp.InfoHash(str) if str else cpp.InfoHash()
 *     def __bool__(InfoHash self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("opendht.InfoHash.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":96
 *     def __cinit__(self, bytes str=b''):
 *         self._infohash = cpp.InfoHash(str) if str else cpp.InfoHash()
 *     def __bool__(InfoHash self):             # <<<<<<<<<<<<<<
 *         return <bool>self._infohash
 *     def __richcmp__(InfoHash self, InfoHash other, int op):
 */

/* Python wrapper */
static int __pyx_pw_7opendht_8InfoHash_3__bool__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7opendht_8InfoHash_3__bool__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bool__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8InfoHash_2__bool__(((struct __pyx_obj_7opendht_InfoHash *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_8InfoHash_2__bool__(struct __pyx_obj_7opendht_InfoHash *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bool__", 0);

  /* "opendht.pyx":97
 *         self._infohash = cpp.InfoHash(str) if str else cpp.InfoHash()
 *     def __bool__(InfoHash self):
 *         return <bool>self._infohash             # <<<<<<<<<<<<<<
 *     def __richcmp__(InfoHash self, InfoHash other, int op):
 *         if op == 0:
 */
  __pyx_r = ((bool)__pyx_v_self->_infohash);
  goto __pyx_L0;

  /* "opendht.pyx":96
 *     def __cinit__(self, bytes str=b''):
 *         self._infohash = cpp.InfoHash(str) if str else cpp.InfoHash()
 *     def __bool__(InfoHash self):             # <<<<<<<<<<<<<<
 *         return <bool>self._infohash
 *     def __richcmp__(InfoHash self, InfoHash other, int op):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":98
 *     def __bool__(InfoHash self):
 *         return <bool>self._infohash
 *     def __richcmp__(InfoHash self, InfoHash other, int op):             # <<<<<<<<<<<<<<
 *         if op == 0:
 *             return self._infohash < other._infohash
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8InfoHash_5__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_7opendht_8InfoHash_5__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_7opendht_InfoHash, 1, "self", 0))) __PYX_ERR(0, 98, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_7opendht_InfoHash, 1, "other", 0))) __PYX_ERR(0, 98, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_8InfoHash_4__richcmp__(((struct __pyx_obj_7opendht_InfoHash *)__pyx_v_self), ((struct __pyx_obj_7opendht_InfoHash *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8InfoHash_4__richcmp__(struct __pyx_obj_7opendht_InfoHash *__pyx_v_self, struct __pyx_obj_7opendht_InfoHash *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "opendht.pyx":99
 *         return <bool>self._infohash
 *     def __richcmp__(InfoHash self, InfoHash other, int op):
 *         if op == 0:             # <<<<<<<<<<<<<<
 *             return self._infohash < other._infohash
 *         if op == 1:
 */
  __pyx_t_1 = ((__pyx_v_op == 0) != 0);
  if (__pyx_t_1) {

    /* "opendht.pyx":100
 *     def __richcmp__(InfoHash self, InfoHash other, int op):
 *         if op == 0:
 *             return self._infohash < other._infohash             # <<<<<<<<<<<<<<
 *         if op == 1:
 *             return self._infohash < other._infohash or self._infohash == other._infohash
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_self->_infohash < __pyx_v_other->_infohash)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "opendht.pyx":99
 *         return <bool>self._infohash
 *     def __richcmp__(InfoHash self, InfoHash other, int op):
 *         if op == 0:             # <<<<<<<<<<<<<<
 *             return self._infohash < other._infohash
 *         if op == 1:
 */
  }

  /* "opendht.pyx":101
 *         if op == 0:
 *             return self._infohash < other._infohash
 *         if op == 1:             # <<<<<<<<<<<<<<
 *             return self._infohash < other._infohash or self._infohash == other._infohash
 *         if op == 2:
 */
  __pyx_t_1 = ((__pyx_v_op == 1) != 0);
  if (__pyx_t_1) {

    /* "opendht.pyx":102
 *             return self._infohash < other._infohash
 *         if op == 1:
 *             return self._infohash < other._infohash or self._infohash == other._infohash             # <<<<<<<<<<<<<<
 *         if op == 2:
 *             return self._infohash == other._infohash
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = (__pyx_v_self->_infohash < __pyx_v_other->_infohash);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_self->_infohash == __pyx_v_other->_infohash);
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_L5_bool_binop_done:;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "opendht.pyx":101
 *         if op == 0:
 *             return self._infohash < other._infohash
 *         if op == 1:             # <<<<<<<<<<<<<<
 *             return self._infohash < other._infohash or self._infohash == other._infohash
 *         if op == 2:
 */
  }

  /* "opendht.pyx":103
 *         if op == 1:
 *             return self._infohash < other._infohash or self._infohash == other._infohash
 *         if op == 2:             # <<<<<<<<<<<<<<
 *             return self._infohash == other._infohash
 *         return NotImplemented
 */
  __pyx_t_1 = ((__pyx_v_op == 2) != 0);
  if (__pyx_t_1) {

    /* "opendht.pyx":104
 *             return self._infohash < other._infohash or self._infohash == other._infohash
 *         if op == 2:
 *             return self._infohash == other._infohash             # <<<<<<<<<<<<<<
 *         return NotImplemented
 *     def getBit(InfoHash self, bit):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_self->_infohash == __pyx_v_other->_infohash)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "opendht.pyx":103
 *         if op == 1:
 *             return self._infohash < other._infohash or self._infohash == other._infohash
 *         if op == 2:             # <<<<<<<<<<<<<<
 *             return self._infohash == other._infohash
 *         return NotImplemented
 */
  }

  /* "opendht.pyx":105
 *         if op == 2:
 *             return self._infohash == other._infohash
 *         return NotImplemented             # <<<<<<<<<<<<<<
 *     def getBit(InfoHash self, bit):
 *         return self._infohash.getBit(bit)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_builtin_NotImplemented);
  __pyx_r = __pyx_builtin_NotImplemented;
  goto __pyx_L0;

  /* "opendht.pyx":98
 *     def __bool__(InfoHash self):
 *         return <bool>self._infohash
 *     def __richcmp__(InfoHash self, InfoHash other, int op):             # <<<<<<<<<<<<<<
 *         if op == 0:
 *             return self._infohash < other._infohash
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("opendht.InfoHash.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":106
 *             return self._infohash == other._infohash
 *         return NotImplemented
 *     def getBit(InfoHash self, bit):             # <<<<<<<<<<<<<<
 *         return self._infohash.getBit(bit)
 *     def setBit(InfoHash self, bit, b):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8InfoHash_7getBit(PyObject *__pyx_v_self, PyObject *__pyx_v_bit); /*proto*/
static PyObject *__pyx_pw_7opendht_8InfoHash_7getBit(PyObject *__pyx_v_self, PyObject *__pyx_v_bit) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBit (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8InfoHash_6getBit(((struct __pyx_obj_7opendht_InfoHash *)__pyx_v_self), ((PyObject *)__pyx_v_bit));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8InfoHash_6getBit(struct __pyx_obj_7opendht_InfoHash *__pyx_v_self, PyObject *__pyx_v_bit) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getBit", 0);

  /* "opendht.pyx":107
 *         return NotImplemented
 *     def getBit(InfoHash self, bit):
 *         return self._infohash.getBit(bit)             # <<<<<<<<<<<<<<
 *     def setBit(InfoHash self, bit, b):
 *         self._infohash.setBit(bit, b)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_bit); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 107, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_infohash.getBit(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":106
 *             return self._infohash == other._infohash
 *         return NotImplemented
 *     def getBit(InfoHash self, bit):             # <<<<<<<<<<<<<<
 *         return self._infohash.getBit(bit)
 *     def setBit(InfoHash self, bit, b):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opendht.InfoHash.getBit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":108
 *     def getBit(InfoHash self, bit):
 *         return self._infohash.getBit(bit)
 *     def setBit(InfoHash self, bit, b):             # <<<<<<<<<<<<<<
 *         self._infohash.setBit(bit, b)
 *     def getId(InfoHash self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8InfoHash_9setBit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opendht_8InfoHash_9setBit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bit = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setBit (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bit,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bit)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setBit", 1, 2, 2, 1); __PYX_ERR(0, 108, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setBit") < 0)) __PYX_ERR(0, 108, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bit = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setBit", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 108, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.InfoHash.setBit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_8InfoHash_8setBit(((struct __pyx_obj_7opendht_InfoHash *)__pyx_v_self), __pyx_v_bit, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8InfoHash_8setBit(struct __pyx_obj_7opendht_InfoHash *__pyx_v_self, PyObject *__pyx_v_bit, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  bool __pyx_t_2;
  __Pyx_RefNannySetupContext("setBit", 0);

  /* "opendht.pyx":109
 *         return self._infohash.getBit(bit)
 *     def setBit(InfoHash self, bit, b):
 *         self._infohash.setBit(bit, b)             # <<<<<<<<<<<<<<
 *     def getId(InfoHash self):
 *         return self
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_bit); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_b); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L1_error)
  __pyx_v_self->_infohash.setBit(__pyx_t_1, __pyx_t_2);

  /* "opendht.pyx":108
 *     def getBit(InfoHash self, bit):
 *         return self._infohash.getBit(bit)
 *     def setBit(InfoHash self, bit, b):             # <<<<<<<<<<<<<<
 *         self._infohash.setBit(bit, b)
 *     def getId(InfoHash self):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("opendht.InfoHash.setBit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":110
 *     def setBit(InfoHash self, bit, b):
 *         self._infohash.setBit(bit, b)
 *     def getId(InfoHash self):             # <<<<<<<<<<<<<<
 *         return self
 *     def toString(InfoHash self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8InfoHash_11getId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_8InfoHash_11getId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getId (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8InfoHash_10getId(((struct __pyx_obj_7opendht_InfoHash *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8InfoHash_10getId(struct __pyx_obj_7opendht_InfoHash *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getId", 0);

  /* "opendht.pyx":111
 *         self._infohash.setBit(bit, b)
 *     def getId(InfoHash self):
 *         return self             # <<<<<<<<<<<<<<
 *     def toString(InfoHash self):
 *         return self._infohash.toString()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "opendht.pyx":110
 *     def setBit(InfoHash self, bit, b):
 *         self._infohash.setBit(bit, b)
 *     def getId(InfoHash self):             # <<<<<<<<<<<<<<
 *         return self
 *     def toString(InfoHash self):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":112
 *     def getId(InfoHash self):
 *         return self
 *     def toString(InfoHash self):             # <<<<<<<<<<<<<<
 *         return self._infohash.toString()
 *     def toFloat(InfoHash self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8InfoHash_13toString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_8InfoHash_13toString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("toString (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8InfoHash_12toString(((struct __pyx_obj_7opendht_InfoHash *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8InfoHash_12toString(struct __pyx_obj_7opendht_InfoHash *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("toString", 0);

  /* "opendht.pyx":113
 *         return self
 *     def toString(InfoHash self):
 *         return self._infohash.toString()             # <<<<<<<<<<<<<<
 *     def toFloat(InfoHash self):
 *         return self._infohash.toFloat()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->_infohash.toString()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":112
 *     def getId(InfoHash self):
 *         return self
 *     def toString(InfoHash self):             # <<<<<<<<<<<<<<
 *         return self._infohash.toString()
 *     def toFloat(InfoHash self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.InfoHash.toString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":114
 *     def toString(InfoHash self):
 *         return self._infohash.toString()
 *     def toFloat(InfoHash self):             # <<<<<<<<<<<<<<
 *         return self._infohash.toFloat()
 *     @staticmethod
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8InfoHash_15toFloat(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_8InfoHash_15toFloat(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("toFloat (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8InfoHash_14toFloat(((struct __pyx_obj_7opendht_InfoHash *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8InfoHash_14toFloat(struct __pyx_obj_7opendht_InfoHash *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("toFloat", 0);

  /* "opendht.pyx":115
 *         return self._infohash.toString()
 *     def toFloat(InfoHash self):
 *         return self._infohash.toFloat()             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     def commonBits(InfoHash a, InfoHash b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_infohash.toFloat()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":114
 *     def toString(InfoHash self):
 *         return self._infohash.toString()
 *     def toFloat(InfoHash self):             # <<<<<<<<<<<<<<
 *         return self._infohash.toFloat()
 *     @staticmethod
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.InfoHash.toFloat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":117
 *         return self._infohash.toFloat()
 *     @staticmethod
 *     def commonBits(InfoHash a, InfoHash b):             # <<<<<<<<<<<<<<
 *         return cpp.InfoHash.commonBits(a._infohash, b._infohash)
 *     @staticmethod
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8InfoHash_17commonBits(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opendht_8InfoHash_17commonBits = {"commonBits", (PyCFunction)__pyx_pw_7opendht_8InfoHash_17commonBits, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opendht_8InfoHash_17commonBits(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_a = 0;
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_b = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("commonBits (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("commonBits", 1, 2, 2, 1); __PYX_ERR(0, 117, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "commonBits") < 0)) __PYX_ERR(0, 117, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = ((struct __pyx_obj_7opendht_InfoHash *)values[0]);
    __pyx_v_b = ((struct __pyx_obj_7opendht_InfoHash *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("commonBits", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 117, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.InfoHash.commonBits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7opendht_InfoHash, 1, "a", 0))) __PYX_ERR(0, 117, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_7opendht_InfoHash, 1, "b", 0))) __PYX_ERR(0, 117, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_8InfoHash_16commonBits(__pyx_v_a, __pyx_v_b);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8InfoHash_16commonBits(struct __pyx_obj_7opendht_InfoHash *__pyx_v_a, struct __pyx_obj_7opendht_InfoHash *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("commonBits", 0);

  /* "opendht.pyx":118
 *     @staticmethod
 *     def commonBits(InfoHash a, InfoHash b):
 *         return cpp.InfoHash.commonBits(a._infohash, b._infohash)             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     def get(str key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(dht::InfoHash::commonBits(__pyx_v_a->_infohash, __pyx_v_b->_infohash)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":117
 *         return self._infohash.toFloat()
 *     @staticmethod
 *     def commonBits(InfoHash a, InfoHash b):             # <<<<<<<<<<<<<<
 *         return cpp.InfoHash.commonBits(a._infohash, b._infohash)
 *     @staticmethod
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.InfoHash.commonBits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":120
 *         return cpp.InfoHash.commonBits(a._infohash, b._infohash)
 *     @staticmethod
 *     def get(str key):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = cpp.InfoHash.get(key.encode())
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8InfoHash_19get(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opendht_8InfoHash_19get = {"get", (PyCFunction)__pyx_pw_7opendht_8InfoHash_19get, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opendht_8InfoHash_19get(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get") < 0)) __PYX_ERR(0, 120, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_key = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 120, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.InfoHash.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), (&PyUnicode_Type), 1, "key", 1))) __PYX_ERR(0, 120, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_8InfoHash_18get(__pyx_v_key);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8InfoHash_18get(PyObject *__pyx_v_key) {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_h = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  __Pyx_RefNannySetupContext("get", 0);

  /* "opendht.pyx":121
 *     @staticmethod
 *     def get(str key):
 *         h = InfoHash()             # <<<<<<<<<<<<<<
 *         h._infohash = cpp.InfoHash.get(key.encode())
 *         return h
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_InfoHash), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_h = ((struct __pyx_obj_7opendht_InfoHash *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":122
 *     def get(str key):
 *         h = InfoHash()
 *         h._infohash = cpp.InfoHash.get(key.encode())             # <<<<<<<<<<<<<<
 *         return h
 *     @staticmethod
 */
  if (unlikely(__pyx_v_key == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "encode");
    __PYX_ERR(0, 122, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsEncodedString(__pyx_v_key, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_h->_infohash = dht::InfoHash::get(__pyx_t_2);

  /* "opendht.pyx":123
 *         h = InfoHash()
 *         h._infohash = cpp.InfoHash.get(key.encode())
 *         return h             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     def getRandom():
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  __pyx_r = ((PyObject *)__pyx_v_h);
  goto __pyx_L0;

  /* "opendht.pyx":120
 *         return cpp.InfoHash.commonBits(a._infohash, b._infohash)
 *     @staticmethod
 *     def get(str key):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = cpp.InfoHash.get(key.encode())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.InfoHash.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":125
 *         return h
 *     @staticmethod
 *     def getRandom():             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = cpp.InfoHash.getRandom()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8InfoHash_21getRandom(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opendht_8InfoHash_21getRandom = {"getRandom", (PyCFunction)__pyx_pw_7opendht_8InfoHash_21getRandom, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opendht_8InfoHash_21getRandom(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRandom (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("getRandom", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getRandom", 0))) return NULL;
  __pyx_r = __pyx_pf_7opendht_8InfoHash_20getRandom();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8InfoHash_20getRandom() {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_h = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getRandom", 0);

  /* "opendht.pyx":126
 *     @staticmethod
 *     def getRandom():
 *         h = InfoHash()             # <<<<<<<<<<<<<<
 *         h._infohash = cpp.InfoHash.getRandom()
 *         return h
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_InfoHash), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_h = ((struct __pyx_obj_7opendht_InfoHash *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":127
 *     def getRandom():
 *         h = InfoHash()
 *         h._infohash = cpp.InfoHash.getRandom()             # <<<<<<<<<<<<<<
 *         return h
 * 
 */
  __pyx_v_h->_infohash = dht::InfoHash::getRandom();

  /* "opendht.pyx":128
 *         h = InfoHash()
 *         h._infohash = cpp.InfoHash.getRandom()
 *         return h             # <<<<<<<<<<<<<<
 * 
 * cdef class SockAddr(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  __pyx_r = ((PyObject *)__pyx_v_h);
  goto __pyx_L0;

  /* "opendht.pyx":125
 *         return h
 *     @staticmethod
 *     def getRandom():             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = cpp.InfoHash.getRandom()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.InfoHash.getRandom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8InfoHash_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_8InfoHash_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8InfoHash_22__reduce_cython__(((struct __pyx_obj_7opendht_InfoHash *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8InfoHash_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_InfoHash *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.InfoHash.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8InfoHash_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_8InfoHash_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8InfoHash_24__setstate_cython__(((struct __pyx_obj_7opendht_InfoHash *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8InfoHash_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_InfoHash *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.InfoHash.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":132
 * cdef class SockAddr(object):
 *     cdef cpp.SockAddr _addr
 *     def toString(SockAddr self):             # <<<<<<<<<<<<<<
 *         return self._addr.toString()
 *     def getPort(SockAddr self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8SockAddr_1toString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_8SockAddr_1toString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("toString (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8SockAddr_toString(((struct __pyx_obj_7opendht_SockAddr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8SockAddr_toString(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("toString", 0);

  /* "opendht.pyx":133
 *     cdef cpp.SockAddr _addr
 *     def toString(SockAddr self):
 *         return self._addr.toString()             # <<<<<<<<<<<<<<
 *     def getPort(SockAddr self):
 *         return self._addr.getPort()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->_addr.toString()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":132
 * cdef class SockAddr(object):
 *     cdef cpp.SockAddr _addr
 *     def toString(SockAddr self):             # <<<<<<<<<<<<<<
 *         return self._addr.toString()
 *     def getPort(SockAddr self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.SockAddr.toString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":134
 *     def toString(SockAddr self):
 *         return self._addr.toString()
 *     def getPort(SockAddr self):             # <<<<<<<<<<<<<<
 *         return self._addr.getPort()
 *     def getFamily(SockAddr self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8SockAddr_3getPort(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_8SockAddr_3getPort(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPort (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8SockAddr_2getPort(((struct __pyx_obj_7opendht_SockAddr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8SockAddr_2getPort(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getPort", 0);

  /* "opendht.pyx":135
 *         return self._addr.toString()
 *     def getPort(SockAddr self):
 *         return self._addr.getPort()             # <<<<<<<<<<<<<<
 *     def getFamily(SockAddr self):
 *         return self._addr.getFamily()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint16_t(__pyx_v_self->_addr.getPort()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":134
 *     def toString(SockAddr self):
 *         return self._addr.toString()
 *     def getPort(SockAddr self):             # <<<<<<<<<<<<<<
 *         return self._addr.getPort()
 *     def getFamily(SockAddr self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.SockAddr.getPort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":136
 *     def getPort(SockAddr self):
 *         return self._addr.getPort()
 *     def getFamily(SockAddr self):             # <<<<<<<<<<<<<<
 *         return self._addr.getFamily()
 *     def setPort(SockAddr self, cpp.in_port_t port):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8SockAddr_5getFamily(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_8SockAddr_5getFamily(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFamily (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8SockAddr_4getFamily(((struct __pyx_obj_7opendht_SockAddr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8SockAddr_4getFamily(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getFamily", 0);

  /* "opendht.pyx":137
 *         return self._addr.getPort()
 *     def getFamily(SockAddr self):
 *         return self._addr.getFamily()             # <<<<<<<<<<<<<<
 *     def setPort(SockAddr self, cpp.in_port_t port):
 *         return self._addr.setPort(port)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_short(__pyx_v_self->_addr.getFamily()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":136
 *     def getPort(SockAddr self):
 *         return self._addr.getPort()
 *     def getFamily(SockAddr self):             # <<<<<<<<<<<<<<
 *         return self._addr.getFamily()
 *     def setPort(SockAddr self, cpp.in_port_t port):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.SockAddr.getFamily", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":138
 *     def getFamily(SockAddr self):
 *         return self._addr.getFamily()
 *     def setPort(SockAddr self, cpp.in_port_t port):             # <<<<<<<<<<<<<<
 *         return self._addr.setPort(port)
 *     def setFamily(SockAddr self, cpp.sa_family_t af):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8SockAddr_7setPort(PyObject *__pyx_v_self, PyObject *__pyx_arg_port); /*proto*/
static PyObject *__pyx_pw_7opendht_8SockAddr_7setPort(PyObject *__pyx_v_self, PyObject *__pyx_arg_port) {
  __pyx_t_11opendht_cpp_in_port_t __pyx_v_port;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPort (wrapper)", 0);
  assert(__pyx_arg_port); {
    __pyx_v_port = __Pyx_PyInt_As_uint16_t(__pyx_arg_port); if (unlikely((__pyx_v_port == ((uint16_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 138, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.SockAddr.setPort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_8SockAddr_6setPort(((struct __pyx_obj_7opendht_SockAddr *)__pyx_v_self), ((__pyx_t_11opendht_cpp_in_port_t)__pyx_v_port));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8SockAddr_6setPort(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self, __pyx_t_11opendht_cpp_in_port_t __pyx_v_port) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setPort", 0);

  /* "opendht.pyx":139
 *         return self._addr.getFamily()
 *     def setPort(SockAddr self, cpp.in_port_t port):
 *         return self._addr.setPort(port)             # <<<<<<<<<<<<<<
 *     def setFamily(SockAddr self, cpp.sa_family_t af):
 *         return self._addr.setFamily(af)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->_addr.setPort(__pyx_v_port)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":138
 *     def getFamily(SockAddr self):
 *         return self._addr.getFamily()
 *     def setPort(SockAddr self, cpp.in_port_t port):             # <<<<<<<<<<<<<<
 *         return self._addr.setPort(port)
 *     def setFamily(SockAddr self, cpp.sa_family_t af):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.SockAddr.setPort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":140
 *     def setPort(SockAddr self, cpp.in_port_t port):
 *         return self._addr.setPort(port)
 *     def setFamily(SockAddr self, cpp.sa_family_t af):             # <<<<<<<<<<<<<<
 *         return self._addr.setFamily(af)
 *     def isLoopback(SockAddr self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8SockAddr_9setFamily(PyObject *__pyx_v_self, PyObject *__pyx_arg_af); /*proto*/
static PyObject *__pyx_pw_7opendht_8SockAddr_9setFamily(PyObject *__pyx_v_self, PyObject *__pyx_arg_af) {
  __pyx_t_11opendht_cpp_sa_family_t __pyx_v_af;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFamily (wrapper)", 0);
  assert(__pyx_arg_af); {
    __pyx_v_af = __Pyx_PyInt_As_unsigned_short(__pyx_arg_af); if (unlikely((__pyx_v_af == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.SockAddr.setFamily", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_8SockAddr_8setFamily(((struct __pyx_obj_7opendht_SockAddr *)__pyx_v_self), ((__pyx_t_11opendht_cpp_sa_family_t)__pyx_v_af));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8SockAddr_8setFamily(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self, __pyx_t_11opendht_cpp_sa_family_t __pyx_v_af) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setFamily", 0);

  /* "opendht.pyx":141
 *         return self._addr.setPort(port)
 *     def setFamily(SockAddr self, cpp.sa_family_t af):
 *         return self._addr.setFamily(af)             # <<<<<<<<<<<<<<
 *     def isLoopback(SockAddr self):
 *         return self._addr.isLoopback()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->_addr.setFamily(__pyx_v_af)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":140
 *     def setPort(SockAddr self, cpp.in_port_t port):
 *         return self._addr.setPort(port)
 *     def setFamily(SockAddr self, cpp.sa_family_t af):             # <<<<<<<<<<<<<<
 *         return self._addr.setFamily(af)
 *     def isLoopback(SockAddr self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.SockAddr.setFamily", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":142
 *     def setFamily(SockAddr self, cpp.sa_family_t af):
 *         return self._addr.setFamily(af)
 *     def isLoopback(SockAddr self):             # <<<<<<<<<<<<<<
 *         return self._addr.isLoopback()
 *     def isPrivate(SockAddr self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8SockAddr_11isLoopback(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_8SockAddr_11isLoopback(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isLoopback (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8SockAddr_10isLoopback(((struct __pyx_obj_7opendht_SockAddr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8SockAddr_10isLoopback(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isLoopback", 0);

  /* "opendht.pyx":143
 *         return self._addr.setFamily(af)
 *     def isLoopback(SockAddr self):
 *         return self._addr.isLoopback()             # <<<<<<<<<<<<<<
 *     def isPrivate(SockAddr self):
 *         return self._addr.isPrivate()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_addr.isLoopback()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":142
 *     def setFamily(SockAddr self, cpp.sa_family_t af):
 *         return self._addr.setFamily(af)
 *     def isLoopback(SockAddr self):             # <<<<<<<<<<<<<<
 *         return self._addr.isLoopback()
 *     def isPrivate(SockAddr self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.SockAddr.isLoopback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":144
 *     def isLoopback(SockAddr self):
 *         return self._addr.isLoopback()
 *     def isPrivate(SockAddr self):             # <<<<<<<<<<<<<<
 *         return self._addr.isPrivate()
 *     def isUnspecified(SockAddr self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8SockAddr_13isPrivate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_8SockAddr_13isPrivate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isPrivate (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8SockAddr_12isPrivate(((struct __pyx_obj_7opendht_SockAddr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8SockAddr_12isPrivate(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isPrivate", 0);

  /* "opendht.pyx":145
 *         return self._addr.isLoopback()
 *     def isPrivate(SockAddr self):
 *         return self._addr.isPrivate()             # <<<<<<<<<<<<<<
 *     def isUnspecified(SockAddr self):
 *         return self._addr.isUnspecified()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_addr.isPrivate()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":144
 *     def isLoopback(SockAddr self):
 *         return self._addr.isLoopback()
 *     def isPrivate(SockAddr self):             # <<<<<<<<<<<<<<
 *         return self._addr.isPrivate()
 *     def isUnspecified(SockAddr self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.SockAddr.isPrivate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":146
 *     def isPrivate(SockAddr self):
 *         return self._addr.isPrivate()
 *     def isUnspecified(SockAddr self):             # <<<<<<<<<<<<<<
 *         return self._addr.isUnspecified()
 *     def __str__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8SockAddr_15isUnspecified(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_8SockAddr_15isUnspecified(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isUnspecified (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8SockAddr_14isUnspecified(((struct __pyx_obj_7opendht_SockAddr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8SockAddr_14isUnspecified(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isUnspecified", 0);

  /* "opendht.pyx":147
 *         return self._addr.isPrivate()
 *     def isUnspecified(SockAddr self):
 *         return self._addr.isUnspecified()             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         return self.toString().decode()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_addr.isUnspecified()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":146
 *     def isPrivate(SockAddr self):
 *         return self._addr.isPrivate()
 *     def isUnspecified(SockAddr self):             # <<<<<<<<<<<<<<
 *         return self._addr.isUnspecified()
 *     def __str__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.SockAddr.isUnspecified", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":148
 *     def isUnspecified(SockAddr self):
 *         return self._addr.isUnspecified()
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.toString().decode()
 *     def __repr__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8SockAddr_17__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_8SockAddr_17__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8SockAddr_16__str__(((struct __pyx_obj_7opendht_SockAddr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8SockAddr_16__str__(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "opendht.pyx":149
 *         return self._addr.isUnspecified()
 *     def __str__(self):
 *         return self.toString().decode()             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return "<%s '%s'>" % (self.__class__.__name__, str(self))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_toString); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":148
 *     def isUnspecified(SockAddr self):
 *         return self._addr.isUnspecified()
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.toString().decode()
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("opendht.SockAddr.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":150
 *     def __str__(self):
 *         return self.toString().decode()
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s '%s'>" % (self.__class__.__name__, str(self))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8SockAddr_19__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_8SockAddr_19__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8SockAddr_18__repr__(((struct __pyx_obj_7opendht_SockAddr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8SockAddr_18__repr__(struct __pyx_obj_7opendht_SockAddr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "opendht.pyx":151
 *         return self.toString().decode()
 *     def __repr__(self):
 *         return "<%s '%s'>" % (self.__class__.__name__, str(self))             # <<<<<<<<<<<<<<
 * 
 * cdef class Node(_WithID):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_s_s, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":150
 *     def __str__(self):
 *         return self.toString().decode()
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s '%s'>" % (self.__class__.__name__, str(self))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opendht.SockAddr.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._addr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8SockAddr_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_8SockAddr_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8SockAddr_20__reduce_cython__(((struct __pyx_obj_7opendht_SockAddr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8SockAddr_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_SockAddr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._addr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._addr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._addr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.SockAddr.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._addr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._addr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8SockAddr_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_8SockAddr_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8SockAddr_22__setstate_cython__(((struct __pyx_obj_7opendht_SockAddr *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8SockAddr_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_SockAddr *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._addr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._addr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._addr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._addr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.SockAddr.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":155
 * cdef class Node(_WithID):
 *     cdef shared_ptr[cpp.Node] _node
 *     def getId(self):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = self._node.get().getId()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_4Node_1getId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_4Node_1getId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getId (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_4Node_getId(((struct __pyx_obj_7opendht_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_4Node_getId(struct __pyx_obj_7opendht_Node *__pyx_v_self) {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_h = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getId", 0);

  /* "opendht.pyx":156
 *     cdef shared_ptr[cpp.Node] _node
 *     def getId(self):
 *         h = InfoHash()             # <<<<<<<<<<<<<<
 *         h._infohash = self._node.get().getId()
 *         return h
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_InfoHash), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_h = ((struct __pyx_obj_7opendht_InfoHash *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":157
 *     def getId(self):
 *         h = InfoHash()
 *         h._infohash = self._node.get().getId()             # <<<<<<<<<<<<<<
 *         return h
 *     def getAddr(self):
 */
  __pyx_v_h->_infohash = __pyx_v_self->_node.get()->getId();

  /* "opendht.pyx":158
 *         h = InfoHash()
 *         h._infohash = self._node.get().getId()
 *         return h             # <<<<<<<<<<<<<<
 *     def getAddr(self):
 *         return self._node.get().getAddrStr()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  __pyx_r = ((PyObject *)__pyx_v_h);
  goto __pyx_L0;

  /* "opendht.pyx":155
 * cdef class Node(_WithID):
 *     cdef shared_ptr[cpp.Node] _node
 *     def getId(self):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = self._node.get().getId()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Node.getId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":159
 *         h._infohash = self._node.get().getId()
 *         return h
 *     def getAddr(self):             # <<<<<<<<<<<<<<
 *         return self._node.get().getAddrStr()
 *     def isExpired(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_4Node_3getAddr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_4Node_3getAddr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAddr (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_4Node_2getAddr(((struct __pyx_obj_7opendht_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_4Node_2getAddr(struct __pyx_obj_7opendht_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getAddr", 0);

  /* "opendht.pyx":160
 *         return h
 *     def getAddr(self):
 *         return self._node.get().getAddrStr()             # <<<<<<<<<<<<<<
 *     def isExpired(self):
 *         return self._node.get().isExpired()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->_node.get()->getAddrStr()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":159
 *         h._infohash = self._node.get().getId()
 *         return h
 *     def getAddr(self):             # <<<<<<<<<<<<<<
 *         return self._node.get().getAddrStr()
 *     def isExpired(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Node.getAddr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":161
 *     def getAddr(self):
 *         return self._node.get().getAddrStr()
 *     def isExpired(self):             # <<<<<<<<<<<<<<
 *         return self._node.get().isExpired()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_4Node_5isExpired(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_4Node_5isExpired(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isExpired (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_4Node_4isExpired(((struct __pyx_obj_7opendht_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_4Node_4isExpired(struct __pyx_obj_7opendht_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isExpired", 0);

  /* "opendht.pyx":162
 *         return self._node.get().getAddrStr()
 *     def isExpired(self):
 *         return self._node.get().isExpired()             # <<<<<<<<<<<<<<
 * 
 * cdef class NodeEntry(_WithID):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_node.get()->isExpired()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":161
 *     def getAddr(self):
 *         return self._node.get().getAddrStr()
 *     def isExpired(self):             # <<<<<<<<<<<<<<
 *         return self._node.get().isExpired()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Node.isExpired", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_4Node_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_4Node_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_4Node_6__reduce_cython__(((struct __pyx_obj_7opendht_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_4Node_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Node.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_4Node_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_4Node_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_4Node_8__setstate_cython__(((struct __pyx_obj_7opendht_Node *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_4Node_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Node *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Node.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":166
 * cdef class NodeEntry(_WithID):
 *     cdef cpp.pair[cpp.InfoHash, shared_ptr[cpp.Node]] _v
 *     def getId(self):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = self._v.first
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9NodeEntry_1getId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_9NodeEntry_1getId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getId (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9NodeEntry_getId(((struct __pyx_obj_7opendht_NodeEntry *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9NodeEntry_getId(struct __pyx_obj_7opendht_NodeEntry *__pyx_v_self) {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_h = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  dht::InfoHash __pyx_t_2;
  __Pyx_RefNannySetupContext("getId", 0);

  /* "opendht.pyx":167
 *     cdef cpp.pair[cpp.InfoHash, shared_ptr[cpp.Node]] _v
 *     def getId(self):
 *         h = InfoHash()             # <<<<<<<<<<<<<<
 *         h._infohash = self._v.first
 *         return h
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_InfoHash), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_h = ((struct __pyx_obj_7opendht_InfoHash *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":168
 *     def getId(self):
 *         h = InfoHash()
 *         h._infohash = self._v.first             # <<<<<<<<<<<<<<
 *         return h
 *     def getNode(self):
 */
  __pyx_t_2 = __pyx_v_self->_v.first;
  __pyx_v_h->_infohash = __pyx_t_2;

  /* "opendht.pyx":169
 *         h = InfoHash()
 *         h._infohash = self._v.first
 *         return h             # <<<<<<<<<<<<<<
 *     def getNode(self):
 *         n = Node()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  __pyx_r = ((PyObject *)__pyx_v_h);
  goto __pyx_L0;

  /* "opendht.pyx":166
 * cdef class NodeEntry(_WithID):
 *     cdef cpp.pair[cpp.InfoHash, shared_ptr[cpp.Node]] _v
 *     def getId(self):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = self._v.first
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.NodeEntry.getId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":170
 *         h._infohash = self._v.first
 *         return h
 *     def getNode(self):             # <<<<<<<<<<<<<<
 *         n = Node()
 *         n._node = self._v.second
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9NodeEntry_3getNode(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_9NodeEntry_3getNode(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNode (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9NodeEntry_2getNode(((struct __pyx_obj_7opendht_NodeEntry *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9NodeEntry_2getNode(struct __pyx_obj_7opendht_NodeEntry *__pyx_v_self) {
  struct __pyx_obj_7opendht_Node *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::shared_ptr<dht::Node>  __pyx_t_2;
  __Pyx_RefNannySetupContext("getNode", 0);

  /* "opendht.pyx":171
 *         return h
 *     def getNode(self):
 *         n = Node()             # <<<<<<<<<<<<<<
 *         n._node = self._v.second
 *         return n
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_Node), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_n = ((struct __pyx_obj_7opendht_Node *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":172
 *     def getNode(self):
 *         n = Node()
 *         n._node = self._v.second             # <<<<<<<<<<<<<<
 *         return n
 * 
 */
  __pyx_t_2 = __pyx_v_self->_v.second;
  __pyx_v_n->_node = __pyx_t_2;

  /* "opendht.pyx":173
 *         n = Node()
 *         n._node = self._v.second
 *         return n             # <<<<<<<<<<<<<<
 * 
 * cdef class Query(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_n));
  __pyx_r = ((PyObject *)__pyx_v_n);
  goto __pyx_L0;

  /* "opendht.pyx":170
 *         h._infohash = self._v.first
 *         return h
 *     def getNode(self):             # <<<<<<<<<<<<<<
 *         n = Node()
 *         n._node = self._v.second
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.NodeEntry.getNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._v cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9NodeEntry_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_9NodeEntry_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9NodeEntry_4__reduce_cython__(((struct __pyx_obj_7opendht_NodeEntry *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9NodeEntry_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_NodeEntry *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._v cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._v cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._v cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.NodeEntry.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._v cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._v cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9NodeEntry_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_9NodeEntry_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9NodeEntry_6__setstate_cython__(((struct __pyx_obj_7opendht_NodeEntry *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9NodeEntry_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_NodeEntry *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._v cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._v cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._v cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._v cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.NodeEntry.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":177
 * cdef class Query(object):
 *     cdef cpp.Query _query
 *     def __cinit__(self, str q_str=''):             # <<<<<<<<<<<<<<
 *         self._query = cpp.Query(q_str.encode())
 *     def __str__(self):
 */

/* Python wrapper */
static int __pyx_pw_7opendht_5Query_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opendht_5Query_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_q_str = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_q_str,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)__pyx_kp_u_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_str);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 177, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_q_str = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 177, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Query.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_str), (&PyUnicode_Type), 1, "q_str", 1))) __PYX_ERR(0, 177, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_5Query___cinit__(((struct __pyx_obj_7opendht_Query *)__pyx_v_self), __pyx_v_q_str);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_5Query___cinit__(struct __pyx_obj_7opendht_Query *__pyx_v_self, PyObject *__pyx_v_q_str) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  dht::Query __pyx_t_3;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "opendht.pyx":178
 *     cdef cpp.Query _query
 *     def __cinit__(self, str q_str=''):
 *         self._query = cpp.Query(q_str.encode())             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         return self._query.toString().decode()
 */
  if (unlikely(__pyx_v_q_str == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "encode");
    __PYX_ERR(0, 178, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsEncodedString(__pyx_v_q_str, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_3 = dht::Query(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 178, __pyx_L1_error)
  }
  __pyx_v_self->_query = __pyx_t_3;

  /* "opendht.pyx":177
 * cdef class Query(object):
 *     cdef cpp.Query _query
 *     def __cinit__(self, str q_str=''):             # <<<<<<<<<<<<<<
 *         self._query = cpp.Query(q_str.encode())
 *     def __str__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Query.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":179
 *     def __cinit__(self, str q_str=''):
 *         self._query = cpp.Query(q_str.encode())
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self._query.toString().decode()
 *     def buildFrom(self, Select s, Where w):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Query_3__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_5Query_3__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_5Query_2__str__(((struct __pyx_obj_7opendht_Query *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Query_2__str__(struct __pyx_obj_7opendht_Query *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "opendht.pyx":180
 *         self._query = cpp.Query(q_str.encode())
 *     def __str__(self):
 *         return self._query.toString().decode()             # <<<<<<<<<<<<<<
 *     def buildFrom(self, Select s, Where w):
 *         self._query = cpp.Query(s._select, w._where)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->_query.toString(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":179
 *     def __cinit__(self, str q_str=''):
 *         self._query = cpp.Query(q_str.encode())
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self._query.toString().decode()
 *     def buildFrom(self, Select s, Where w):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Query.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":181
 *     def __str__(self):
 *         return self._query.toString().decode()
 *     def buildFrom(self, Select s, Where w):             # <<<<<<<<<<<<<<
 *         self._query = cpp.Query(s._select, w._where)
 *     def isSatisfiedBy(self, Query q):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Query_5buildFrom(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opendht_5Query_5buildFrom(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opendht_Select *__pyx_v_s = 0;
  struct __pyx_obj_7opendht_Where *__pyx_v_w = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("buildFrom (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,&__pyx_n_s_w,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("buildFrom", 1, 2, 2, 1); __PYX_ERR(0, 181, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "buildFrom") < 0)) __PYX_ERR(0, 181, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_s = ((struct __pyx_obj_7opendht_Select *)values[0]);
    __pyx_v_w = ((struct __pyx_obj_7opendht_Where *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("buildFrom", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 181, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Query.buildFrom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s), __pyx_ptype_7opendht_Select, 1, "s", 0))) __PYX_ERR(0, 181, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w), __pyx_ptype_7opendht_Where, 1, "w", 0))) __PYX_ERR(0, 181, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_5Query_4buildFrom(((struct __pyx_obj_7opendht_Query *)__pyx_v_self), __pyx_v_s, __pyx_v_w);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Query_4buildFrom(struct __pyx_obj_7opendht_Query *__pyx_v_self, struct __pyx_obj_7opendht_Select *__pyx_v_s, struct __pyx_obj_7opendht_Where *__pyx_v_w) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  dht::Query __pyx_t_1;
  __Pyx_RefNannySetupContext("buildFrom", 0);

  /* "opendht.pyx":182
 *         return self._query.toString().decode()
 *     def buildFrom(self, Select s, Where w):
 *         self._query = cpp.Query(s._select, w._where)             # <<<<<<<<<<<<<<
 *     def isSatisfiedBy(self, Query q):
 *         return self._query.isSatisfiedBy(q._query)
 */
  try {
    __pyx_t_1 = dht::Query(__pyx_v_s->_select, __pyx_v_w->_where);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 182, __pyx_L1_error)
  }
  __pyx_v_self->_query = __pyx_t_1;

  /* "opendht.pyx":181
 *     def __str__(self):
 *         return self._query.toString().decode()
 *     def buildFrom(self, Select s, Where w):             # <<<<<<<<<<<<<<
 *         self._query = cpp.Query(s._select, w._where)
 *     def isSatisfiedBy(self, Query q):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("opendht.Query.buildFrom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":183
 *     def buildFrom(self, Select s, Where w):
 *         self._query = cpp.Query(s._select, w._where)
 *     def isSatisfiedBy(self, Query q):             # <<<<<<<<<<<<<<
 *         return self._query.isSatisfiedBy(q._query)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Query_7isSatisfiedBy(PyObject *__pyx_v_self, PyObject *__pyx_v_q); /*proto*/
static PyObject *__pyx_pw_7opendht_5Query_7isSatisfiedBy(PyObject *__pyx_v_self, PyObject *__pyx_v_q) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isSatisfiedBy (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q), __pyx_ptype_7opendht_Query, 1, "q", 0))) __PYX_ERR(0, 183, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_5Query_6isSatisfiedBy(((struct __pyx_obj_7opendht_Query *)__pyx_v_self), ((struct __pyx_obj_7opendht_Query *)__pyx_v_q));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Query_6isSatisfiedBy(struct __pyx_obj_7opendht_Query *__pyx_v_self, struct __pyx_obj_7opendht_Query *__pyx_v_q) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isSatisfiedBy", 0);

  /* "opendht.pyx":184
 *         self._query = cpp.Query(s._select, w._where)
 *     def isSatisfiedBy(self, Query q):
 *         return self._query.isSatisfiedBy(q._query)             # <<<<<<<<<<<<<<
 * 
 * cdef class Select(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_query.isSatisfiedBy(__pyx_v_q->_query)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":183
 *     def buildFrom(self, Select s, Where w):
 *         self._query = cpp.Query(s._select, w._where)
 *     def isSatisfiedBy(self, Query q):             # <<<<<<<<<<<<<<
 *         return self._query.isSatisfiedBy(q._query)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Query.isSatisfiedBy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Query_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_5Query_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_5Query_8__reduce_cython__(((struct __pyx_obj_7opendht_Query *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Query_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Query *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Query.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Query_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_5Query_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_5Query_10__setstate_cython__(((struct __pyx_obj_7opendht_Query *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Query_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Query *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Query.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":188
 * cdef class Select(object):
 *     cdef cpp.Select _select
 *     def __cinit__(self, str q_str=None):             # <<<<<<<<<<<<<<
 *         if q_str:
 *             self._select = cpp.Select(q_str.encode())
 */

/* Python wrapper */
static int __pyx_pw_7opendht_6Select_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opendht_6Select_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_q_str = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_q_str,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_str);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 188, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_q_str = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 188, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Select.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_str), (&PyUnicode_Type), 1, "q_str", 1))) __PYX_ERR(0, 188, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_6Select___cinit__(((struct __pyx_obj_7opendht_Select *)__pyx_v_self), __pyx_v_q_str);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_6Select___cinit__(struct __pyx_obj_7opendht_Select *__pyx_v_self, PyObject *__pyx_v_q_str) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  dht::Select __pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "opendht.pyx":189
 *     cdef cpp.Select _select
 *     def __cinit__(self, str q_str=None):
 *         if q_str:             # <<<<<<<<<<<<<<
 *             self._select = cpp.Select(q_str.encode())
 *         else:
 */
  __pyx_t_1 = (__pyx_v_q_str != Py_None) && (__Pyx_PyUnicode_IS_TRUE(__pyx_v_q_str) != 0);
  if (__pyx_t_1) {

    /* "opendht.pyx":190
 *     def __cinit__(self, str q_str=None):
 *         if q_str:
 *             self._select = cpp.Select(q_str.encode())             # <<<<<<<<<<<<<<
 *         else:
 *             self._select = cpp.Select()
 */
    if (unlikely(__pyx_v_q_str == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "encode");
      __PYX_ERR(0, 190, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsEncodedString(__pyx_v_q_str, NULL, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    try {
      __pyx_t_4 = dht::Select(__pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 190, __pyx_L1_error)
    }
    __pyx_v_self->_select = __pyx_t_4;

    /* "opendht.pyx":189
 *     cdef cpp.Select _select
 *     def __cinit__(self, str q_str=None):
 *         if q_str:             # <<<<<<<<<<<<<<
 *             self._select = cpp.Select(q_str.encode())
 *         else:
 */
    goto __pyx_L3;
  }

  /* "opendht.pyx":192
 *             self._select = cpp.Select(q_str.encode())
 *         else:
 *             self._select = cpp.Select()             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         return self._select.toString().decode()
 */
  /*else*/ {
    try {
      __pyx_t_4 = dht::Select();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 192, __pyx_L1_error)
    }
    __pyx_v_self->_select = __pyx_t_4;
  }
  __pyx_L3:;

  /* "opendht.pyx":188
 * cdef class Select(object):
 *     cdef cpp.Select _select
 *     def __cinit__(self, str q_str=None):             # <<<<<<<<<<<<<<
 *         if q_str:
 *             self._select = cpp.Select(q_str.encode())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opendht.Select.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":193
 *         else:
 *             self._select = cpp.Select()
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self._select.toString().decode()
 *     def isSatisfiedBy(self, Select os):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_6Select_3__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_6Select_3__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_6Select_2__str__(((struct __pyx_obj_7opendht_Select *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_6Select_2__str__(struct __pyx_obj_7opendht_Select *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "opendht.pyx":194
 *             self._select = cpp.Select()
 *     def __str__(self):
 *         return self._select.toString().decode()             # <<<<<<<<<<<<<<
 *     def isSatisfiedBy(self, Select os):
 *         return self._select.isSatisfiedBy(os._select)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->_select.toString(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":193
 *         else:
 *             self._select = cpp.Select()
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self._select.toString().decode()
 *     def isSatisfiedBy(self, Select os):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Select.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":195
 *     def __str__(self):
 *         return self._select.toString().decode()
 *     def isSatisfiedBy(self, Select os):             # <<<<<<<<<<<<<<
 *         return self._select.isSatisfiedBy(os._select)
 *     def field(self, int field):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_6Select_5isSatisfiedBy(PyObject *__pyx_v_self, PyObject *__pyx_v_os); /*proto*/
static PyObject *__pyx_pw_7opendht_6Select_5isSatisfiedBy(PyObject *__pyx_v_self, PyObject *__pyx_v_os) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isSatisfiedBy (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_os), __pyx_ptype_7opendht_Select, 1, "os", 0))) __PYX_ERR(0, 195, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_6Select_4isSatisfiedBy(((struct __pyx_obj_7opendht_Select *)__pyx_v_self), ((struct __pyx_obj_7opendht_Select *)__pyx_v_os));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_6Select_4isSatisfiedBy(struct __pyx_obj_7opendht_Select *__pyx_v_self, struct __pyx_obj_7opendht_Select *__pyx_v_os) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isSatisfiedBy", 0);

  /* "opendht.pyx":196
 *         return self._select.toString().decode()
 *     def isSatisfiedBy(self, Select os):
 *         return self._select.isSatisfiedBy(os._select)             # <<<<<<<<<<<<<<
 *     def field(self, int field):
 *         self._select.field(<cpp.Field> field)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_select.isSatisfiedBy(__pyx_v_os->_select)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":195
 *     def __str__(self):
 *         return self._select.toString().decode()
 *     def isSatisfiedBy(self, Select os):             # <<<<<<<<<<<<<<
 *         return self._select.isSatisfiedBy(os._select)
 *     def field(self, int field):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Select.isSatisfiedBy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":197
 *     def isSatisfiedBy(self, Select os):
 *         return self._select.isSatisfiedBy(os._select)
 *     def field(self, int field):             # <<<<<<<<<<<<<<
 *         self._select.field(<cpp.Field> field)
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_6Select_7field(PyObject *__pyx_v_self, PyObject *__pyx_arg_field); /*proto*/
static PyObject *__pyx_pw_7opendht_6Select_7field(PyObject *__pyx_v_self, PyObject *__pyx_arg_field) {
  int __pyx_v_field;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("field (wrapper)", 0);
  assert(__pyx_arg_field); {
    __pyx_v_field = __Pyx_PyInt_As_int(__pyx_arg_field); if (unlikely((__pyx_v_field == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 197, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Select.field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_6Select_6field(((struct __pyx_obj_7opendht_Select *)__pyx_v_self), ((int)__pyx_v_field));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_6Select_6field(struct __pyx_obj_7opendht_Select *__pyx_v_self, int __pyx_v_field) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("field", 0);

  /* "opendht.pyx":198
 *         return self._select.isSatisfiedBy(os._select)
 *     def field(self, int field):
 *         self._select.field(<cpp.Field> field)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->_select.field(((dht::Value::Field)__pyx_v_field));

  /* "opendht.pyx":199
 *     def field(self, int field):
 *         self._select.field(<cpp.Field> field)
 *         return self             # <<<<<<<<<<<<<<
 * 
 * cdef class Where(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "opendht.pyx":197
 *     def isSatisfiedBy(self, Select os):
 *         return self._select.isSatisfiedBy(os._select)
 *     def field(self, int field):             # <<<<<<<<<<<<<<
 *         self._select.field(<cpp.Field> field)
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_6Select_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_6Select_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_6Select_8__reduce_cython__(((struct __pyx_obj_7opendht_Select *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_6Select_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Select *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Select.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_6Select_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_6Select_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_6Select_10__setstate_cython__(((struct __pyx_obj_7opendht_Select *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_6Select_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Select *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Select.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":203
 * cdef class Where(object):
 *     cdef cpp.Where _where
 *     def __cinit__(self, str q_str=None):             # <<<<<<<<<<<<<<
 *         if q_str:
 *             self._where = cpp.Where(q_str.encode())
 */

/* Python wrapper */
static int __pyx_pw_7opendht_5Where_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opendht_5Where_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_q_str = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_q_str,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q_str);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 203, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_q_str = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 203, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Where.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q_str), (&PyUnicode_Type), 1, "q_str", 1))) __PYX_ERR(0, 203, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_5Where___cinit__(((struct __pyx_obj_7opendht_Where *)__pyx_v_self), __pyx_v_q_str);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_5Where___cinit__(struct __pyx_obj_7opendht_Where *__pyx_v_self, PyObject *__pyx_v_q_str) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  dht::Where __pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "opendht.pyx":204
 *     cdef cpp.Where _where
 *     def __cinit__(self, str q_str=None):
 *         if q_str:             # <<<<<<<<<<<<<<
 *             self._where = cpp.Where(q_str.encode())
 *         else:
 */
  __pyx_t_1 = (__pyx_v_q_str != Py_None) && (__Pyx_PyUnicode_IS_TRUE(__pyx_v_q_str) != 0);
  if (__pyx_t_1) {

    /* "opendht.pyx":205
 *     def __cinit__(self, str q_str=None):
 *         if q_str:
 *             self._where = cpp.Where(q_str.encode())             # <<<<<<<<<<<<<<
 *         else:
 *             self._where = cpp.Where()
 */
    if (unlikely(__pyx_v_q_str == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "encode");
      __PYX_ERR(0, 205, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsEncodedString(__pyx_v_q_str, NULL, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->_where = dht::Where(__pyx_t_3);

    /* "opendht.pyx":204
 *     cdef cpp.Where _where
 *     def __cinit__(self, str q_str=None):
 *         if q_str:             # <<<<<<<<<<<<<<
 *             self._where = cpp.Where(q_str.encode())
 *         else:
 */
    goto __pyx_L3;
  }

  /* "opendht.pyx":207
 *             self._where = cpp.Where(q_str.encode())
 *         else:
 *             self._where = cpp.Where()             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         return self._where.toString().decode()
 */
  /*else*/ {
    try {
      __pyx_t_4 = dht::Where();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 207, __pyx_L1_error)
    }
    __pyx_v_self->_where = __pyx_t_4;
  }
  __pyx_L3:;

  /* "opendht.pyx":203
 * cdef class Where(object):
 *     cdef cpp.Where _where
 *     def __cinit__(self, str q_str=None):             # <<<<<<<<<<<<<<
 *         if q_str:
 *             self._where = cpp.Where(q_str.encode())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opendht.Where.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":208
 *         else:
 *             self._where = cpp.Where()
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self._where.toString().decode()
 *     def isSatisfiedBy(self, Where where):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Where_3__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_5Where_3__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_5Where_2__str__(((struct __pyx_obj_7opendht_Where *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Where_2__str__(struct __pyx_obj_7opendht_Where *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "opendht.pyx":209
 *             self._where = cpp.Where()
 *     def __str__(self):
 *         return self._where.toString().decode()             # <<<<<<<<<<<<<<
 *     def isSatisfiedBy(self, Where where):
 *         return self._where.isSatisfiedBy(where._where)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->_where.toString(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":208
 *         else:
 *             self._where = cpp.Where()
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self._where.toString().decode()
 *     def isSatisfiedBy(self, Where where):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Where.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":210
 *     def __str__(self):
 *         return self._where.toString().decode()
 *     def isSatisfiedBy(self, Where where):             # <<<<<<<<<<<<<<
 *         return self._where.isSatisfiedBy(where._where)
 *     def id(self, cpp.uint64_t id):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Where_5isSatisfiedBy(PyObject *__pyx_v_self, PyObject *__pyx_v_where); /*proto*/
static PyObject *__pyx_pw_7opendht_5Where_5isSatisfiedBy(PyObject *__pyx_v_self, PyObject *__pyx_v_where) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isSatisfiedBy (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_where), __pyx_ptype_7opendht_Where, 1, "where", 0))) __PYX_ERR(0, 210, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_5Where_4isSatisfiedBy(((struct __pyx_obj_7opendht_Where *)__pyx_v_self), ((struct __pyx_obj_7opendht_Where *)__pyx_v_where));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Where_4isSatisfiedBy(struct __pyx_obj_7opendht_Where *__pyx_v_self, struct __pyx_obj_7opendht_Where *__pyx_v_where) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isSatisfiedBy", 0);

  /* "opendht.pyx":211
 *         return self._where.toString().decode()
 *     def isSatisfiedBy(self, Where where):
 *         return self._where.isSatisfiedBy(where._where)             # <<<<<<<<<<<<<<
 *     def id(self, cpp.uint64_t id):
 *         self._where.id(id)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_where.isSatisfiedBy(__pyx_v_where->_where)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":210
 *     def __str__(self):
 *         return self._where.toString().decode()
 *     def isSatisfiedBy(self, Where where):             # <<<<<<<<<<<<<<
 *         return self._where.isSatisfiedBy(where._where)
 *     def id(self, cpp.uint64_t id):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Where.isSatisfiedBy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":212
 *     def isSatisfiedBy(self, Where where):
 *         return self._where.isSatisfiedBy(where._where)
 *     def id(self, cpp.uint64_t id):             # <<<<<<<<<<<<<<
 *         self._where.id(id)
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Where_7id(PyObject *__pyx_v_self, PyObject *__pyx_arg_id); /*proto*/
static PyObject *__pyx_pw_7opendht_5Where_7id(PyObject *__pyx_v_self, PyObject *__pyx_arg_id) {
  uint64_t __pyx_v_id;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("id (wrapper)", 0);
  assert(__pyx_arg_id); {
    __pyx_v_id = __Pyx_PyInt_As_uint64_t(__pyx_arg_id); if (unlikely((__pyx_v_id == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 212, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Where.id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_5Where_6id(((struct __pyx_obj_7opendht_Where *)__pyx_v_self), ((uint64_t)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Where_6id(struct __pyx_obj_7opendht_Where *__pyx_v_self, uint64_t __pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("id", 0);

  /* "opendht.pyx":213
 *         return self._where.isSatisfiedBy(where._where)
 *     def id(self, cpp.uint64_t id):
 *         self._where.id(id)             # <<<<<<<<<<<<<<
 *         return self
 *     def valueType(self, cpp.uint16_t type):
 */
  __pyx_v_self->_where.id(__pyx_v_id);

  /* "opendht.pyx":214
 *     def id(self, cpp.uint64_t id):
 *         self._where.id(id)
 *         return self             # <<<<<<<<<<<<<<
 *     def valueType(self, cpp.uint16_t type):
 *         self._where.valueType(type)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "opendht.pyx":212
 *     def isSatisfiedBy(self, Where where):
 *         return self._where.isSatisfiedBy(where._where)
 *     def id(self, cpp.uint64_t id):             # <<<<<<<<<<<<<<
 *         self._where.id(id)
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":215
 *         self._where.id(id)
 *         return self
 *     def valueType(self, cpp.uint16_t type):             # <<<<<<<<<<<<<<
 *         self._where.valueType(type)
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Where_9valueType(PyObject *__pyx_v_self, PyObject *__pyx_arg_type); /*proto*/
static PyObject *__pyx_pw_7opendht_5Where_9valueType(PyObject *__pyx_v_self, PyObject *__pyx_arg_type) {
  uint16_t __pyx_v_type;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valueType (wrapper)", 0);
  assert(__pyx_arg_type); {
    __pyx_v_type = __Pyx_PyInt_As_uint16_t(__pyx_arg_type); if (unlikely((__pyx_v_type == ((uint16_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 215, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Where.valueType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_5Where_8valueType(((struct __pyx_obj_7opendht_Where *)__pyx_v_self), ((uint16_t)__pyx_v_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Where_8valueType(struct __pyx_obj_7opendht_Where *__pyx_v_self, uint16_t __pyx_v_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valueType", 0);

  /* "opendht.pyx":216
 *         return self
 *     def valueType(self, cpp.uint16_t type):
 *         self._where.valueType(type)             # <<<<<<<<<<<<<<
 *         return self
 *     def owner(self, InfoHash owner_pk_hash):
 */
  __pyx_v_self->_where.valueType(__pyx_v_type);

  /* "opendht.pyx":217
 *     def valueType(self, cpp.uint16_t type):
 *         self._where.valueType(type)
 *         return self             # <<<<<<<<<<<<<<
 *     def owner(self, InfoHash owner_pk_hash):
 *         self._where.owner(owner_pk_hash._infohash)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "opendht.pyx":215
 *         self._where.id(id)
 *         return self
 *     def valueType(self, cpp.uint16_t type):             # <<<<<<<<<<<<<<
 *         self._where.valueType(type)
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":218
 *         self._where.valueType(type)
 *         return self
 *     def owner(self, InfoHash owner_pk_hash):             # <<<<<<<<<<<<<<
 *         self._where.owner(owner_pk_hash._infohash)
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Where_11owner(PyObject *__pyx_v_self, PyObject *__pyx_v_owner_pk_hash); /*proto*/
static PyObject *__pyx_pw_7opendht_5Where_11owner(PyObject *__pyx_v_self, PyObject *__pyx_v_owner_pk_hash) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("owner (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_owner_pk_hash), __pyx_ptype_7opendht_InfoHash, 1, "owner_pk_hash", 0))) __PYX_ERR(0, 218, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_5Where_10owner(((struct __pyx_obj_7opendht_Where *)__pyx_v_self), ((struct __pyx_obj_7opendht_InfoHash *)__pyx_v_owner_pk_hash));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Where_10owner(struct __pyx_obj_7opendht_Where *__pyx_v_self, struct __pyx_obj_7opendht_InfoHash *__pyx_v_owner_pk_hash) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("owner", 0);

  /* "opendht.pyx":219
 *         return self
 *     def owner(self, InfoHash owner_pk_hash):
 *         self._where.owner(owner_pk_hash._infohash)             # <<<<<<<<<<<<<<
 *         return self
 *     def seq(self, cpp.uint16_t seq_no):
 */
  __pyx_v_self->_where.owner(__pyx_v_owner_pk_hash->_infohash);

  /* "opendht.pyx":220
 *     def owner(self, InfoHash owner_pk_hash):
 *         self._where.owner(owner_pk_hash._infohash)
 *         return self             # <<<<<<<<<<<<<<
 *     def seq(self, cpp.uint16_t seq_no):
 *         self._where.seq(seq_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "opendht.pyx":218
 *         self._where.valueType(type)
 *         return self
 *     def owner(self, InfoHash owner_pk_hash):             # <<<<<<<<<<<<<<
 *         self._where.owner(owner_pk_hash._infohash)
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":221
 *         self._where.owner(owner_pk_hash._infohash)
 *         return self
 *     def seq(self, cpp.uint16_t seq_no):             # <<<<<<<<<<<<<<
 *         self._where.seq(seq_no)
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Where_13seq(PyObject *__pyx_v_self, PyObject *__pyx_arg_seq_no); /*proto*/
static PyObject *__pyx_pw_7opendht_5Where_13seq(PyObject *__pyx_v_self, PyObject *__pyx_arg_seq_no) {
  uint16_t __pyx_v_seq_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seq (wrapper)", 0);
  assert(__pyx_arg_seq_no); {
    __pyx_v_seq_no = __Pyx_PyInt_As_uint16_t(__pyx_arg_seq_no); if (unlikely((__pyx_v_seq_no == ((uint16_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 221, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Where.seq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_5Where_12seq(((struct __pyx_obj_7opendht_Where *)__pyx_v_self), ((uint16_t)__pyx_v_seq_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Where_12seq(struct __pyx_obj_7opendht_Where *__pyx_v_self, uint16_t __pyx_v_seq_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seq", 0);

  /* "opendht.pyx":222
 *         return self
 *     def seq(self, cpp.uint16_t seq_no):
 *         self._where.seq(seq_no)             # <<<<<<<<<<<<<<
 *         return self
 *     def userType(self, str user_type):
 */
  __pyx_v_self->_where.seq(__pyx_v_seq_no);

  /* "opendht.pyx":223
 *     def seq(self, cpp.uint16_t seq_no):
 *         self._where.seq(seq_no)
 *         return self             # <<<<<<<<<<<<<<
 *     def userType(self, str user_type):
 *         self._where.userType(user_type.encode())
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "opendht.pyx":221
 *         self._where.owner(owner_pk_hash._infohash)
 *         return self
 *     def seq(self, cpp.uint16_t seq_no):             # <<<<<<<<<<<<<<
 *         self._where.seq(seq_no)
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":224
 *         self._where.seq(seq_no)
 *         return self
 *     def userType(self, str user_type):             # <<<<<<<<<<<<<<
 *         self._where.userType(user_type.encode())
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Where_15userType(PyObject *__pyx_v_self, PyObject *__pyx_v_user_type); /*proto*/
static PyObject *__pyx_pw_7opendht_5Where_15userType(PyObject *__pyx_v_self, PyObject *__pyx_v_user_type) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("userType (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_user_type), (&PyUnicode_Type), 1, "user_type", 1))) __PYX_ERR(0, 224, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_5Where_14userType(((struct __pyx_obj_7opendht_Where *)__pyx_v_self), ((PyObject*)__pyx_v_user_type));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Where_14userType(struct __pyx_obj_7opendht_Where *__pyx_v_self, PyObject *__pyx_v_user_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  __Pyx_RefNannySetupContext("userType", 0);

  /* "opendht.pyx":225
 *         return self
 *     def userType(self, str user_type):
 *         self._where.userType(user_type.encode())             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  if (unlikely(__pyx_v_user_type == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "encode");
    __PYX_ERR(0, 225, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsEncodedString(__pyx_v_user_type, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_where.userType(__pyx_t_2);

  /* "opendht.pyx":226
 *     def userType(self, str user_type):
 *         self._where.userType(user_type.encode())
 *         return self             # <<<<<<<<<<<<<<
 * 
 * cdef class Value(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "opendht.pyx":224
 *         self._where.seq(seq_no)
 *         return self
 *     def userType(self, str user_type):             # <<<<<<<<<<<<<<
 *         self._where.userType(user_type.encode())
 *         return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Where.userType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Where_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_5Where_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_5Where_16__reduce_cython__(((struct __pyx_obj_7opendht_Where *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Where_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Where *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Where.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Where_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_5Where_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_5Where_18__setstate_cython__(((struct __pyx_obj_7opendht_Where *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Where_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Where *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Where.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":230
 * cdef class Value(object):
 *     cdef shared_ptr[cpp.Value] _value
 *     def __init__(self, bytes val=b''):             # <<<<<<<<<<<<<<
 *         self._value.reset(new cpp.Value(val, len(val)))
 *     def __str__(self):
 */

/* Python wrapper */
static int __pyx_pw_7opendht_5Value_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opendht_5Value_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_val = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)__pyx_kp_b_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 230, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_val = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 230, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Value.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_val), (&PyBytes_Type), 1, "val", 1))) __PYX_ERR(0, 230, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_5Value___init__(((struct __pyx_obj_7opendht_Value *)__pyx_v_self), __pyx_v_val);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_5Value___init__(struct __pyx_obj_7opendht_Value *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint8_t const *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  dht::Value *__pyx_t_3;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "opendht.pyx":231
 *     cdef shared_ptr[cpp.Value] _value
 *     def __init__(self, bytes val=b''):
 *         self._value.reset(new cpp.Value(val, len(val)))             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         return self._value.get().toString().decode()
 */
  __pyx_t_1 = __Pyx_PyObject_AsUString(__pyx_v_val); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  if (unlikely(__pyx_v_val == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 231, __pyx_L1_error)
  }
  __pyx_t_2 = PyBytes_GET_SIZE(__pyx_v_val); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 231, __pyx_L1_error)
  try {
    __pyx_t_3 = new dht::Value(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 231, __pyx_L1_error)
  }
  __pyx_v_self->_value.reset(__pyx_t_3);

  /* "opendht.pyx":230
 * cdef class Value(object):
 *     cdef shared_ptr[cpp.Value] _value
 *     def __init__(self, bytes val=b''):             # <<<<<<<<<<<<<<
 *         self._value.reset(new cpp.Value(val, len(val)))
 *     def __str__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("opendht.Value.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":232
 *     def __init__(self, bytes val=b''):
 *         self._value.reset(new cpp.Value(val, len(val)))
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self._value.get().toString().decode()
 *     property owner:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Value_3__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_5Value_3__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_5Value_2__str__(((struct __pyx_obj_7opendht_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Value_2__str__(struct __pyx_obj_7opendht_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "opendht.pyx":233
 *         self._value.reset(new cpp.Value(val, len(val)))
 *     def __str__(self):
 *         return self._value.get().toString().decode()             # <<<<<<<<<<<<<<
 *     property owner:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->_value.get()->toString(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":232
 *     def __init__(self, bytes val=b''):
 *         self._value.reset(new cpp.Value(val, len(val)))
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self._value.get().toString().decode()
 *     property owner:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Value.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":235
 *         return self._value.get().toString().decode()
 *     property owner:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             h = InfoHash()
 *             h._infohash = self._value.get().owner.get().getId()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Value_5owner_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_5Value_5owner_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_5Value_5owner___get__(((struct __pyx_obj_7opendht_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Value_5owner___get__(struct __pyx_obj_7opendht_Value *__pyx_v_self) {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_h = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "opendht.pyx":236
 *     property owner:
 *         def __get__(self):
 *             h = InfoHash()             # <<<<<<<<<<<<<<
 *             h._infohash = self._value.get().owner.get().getId()
 *             return h
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_InfoHash), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_h = ((struct __pyx_obj_7opendht_InfoHash *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":237
 *         def __get__(self):
 *             h = InfoHash()
 *             h._infohash = self._value.get().owner.get().getId()             # <<<<<<<<<<<<<<
 *             return h
 *     property recipient:
 */
  __pyx_v_h->_infohash = __pyx_v_self->_value.get()->owner.get()->getId();

  /* "opendht.pyx":238
 *             h = InfoHash()
 *             h._infohash = self._value.get().owner.get().getId()
 *             return h             # <<<<<<<<<<<<<<
 *     property recipient:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  __pyx_r = ((PyObject *)__pyx_v_h);
  goto __pyx_L0;

  /* "opendht.pyx":235
 *         return self._value.get().toString().decode()
 *     property owner:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             h = InfoHash()
 *             h._infohash = self._value.get().owner.get().getId()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Value.owner.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":240
 *             return h
 *     property recipient:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             h = InfoHash()
 *             h._infohash = self._value.get().recipient
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Value_9recipient_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_5Value_9recipient_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_5Value_9recipient___get__(((struct __pyx_obj_7opendht_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Value_9recipient___get__(struct __pyx_obj_7opendht_Value *__pyx_v_self) {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_h = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  dht::InfoHash __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "opendht.pyx":241
 *     property recipient:
 *         def __get__(self):
 *             h = InfoHash()             # <<<<<<<<<<<<<<
 *             h._infohash = self._value.get().recipient
 *             return h
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_InfoHash), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_h = ((struct __pyx_obj_7opendht_InfoHash *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":242
 *         def __get__(self):
 *             h = InfoHash()
 *             h._infohash = self._value.get().recipient             # <<<<<<<<<<<<<<
 *             return h
 *         def __set__(self, InfoHash h):
 */
  __pyx_t_2 = __pyx_v_self->_value.get()->recipient;
  __pyx_v_h->_infohash = __pyx_t_2;

  /* "opendht.pyx":243
 *             h = InfoHash()
 *             h._infohash = self._value.get().recipient
 *             return h             # <<<<<<<<<<<<<<
 *         def __set__(self, InfoHash h):
 *             self._value.get().recipient = h._infohash
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  __pyx_r = ((PyObject *)__pyx_v_h);
  goto __pyx_L0;

  /* "opendht.pyx":240
 *             return h
 *     property recipient:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             h = InfoHash()
 *             h._infohash = self._value.get().recipient
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Value.recipient.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":244
 *             h._infohash = self._value.get().recipient
 *             return h
 *         def __set__(self, InfoHash h):             # <<<<<<<<<<<<<<
 *             self._value.get().recipient = h._infohash
 *     property data:
 */

/* Python wrapper */
static int __pyx_pw_7opendht_5Value_9recipient_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_h); /*proto*/
static int __pyx_pw_7opendht_5Value_9recipient_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_h) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_h), __pyx_ptype_7opendht_InfoHash, 1, "h", 0))) __PYX_ERR(0, 244, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_5Value_9recipient_2__set__(((struct __pyx_obj_7opendht_Value *)__pyx_v_self), ((struct __pyx_obj_7opendht_InfoHash *)__pyx_v_h));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_5Value_9recipient_2__set__(struct __pyx_obj_7opendht_Value *__pyx_v_self, struct __pyx_obj_7opendht_InfoHash *__pyx_v_h) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  dht::InfoHash __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "opendht.pyx":245
 *             return h
 *         def __set__(self, InfoHash h):
 *             self._value.get().recipient = h._infohash             # <<<<<<<<<<<<<<
 *     property data:
 *         def __get__(self):
 */
  __pyx_t_1 = __pyx_v_h->_infohash;
  __pyx_v_self->_value.get()->recipient = __pyx_t_1;

  /* "opendht.pyx":244
 *             h._infohash = self._value.get().recipient
 *             return h
 *         def __set__(self, InfoHash h):             # <<<<<<<<<<<<<<
 *             self._value.get().recipient = h._infohash
 *     property data:
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":247
 *             self._value.get().recipient = h._infohash
 *     property data:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return string(<char*>self._value.get().data.data(), self._value.get().data.size())
 *         def __set__(self, bytes value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Value_4data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_5Value_4data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_5Value_4data___get__(((struct __pyx_obj_7opendht_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Value_4data___get__(struct __pyx_obj_7opendht_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "opendht.pyx":248
 *     property data:
 *         def __get__(self):
 *             return string(<char*>self._value.get().data.data(), self._value.get().data.size())             # <<<<<<<<<<<<<<
 *         def __set__(self, bytes value):
 *             self._value.get().data = value
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = std::string(((char *)__pyx_v_self->_value.get()->data.data()), __pyx_v_self->_value.get()->data.size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 248, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":247
 *             self._value.get().recipient = h._infohash
 *     property data:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return string(<char*>self._value.get().data.data(), self._value.get().data.size())
 *         def __set__(self, bytes value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opendht.Value.data.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":249
 *         def __get__(self):
 *             return string(<char*>self._value.get().data.data(), self._value.get().data.size())
 *         def __set__(self, bytes value):             # <<<<<<<<<<<<<<
 *             self._value.get().data = value
 *     property user_type:
 */

/* Python wrapper */
static int __pyx_pw_7opendht_5Value_4data_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7opendht_5Value_4data_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyBytes_Type), 1, "value", 1))) __PYX_ERR(0, 249, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_5Value_4data_2__set__(((struct __pyx_obj_7opendht_Value *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_5Value_4data_2__set__(struct __pyx_obj_7opendht_Value *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<uint8_t>  __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "opendht.pyx":250
 *             return string(<char*>self._value.get().data.data(), self._value.get().data.size())
 *         def __set__(self, bytes value):
 *             self._value.get().data = value             # <<<<<<<<<<<<<<
 *     property user_type:
 *         def __get__(self):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_uint8_t(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 250, __pyx_L1_error)
  __pyx_v_self->_value.get()->data = __pyx_t_1;

  /* "opendht.pyx":249
 *         def __get__(self):
 *             return string(<char*>self._value.get().data.data(), self._value.get().data.size())
 *         def __set__(self, bytes value):             # <<<<<<<<<<<<<<
 *             self._value.get().data = value
 *     property user_type:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("opendht.Value.data.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":252
 *             self._value.get().data = value
 *     property user_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._value.get().user_type.decode()
 *         def __set__(self, str t):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Value_9user_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_5Value_9user_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_5Value_9user_type___get__(((struct __pyx_obj_7opendht_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Value_9user_type___get__(struct __pyx_obj_7opendht_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "opendht.pyx":253
 *     property user_type:
 *         def __get__(self):
 *             return self._value.get().user_type.decode()             # <<<<<<<<<<<<<<
 *         def __set__(self, str t):
 *             self._value.get().user_type = t.encode()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->_value.get()->user_type, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":252
 *             self._value.get().data = value
 *     property user_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._value.get().user_type.decode()
 *         def __set__(self, str t):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Value.user_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":254
 *         def __get__(self):
 *             return self._value.get().user_type.decode()
 *         def __set__(self, str t):             # <<<<<<<<<<<<<<
 *             self._value.get().user_type = t.encode()
 *     property id:
 */

/* Python wrapper */
static int __pyx_pw_7opendht_5Value_9user_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_t); /*proto*/
static int __pyx_pw_7opendht_5Value_9user_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_t) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_t), (&PyUnicode_Type), 1, "t", 1))) __PYX_ERR(0, 254, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_5Value_9user_type_2__set__(((struct __pyx_obj_7opendht_Value *)__pyx_v_self), ((PyObject*)__pyx_v_t));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_5Value_9user_type_2__set__(struct __pyx_obj_7opendht_Value *__pyx_v_self, PyObject *__pyx_v_t) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "opendht.pyx":255
 *             return self._value.get().user_type.decode()
 *         def __set__(self, str t):
 *             self._value.get().user_type = t.encode()             # <<<<<<<<<<<<<<
 *     property id:
 *         def __get__(self):
 */
  if (unlikely(__pyx_v_t == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "encode");
    __PYX_ERR(0, 255, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsEncodedString(__pyx_v_t, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_value.get()->user_type = __pyx_t_2;

  /* "opendht.pyx":254
 *         def __get__(self):
 *             return self._value.get().user_type.decode()
 *         def __set__(self, str t):             # <<<<<<<<<<<<<<
 *             self._value.get().user_type = t.encode()
 *     property id:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Value.user_type.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":257
 *             self._value.get().user_type = t.encode()
 *     property id:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._value.get().id
 *         def __set__(self, cpp.uint64_t value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Value_2id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_5Value_2id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_5Value_2id___get__(((struct __pyx_obj_7opendht_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Value_2id___get__(struct __pyx_obj_7opendht_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "opendht.pyx":258
 *     property id:
 *         def __get__(self):
 *             return self._value.get().id             # <<<<<<<<<<<<<<
 *         def __set__(self, cpp.uint64_t value):
 *             self._value.get().id = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->_value.get()->id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":257
 *             self._value.get().user_type = t.encode()
 *     property id:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._value.get().id
 *         def __set__(self, cpp.uint64_t value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Value.id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":259
 *         def __get__(self):
 *             return self._value.get().id
 *         def __set__(self, cpp.uint64_t value):             # <<<<<<<<<<<<<<
 *             self._value.get().id = value
 *     property size:
 */

/* Python wrapper */
static int __pyx_pw_7opendht_5Value_2id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_7opendht_5Value_2id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  uint64_t __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_uint64_t(__pyx_arg_value); if (unlikely((__pyx_v_value == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 259, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Value.id.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_5Value_2id_2__set__(((struct __pyx_obj_7opendht_Value *)__pyx_v_self), ((uint64_t)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_5Value_2id_2__set__(struct __pyx_obj_7opendht_Value *__pyx_v_self, uint64_t __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "opendht.pyx":260
 *             return self._value.get().id
 *         def __set__(self, cpp.uint64_t value):
 *             self._value.get().id = value             # <<<<<<<<<<<<<<
 *     property size:
 *         def __get__(self):
 */
  __pyx_v_self->_value.get()->id = __pyx_v_value;

  /* "opendht.pyx":259
 *         def __get__(self):
 *             return self._value.get().id
 *         def __set__(self, cpp.uint64_t value):             # <<<<<<<<<<<<<<
 *             self._value.get().id = value
 *     property size:
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":262
 *             self._value.get().id = value
 *     property size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._value.get().size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Value_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_5Value_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_5Value_4size___get__(((struct __pyx_obj_7opendht_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Value_4size___get__(struct __pyx_obj_7opendht_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "opendht.pyx":263
 *     property size:
 *         def __get__(self):
 *             return self._value.get().size()             # <<<<<<<<<<<<<<
 * 
 * cdef class NodeSetIter(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_value.get()->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":262
 *             self._value.get().id = value
 *     property size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._value.get().size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Value.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Value_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_5Value_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_5Value_4__reduce_cython__(((struct __pyx_obj_7opendht_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Value_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Value.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_5Value_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_5Value_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_5Value_6__setstate_cython__(((struct __pyx_obj_7opendht_Value *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_5Value_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Value *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Value.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":268
 *     cdef map[cpp.InfoHash, shared_ptr[cpp.Node]]* _nodes
 *     cdef map[cpp.InfoHash, shared_ptr[cpp.Node]].iterator _curIter
 *     def __init__(self, NodeSet s):             # <<<<<<<<<<<<<<
 *         self._nodes = &s._nodes
 *         self._curIter = self._nodes.begin()
 */

/* Python wrapper */
static int __pyx_pw_7opendht_11NodeSetIter_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opendht_11NodeSetIter_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opendht_NodeSet *__pyx_v_s = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 268, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_s = ((struct __pyx_obj_7opendht_NodeSet *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 268, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.NodeSetIter.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s), __pyx_ptype_7opendht_NodeSet, 1, "s", 0))) __PYX_ERR(0, 268, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_11NodeSetIter___init__(((struct __pyx_obj_7opendht_NodeSetIter *)__pyx_v_self), __pyx_v_s);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_11NodeSetIter___init__(struct __pyx_obj_7opendht_NodeSetIter *__pyx_v_self, struct __pyx_obj_7opendht_NodeSet *__pyx_v_s) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "opendht.pyx":269
 *     cdef map[cpp.InfoHash, shared_ptr[cpp.Node]].iterator _curIter
 *     def __init__(self, NodeSet s):
 *         self._nodes = &s._nodes             # <<<<<<<<<<<<<<
 *         self._curIter = self._nodes.begin()
 *     def __next__(self):
 */
  __pyx_v_self->_nodes = (&__pyx_v_s->_nodes);

  /* "opendht.pyx":270
 *     def __init__(self, NodeSet s):
 *         self._nodes = &s._nodes
 *         self._curIter = self._nodes.begin()             # <<<<<<<<<<<<<<
 *     def __next__(self):
 *         if self._curIter == self._nodes.end():
 */
  __pyx_v_self->_curIter = __pyx_v_self->_nodes->begin();

  /* "opendht.pyx":268
 *     cdef map[cpp.InfoHash, shared_ptr[cpp.Node]]* _nodes
 *     cdef map[cpp.InfoHash, shared_ptr[cpp.Node]].iterator _curIter
 *     def __init__(self, NodeSet s):             # <<<<<<<<<<<<<<
 *         self._nodes = &s._nodes
 *         self._curIter = self._nodes.begin()
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":271
 *         self._nodes = &s._nodes
 *         self._curIter = self._nodes.begin()
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self._curIter == self._nodes.end():
 *             raise StopIteration
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_11NodeSetIter_3__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_11NodeSetIter_3__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_11NodeSetIter_2__next__(((struct __pyx_obj_7opendht_NodeSetIter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_11NodeSetIter_2__next__(struct __pyx_obj_7opendht_NodeSetIter *__pyx_v_self) {
  struct __pyx_obj_7opendht_NodeEntry *__pyx_v_h = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "opendht.pyx":272
 *         self._curIter = self._nodes.begin()
 *     def __next__(self):
 *         if self._curIter == self._nodes.end():             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         h = NodeEntry()
 */
  __pyx_t_1 = ((__pyx_v_self->_curIter == __pyx_v_self->_nodes->end()) != 0);
  if (__pyx_t_1) {

    /* "opendht.pyx":273
 *     def __next__(self):
 *         if self._curIter == self._nodes.end():
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         h = NodeEntry()
 *         h._v = deref(self._curIter)
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    __PYX_ERR(0, 273, __pyx_L1_error)

    /* "opendht.pyx":272
 *         self._curIter = self._nodes.begin()
 *     def __next__(self):
 *         if self._curIter == self._nodes.end():             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         h = NodeEntry()
 */
  }

  /* "opendht.pyx":274
 *         if self._curIter == self._nodes.end():
 *             raise StopIteration
 *         h = NodeEntry()             # <<<<<<<<<<<<<<
 *         h._v = deref(self._curIter)
 *         inc(self._curIter)
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_NodeEntry), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_h = ((struct __pyx_obj_7opendht_NodeEntry *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "opendht.pyx":275
 *             raise StopIteration
 *         h = NodeEntry()
 *         h._v = deref(self._curIter)             # <<<<<<<<<<<<<<
 *         inc(self._curIter)
 *         return h
 */
  __pyx_v_h->_v = (*__pyx_v_self->_curIter);

  /* "opendht.pyx":276
 *         h = NodeEntry()
 *         h._v = deref(self._curIter)
 *         inc(self._curIter)             # <<<<<<<<<<<<<<
 *         return h
 * 
 */
  (++__pyx_v_self->_curIter);

  /* "opendht.pyx":277
 *         h._v = deref(self._curIter)
 *         inc(self._curIter)
 *         return h             # <<<<<<<<<<<<<<
 * 
 * cdef class NodeSet(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  __pyx_r = ((PyObject *)__pyx_v_h);
  goto __pyx_L0;

  /* "opendht.pyx":271
 *         self._nodes = &s._nodes
 *         self._curIter = self._nodes.begin()
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self._curIter == self._nodes.end():
 *             raise StopIteration
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opendht.NodeSetIter.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._curIter,self._nodes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_11NodeSetIter_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_11NodeSetIter_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_11NodeSetIter_4__reduce_cython__(((struct __pyx_obj_7opendht_NodeSetIter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_11NodeSetIter_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_NodeSetIter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._curIter,self._nodes cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._curIter,self._nodes cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._curIter,self._nodes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.NodeSetIter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._curIter,self._nodes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._curIter,self._nodes cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_11NodeSetIter_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_11NodeSetIter_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_11NodeSetIter_6__setstate_cython__(((struct __pyx_obj_7opendht_NodeSetIter *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_11NodeSetIter_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_NodeSetIter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._curIter,self._nodes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._curIter,self._nodes cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._curIter,self._nodes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._curIter,self._nodes cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.NodeSetIter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":281
 * cdef class NodeSet(object):
 *     cdef map[cpp.InfoHash, shared_ptr[cpp.Node]] _nodes
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self._nodes.size()
 *     def insert(self, NodeEntry l):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_7NodeSet_1size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_7NodeSet_1size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_7NodeSet_size(((struct __pyx_obj_7opendht_NodeSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_7NodeSet_size(struct __pyx_obj_7opendht_NodeSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("size", 0);

  /* "opendht.pyx":282
 *     cdef map[cpp.InfoHash, shared_ptr[cpp.Node]] _nodes
 *     def size(self):
 *         return self._nodes.size()             # <<<<<<<<<<<<<<
 *     def insert(self, NodeEntry l):
 *         return self._nodes.insert(l._v).second
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_nodes.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":281
 * cdef class NodeSet(object):
 *     cdef map[cpp.InfoHash, shared_ptr[cpp.Node]] _nodes
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self._nodes.size()
 *     def insert(self, NodeEntry l):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.NodeSet.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":283
 *     def size(self):
 *         return self._nodes.size()
 *     def insert(self, NodeEntry l):             # <<<<<<<<<<<<<<
 *         return self._nodes.insert(l._v).second
 *     def extend(self, li):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_7NodeSet_3insert(PyObject *__pyx_v_self, PyObject *__pyx_v_l); /*proto*/
static PyObject *__pyx_pw_7opendht_7NodeSet_3insert(PyObject *__pyx_v_self, PyObject *__pyx_v_l) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insert (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_l), __pyx_ptype_7opendht_NodeEntry, 1, "l", 0))) __PYX_ERR(0, 283, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_7NodeSet_2insert(((struct __pyx_obj_7opendht_NodeSet *)__pyx_v_self), ((struct __pyx_obj_7opendht_NodeEntry *)__pyx_v_l));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_7NodeSet_2insert(struct __pyx_obj_7opendht_NodeSet *__pyx_v_self, struct __pyx_obj_7opendht_NodeEntry *__pyx_v_l) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::pair<std::map<dht::InfoHash,std::shared_ptr<dht::Node> > ::iterator,int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("insert", 0);

  /* "opendht.pyx":284
 *         return self._nodes.size()
 *     def insert(self, NodeEntry l):
 *         return self._nodes.insert(l._v).second             # <<<<<<<<<<<<<<
 *     def extend(self, li):
 *         for n in li:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_nodes.insert(__pyx_v_l->_v);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 284, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":283
 *     def size(self):
 *         return self._nodes.size()
 *     def insert(self, NodeEntry l):             # <<<<<<<<<<<<<<
 *         return self._nodes.insert(l._v).second
 *     def extend(self, li):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opendht.NodeSet.insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":285
 *     def insert(self, NodeEntry l):
 *         return self._nodes.insert(l._v).second
 *     def extend(self, li):             # <<<<<<<<<<<<<<
 *         for n in li:
 *             self.insert(n)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_7NodeSet_5extend(PyObject *__pyx_v_self, PyObject *__pyx_v_li); /*proto*/
static PyObject *__pyx_pw_7opendht_7NodeSet_5extend(PyObject *__pyx_v_self, PyObject *__pyx_v_li) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extend (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_7NodeSet_4extend(((struct __pyx_obj_7opendht_NodeSet *)__pyx_v_self), ((PyObject *)__pyx_v_li));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_7NodeSet_4extend(struct __pyx_obj_7opendht_NodeSet *__pyx_v_self, PyObject *__pyx_v_li) {
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("extend", 0);

  /* "opendht.pyx":286
 *         return self._nodes.insert(l._v).second
 *     def extend(self, li):
 *         for n in li:             # <<<<<<<<<<<<<<
 *             self.insert(n)
 *     def first(self):
 */
  if (likely(PyList_CheckExact(__pyx_v_li)) || PyTuple_CheckExact(__pyx_v_li)) {
    __pyx_t_1 = __pyx_v_li; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_li); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 286, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 286, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 286, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 286, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 286, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 286, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "opendht.pyx":287
 *     def extend(self, li):
 *         for n in li:
 *             self.insert(n)             # <<<<<<<<<<<<<<
 *     def first(self):
 *         if self._nodes.empty():
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_insert); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_n); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_n};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 287, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_n};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 287, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 287, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_v_n);
        __Pyx_GIVEREF(__pyx_v_n);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_n);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 287, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "opendht.pyx":286
 *         return self._nodes.insert(l._v).second
 *     def extend(self, li):
 *         for n in li:             # <<<<<<<<<<<<<<
 *             self.insert(n)
 *     def first(self):
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "opendht.pyx":285
 *     def insert(self, NodeEntry l):
 *         return self._nodes.insert(l._v).second
 *     def extend(self, li):             # <<<<<<<<<<<<<<
 *         for n in li:
 *             self.insert(n)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("opendht.NodeSet.extend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":288
 *         for n in li:
 *             self.insert(n)
 *     def first(self):             # <<<<<<<<<<<<<<
 *         if self._nodes.empty():
 *             raise IndexError()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_7NodeSet_7first(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_7NodeSet_7first(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("first (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_7NodeSet_6first(((struct __pyx_obj_7opendht_NodeSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_7NodeSet_6first(struct __pyx_obj_7opendht_NodeSet *__pyx_v_self) {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_h = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  dht::InfoHash __pyx_t_3;
  __Pyx_RefNannySetupContext("first", 0);

  /* "opendht.pyx":289
 *             self.insert(n)
 *     def first(self):
 *         if self._nodes.empty():             # <<<<<<<<<<<<<<
 *             raise IndexError()
 *         h = InfoHash()
 */
  __pyx_t_1 = (__pyx_v_self->_nodes.empty() != 0);
  if (__pyx_t_1) {

    /* "opendht.pyx":290
 *     def first(self):
 *         if self._nodes.empty():
 *             raise IndexError()             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = deref(self._nodes.begin()).first
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_IndexError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 290, __pyx_L1_error)

    /* "opendht.pyx":289
 *             self.insert(n)
 *     def first(self):
 *         if self._nodes.empty():             # <<<<<<<<<<<<<<
 *             raise IndexError()
 *         h = InfoHash()
 */
  }

  /* "opendht.pyx":291
 *         if self._nodes.empty():
 *             raise IndexError()
 *         h = InfoHash()             # <<<<<<<<<<<<<<
 *         h._infohash = deref(self._nodes.begin()).first
 *         return h
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_InfoHash), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_h = ((struct __pyx_obj_7opendht_InfoHash *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "opendht.pyx":292
 *             raise IndexError()
 *         h = InfoHash()
 *         h._infohash = deref(self._nodes.begin()).first             # <<<<<<<<<<<<<<
 *         return h
 *     def last(self):
 */
  __pyx_t_3 = (*__pyx_v_self->_nodes.begin()).first;
  __pyx_v_h->_infohash = __pyx_t_3;

  /* "opendht.pyx":293
 *         h = InfoHash()
 *         h._infohash = deref(self._nodes.begin()).first
 *         return h             # <<<<<<<<<<<<<<
 *     def last(self):
 *         if self._nodes.empty():
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  __pyx_r = ((PyObject *)__pyx_v_h);
  goto __pyx_L0;

  /* "opendht.pyx":288
 *         for n in li:
 *             self.insert(n)
 *     def first(self):             # <<<<<<<<<<<<<<
 *         if self._nodes.empty():
 *             raise IndexError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opendht.NodeSet.first", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":294
 *         h._infohash = deref(self._nodes.begin()).first
 *         return h
 *     def last(self):             # <<<<<<<<<<<<<<
 *         if self._nodes.empty():
 *             raise IndexError()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_7NodeSet_9last(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_7NodeSet_9last(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("last (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_7NodeSet_8last(((struct __pyx_obj_7opendht_NodeSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_7NodeSet_8last(struct __pyx_obj_7opendht_NodeSet *__pyx_v_self) {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_h = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  dht::InfoHash __pyx_t_3;
  __Pyx_RefNannySetupContext("last", 0);

  /* "opendht.pyx":295
 *         return h
 *     def last(self):
 *         if self._nodes.empty():             # <<<<<<<<<<<<<<
 *             raise IndexError()
 *         h = InfoHash()
 */
  __pyx_t_1 = (__pyx_v_self->_nodes.empty() != 0);
  if (__pyx_t_1) {

    /* "opendht.pyx":296
 *     def last(self):
 *         if self._nodes.empty():
 *             raise IndexError()             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = deref(dec(self._nodes.end())).first
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_IndexError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 296, __pyx_L1_error)

    /* "opendht.pyx":295
 *         return h
 *     def last(self):
 *         if self._nodes.empty():             # <<<<<<<<<<<<<<
 *             raise IndexError()
 *         h = InfoHash()
 */
  }

  /* "opendht.pyx":297
 *         if self._nodes.empty():
 *             raise IndexError()
 *         h = InfoHash()             # <<<<<<<<<<<<<<
 *         h._infohash = deref(dec(self._nodes.end())).first
 *         return h
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_InfoHash), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_h = ((struct __pyx_obj_7opendht_InfoHash *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "opendht.pyx":298
 *             raise IndexError()
 *         h = InfoHash()
 *         h._infohash = deref(dec(self._nodes.end())).first             # <<<<<<<<<<<<<<
 *         return h
 *     def __str__(self):
 */
  __pyx_t_3 = (*(--__pyx_v_self->_nodes.end())).first;
  __pyx_v_h->_infohash = __pyx_t_3;

  /* "opendht.pyx":299
 *         h = InfoHash()
 *         h._infohash = deref(dec(self._nodes.end())).first
 *         return h             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         s = ''
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  __pyx_r = ((PyObject *)__pyx_v_h);
  goto __pyx_L0;

  /* "opendht.pyx":294
 *         h._infohash = deref(self._nodes.begin()).first
 *         return h
 *     def last(self):             # <<<<<<<<<<<<<<
 *         if self._nodes.empty():
 *             raise IndexError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opendht.NodeSet.last", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":300
 *         h._infohash = deref(dec(self._nodes.end())).first
 *         return h
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         s = ''
 *         cdef map[cpp.InfoHash, shared_ptr[cpp.Node]].iterator it = self._nodes.begin()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_7NodeSet_11__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_7NodeSet_11__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_7NodeSet_10__str__(((struct __pyx_obj_7opendht_NodeSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_7NodeSet_10__str__(struct __pyx_obj_7opendht_NodeSet *__pyx_v_self) {
  PyObject *__pyx_v_s = NULL;
  std::map<dht::InfoHash,std::shared_ptr<dht::Node> > ::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "opendht.pyx":301
 *         return h
 *     def __str__(self):
 *         s = ''             # <<<<<<<<<<<<<<
 *         cdef map[cpp.InfoHash, shared_ptr[cpp.Node]].iterator it = self._nodes.begin()
 *         while it != self._nodes.end():
 */
  __Pyx_INCREF(__pyx_kp_u_);
  __pyx_v_s = __pyx_kp_u_;

  /* "opendht.pyx":302
 *     def __str__(self):
 *         s = ''
 *         cdef map[cpp.InfoHash, shared_ptr[cpp.Node]].iterator it = self._nodes.begin()             # <<<<<<<<<<<<<<
 *         while it != self._nodes.end():
 *             s += deref(it).first.toString().decode() + ' ' + deref(it).second.get().getAddrStr().decode() + '\n'
 */
  __pyx_v_it = __pyx_v_self->_nodes.begin();

  /* "opendht.pyx":303
 *         s = ''
 *         cdef map[cpp.InfoHash, shared_ptr[cpp.Node]].iterator it = self._nodes.begin()
 *         while it != self._nodes.end():             # <<<<<<<<<<<<<<
 *             s += deref(it).first.toString().decode() + ' ' + deref(it).second.get().getAddrStr().decode() + '\n'
 *             inc(it)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != __pyx_v_self->_nodes.end()) != 0);
    if (!__pyx_t_1) break;

    /* "opendht.pyx":304
 *         cdef map[cpp.InfoHash, shared_ptr[cpp.Node]].iterator it = self._nodes.begin()
 *         while it != self._nodes.end():
 *             s += deref(it).first.toString().decode() + ' ' + deref(it).second.get().getAddrStr().decode() + '\n'             # <<<<<<<<<<<<<<
 *             inc(it)
 *         return s
 */
    __pyx_t_2 = __Pyx_decode_cpp_string((*__pyx_v_it).first.toString(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_t_2, __pyx_kp_u__20); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_decode_cpp_string((*__pyx_v_it).second.get()->getAddrStr(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_kp_u__21); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_s, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "opendht.pyx":305
 *         while it != self._nodes.end():
 *             s += deref(it).first.toString().decode() + ' ' + deref(it).second.get().getAddrStr().decode() + '\n'
 *             inc(it)             # <<<<<<<<<<<<<<
 *         return s
 *     def __iter__(self):
 */
    (++__pyx_v_it);
  }

  /* "opendht.pyx":306
 *             s += deref(it).first.toString().decode() + ' ' + deref(it).second.get().getAddrStr().decode() + '\n'
 *             inc(it)
 *         return s             # <<<<<<<<<<<<<<
 *     def __iter__(self):
 *         return NodeSetIter(self)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "opendht.pyx":300
 *         h._infohash = deref(dec(self._nodes.end())).first
 *         return h
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         s = ''
 *         cdef map[cpp.InfoHash, shared_ptr[cpp.Node]].iterator it = self._nodes.begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("opendht.NodeSet.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":307
 *             inc(it)
 *         return s
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return NodeSetIter(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_7NodeSet_13__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_7NodeSet_13__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_7NodeSet_12__iter__(((struct __pyx_obj_7opendht_NodeSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_7NodeSet_12__iter__(struct __pyx_obj_7opendht_NodeSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "opendht.pyx":308
 *         return s
 *     def __iter__(self):
 *         return NodeSetIter(self)             # <<<<<<<<<<<<<<
 * 
 * cdef class PrivateKey(_WithID):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_NodeSetIter), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":307
 *             inc(it)
 *         return s
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return NodeSetIter(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opendht.NodeSet.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._nodes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_7NodeSet_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_7NodeSet_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_7NodeSet_14__reduce_cython__(((struct __pyx_obj_7opendht_NodeSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_7NodeSet_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_NodeSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._nodes cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._nodes cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._nodes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.NodeSet.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._nodes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._nodes cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_7NodeSet_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_7NodeSet_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_7NodeSet_16__setstate_cython__(((struct __pyx_obj_7opendht_NodeSet *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_7NodeSet_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_NodeSet *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._nodes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._nodes cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._nodes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._nodes cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.NodeSet.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":312
 * cdef class PrivateKey(_WithID):
 *     cdef shared_ptr[cpp.PrivateKey] _key
 *     def getId(self):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = self._key.get().getPublicKey().getId()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_10PrivateKey_1getId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_10PrivateKey_1getId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getId (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_10PrivateKey_getId(((struct __pyx_obj_7opendht_PrivateKey *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_10PrivateKey_getId(struct __pyx_obj_7opendht_PrivateKey *__pyx_v_self) {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_h = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getId", 0);

  /* "opendht.pyx":313
 *     cdef shared_ptr[cpp.PrivateKey] _key
 *     def getId(self):
 *         h = InfoHash()             # <<<<<<<<<<<<<<
 *         h._infohash = self._key.get().getPublicKey().getId()
 *         return h
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_InfoHash), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_h = ((struct __pyx_obj_7opendht_InfoHash *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":314
 *     def getId(self):
 *         h = InfoHash()
 *         h._infohash = self._key.get().getPublicKey().getId()             # <<<<<<<<<<<<<<
 *         return h
 *     def getPublicKey(self):
 */
  __pyx_v_h->_infohash = __pyx_v_self->_key.get()->getPublicKey().getId();

  /* "opendht.pyx":315
 *         h = InfoHash()
 *         h._infohash = self._key.get().getPublicKey().getId()
 *         return h             # <<<<<<<<<<<<<<
 *     def getPublicKey(self):
 *         pk = PublicKey()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  __pyx_r = ((PyObject *)__pyx_v_h);
  goto __pyx_L0;

  /* "opendht.pyx":312
 * cdef class PrivateKey(_WithID):
 *     cdef shared_ptr[cpp.PrivateKey] _key
 *     def getId(self):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = self._key.get().getPublicKey().getId()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.PrivateKey.getId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":316
 *         h._infohash = self._key.get().getPublicKey().getId()
 *         return h
 *     def getPublicKey(self):             # <<<<<<<<<<<<<<
 *         pk = PublicKey()
 *         pk._key = self._key.get().getPublicKey()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_10PrivateKey_3getPublicKey(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_10PrivateKey_3getPublicKey(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPublicKey (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_10PrivateKey_2getPublicKey(((struct __pyx_obj_7opendht_PrivateKey *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_10PrivateKey_2getPublicKey(struct __pyx_obj_7opendht_PrivateKey *__pyx_v_self) {
  struct __pyx_obj_7opendht_PublicKey *__pyx_v_pk = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getPublicKey", 0);

  /* "opendht.pyx":317
 *         return h
 *     def getPublicKey(self):
 *         pk = PublicKey()             # <<<<<<<<<<<<<<
 *         pk._key = self._key.get().getPublicKey()
 *         return pk
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_PublicKey), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pk = ((struct __pyx_obj_7opendht_PublicKey *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":318
 *     def getPublicKey(self):
 *         pk = PublicKey()
 *         pk._key = self._key.get().getPublicKey()             # <<<<<<<<<<<<<<
 *         return pk
 *     def decrypt(self, bytes dat):
 */
  __pyx_v_pk->_key = __pyx_v_self->_key.get()->getPublicKey();

  /* "opendht.pyx":319
 *         pk = PublicKey()
 *         pk._key = self._key.get().getPublicKey()
 *         return pk             # <<<<<<<<<<<<<<
 *     def decrypt(self, bytes dat):
 *         cdef size_t d_len = len(dat)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pk));
  __pyx_r = ((PyObject *)__pyx_v_pk);
  goto __pyx_L0;

  /* "opendht.pyx":316
 *         h._infohash = self._key.get().getPublicKey().getId()
 *         return h
 *     def getPublicKey(self):             # <<<<<<<<<<<<<<
 *         pk = PublicKey()
 *         pk._key = self._key.get().getPublicKey()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.PrivateKey.getPublicKey", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pk);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":320
 *         pk._key = self._key.get().getPublicKey()
 *         return pk
 *     def decrypt(self, bytes dat):             # <<<<<<<<<<<<<<
 *         cdef size_t d_len = len(dat)
 *         cdef cpp.uint8_t* d_ptr = <cpp.uint8_t*>dat
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_10PrivateKey_5decrypt(PyObject *__pyx_v_self, PyObject *__pyx_v_dat); /*proto*/
static PyObject *__pyx_pw_7opendht_10PrivateKey_5decrypt(PyObject *__pyx_v_self, PyObject *__pyx_v_dat) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decrypt (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dat), (&PyBytes_Type), 1, "dat", 1))) __PYX_ERR(0, 320, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_10PrivateKey_4decrypt(((struct __pyx_obj_7opendht_PrivateKey *)__pyx_v_self), ((PyObject*)__pyx_v_dat));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_10PrivateKey_4decrypt(struct __pyx_obj_7opendht_PrivateKey *__pyx_v_self, PyObject *__pyx_v_dat) {
  size_t __pyx_v_d_len;
  uint8_t *__pyx_v_d_ptr;
  __pyx_t_11opendht_cpp_Blob __pyx_v_indat;
  __pyx_t_11opendht_cpp_Blob __pyx_v_decrypted;
  char *__pyx_v_decrypted_c_str;
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  uint8_t *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("decrypt", 0);

  /* "opendht.pyx":321
 *         return pk
 *     def decrypt(self, bytes dat):
 *         cdef size_t d_len = len(dat)             # <<<<<<<<<<<<<<
 *         cdef cpp.uint8_t* d_ptr = <cpp.uint8_t*>dat
 *         cdef cpp.Blob indat
 */
  if (unlikely(__pyx_v_dat == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 321, __pyx_L1_error)
  }
  __pyx_t_1 = PyBytes_GET_SIZE(__pyx_v_dat); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 321, __pyx_L1_error)
  __pyx_v_d_len = __pyx_t_1;

  /* "opendht.pyx":322
 *     def decrypt(self, bytes dat):
 *         cdef size_t d_len = len(dat)
 *         cdef cpp.uint8_t* d_ptr = <cpp.uint8_t*>dat             # <<<<<<<<<<<<<<
 *         cdef cpp.Blob indat
 *         indat.assign(d_ptr, <cpp.uint8_t*>(d_ptr + d_len))
 */
  __pyx_t_2 = __Pyx_PyObject_AsWritableUString(__pyx_v_dat); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 322, __pyx_L1_error)
  __pyx_v_d_ptr = ((uint8_t *)__pyx_t_2);

  /* "opendht.pyx":324
 *         cdef cpp.uint8_t* d_ptr = <cpp.uint8_t*>dat
 *         cdef cpp.Blob indat
 *         indat.assign(d_ptr, <cpp.uint8_t*>(d_ptr + d_len))             # <<<<<<<<<<<<<<
 *         cdef cpp.Blob decrypted = self._key.get().decrypt(indat)
 *         cdef char* decrypted_c_str = <char *>decrypted.data()
 */
  try {
    __pyx_v_indat.assign(__pyx_v_d_ptr, ((uint8_t *)(__pyx_v_d_ptr + __pyx_v_d_len)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 324, __pyx_L1_error)
  }

  /* "opendht.pyx":325
 *         cdef cpp.Blob indat
 *         indat.assign(d_ptr, <cpp.uint8_t*>(d_ptr + d_len))
 *         cdef cpp.Blob decrypted = self._key.get().decrypt(indat)             # <<<<<<<<<<<<<<
 *         cdef char* decrypted_c_str = <char *>decrypted.data()
 *         cdef Py_ssize_t length = decrypted.size()
 */
  __pyx_v_decrypted = __pyx_v_self->_key.get()->decrypt(__pyx_v_indat);

  /* "opendht.pyx":326
 *         indat.assign(d_ptr, <cpp.uint8_t*>(d_ptr + d_len))
 *         cdef cpp.Blob decrypted = self._key.get().decrypt(indat)
 *         cdef char* decrypted_c_str = <char *>decrypted.data()             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t length = decrypted.size()
 *         return decrypted_c_str[:length]
 */
  __pyx_v_decrypted_c_str = ((char *)__pyx_v_decrypted.data());

  /* "opendht.pyx":327
 *         cdef cpp.Blob decrypted = self._key.get().decrypt(indat)
 *         cdef char* decrypted_c_str = <char *>decrypted.data()
 *         cdef Py_ssize_t length = decrypted.size()             # <<<<<<<<<<<<<<
 *         return decrypted_c_str[:length]
 *     def __str__(self):
 */
  __pyx_v_length = __pyx_v_decrypted.size();

  /* "opendht.pyx":328
 *         cdef char* decrypted_c_str = <char *>decrypted.data()
 *         cdef Py_ssize_t length = decrypted.size()
 *         return decrypted_c_str[:length]             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         return self.getId().toString().decode()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_decrypted_c_str + 0, __pyx_v_length - 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":320
 *         pk._key = self._key.get().getPublicKey()
 *         return pk
 *     def decrypt(self, bytes dat):             # <<<<<<<<<<<<<<
 *         cdef size_t d_len = len(dat)
 *         cdef cpp.uint8_t* d_ptr = <cpp.uint8_t*>dat
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opendht.PrivateKey.decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":329
 *         cdef Py_ssize_t length = decrypted.size()
 *         return decrypted_c_str[:length]
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.getId().toString().decode()
 *     @staticmethod
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_10PrivateKey_7__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_10PrivateKey_7__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_10PrivateKey_6__str__(((struct __pyx_obj_7opendht_PrivateKey *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_10PrivateKey_6__str__(struct __pyx_obj_7opendht_PrivateKey *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "opendht.pyx":330
 *         return decrypted_c_str[:length]
 *     def __str__(self):
 *         return self.getId().toString().decode()             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     def generate():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getId); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 330, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_toString); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":329
 *         cdef Py_ssize_t length = decrypted.size()
 *         return decrypted_c_str[:length]
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.getId().toString().decode()
 *     @staticmethod
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opendht.PrivateKey.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":332
 *         return self.getId().toString().decode()
 *     @staticmethod
 *     def generate():             # <<<<<<<<<<<<<<
 *         k = PrivateKey()
 *         k._key = cpp.make_shared[cpp.PrivateKey](cpp.PrivateKey.generate())
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_10PrivateKey_9generate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opendht_10PrivateKey_9generate = {"generate", (PyCFunction)__pyx_pw_7opendht_10PrivateKey_9generate, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opendht_10PrivateKey_9generate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("generate", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "generate", 0))) return NULL;
  __pyx_r = __pyx_pf_7opendht_10PrivateKey_8generate();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_10PrivateKey_8generate() {
  struct __pyx_obj_7opendht_PrivateKey *__pyx_v_k = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::shared_ptr<dht::crypto::PrivateKey>  __pyx_t_2;
  __Pyx_RefNannySetupContext("generate", 0);

  /* "opendht.pyx":333
 *     @staticmethod
 *     def generate():
 *         k = PrivateKey()             # <<<<<<<<<<<<<<
 *         k._key = cpp.make_shared[cpp.PrivateKey](cpp.PrivateKey.generate())
 *         return k
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_PrivateKey), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_k = ((struct __pyx_obj_7opendht_PrivateKey *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":334
 *     def generate():
 *         k = PrivateKey()
 *         k._key = cpp.make_shared[cpp.PrivateKey](cpp.PrivateKey.generate())             # <<<<<<<<<<<<<<
 *         return k
 *     @staticmethod
 */
  try {
    __pyx_t_2 = std::make_shared<dht::crypto::PrivateKey>(dht::crypto::PrivateKey::generate());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 334, __pyx_L1_error)
  }
  __pyx_v_k->_key = __pyx_t_2;

  /* "opendht.pyx":335
 *         k = PrivateKey()
 *         k._key = cpp.make_shared[cpp.PrivateKey](cpp.PrivateKey.generate())
 *         return k             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     def generateEC():
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_k));
  __pyx_r = ((PyObject *)__pyx_v_k);
  goto __pyx_L0;

  /* "opendht.pyx":332
 *         return self.getId().toString().decode()
 *     @staticmethod
 *     def generate():             # <<<<<<<<<<<<<<
 *         k = PrivateKey()
 *         k._key = cpp.make_shared[cpp.PrivateKey](cpp.PrivateKey.generate())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.PrivateKey.generate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_k);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":337
 *         return k
 *     @staticmethod
 *     def generateEC():             # <<<<<<<<<<<<<<
 *         k = PrivateKey()
 *         k._key = cpp.make_shared[cpp.PrivateKey](cpp.PrivateKey.generateEC())
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_10PrivateKey_11generateEC(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opendht_10PrivateKey_11generateEC = {"generateEC", (PyCFunction)__pyx_pw_7opendht_10PrivateKey_11generateEC, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opendht_10PrivateKey_11generateEC(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generateEC (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("generateEC", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "generateEC", 0))) return NULL;
  __pyx_r = __pyx_pf_7opendht_10PrivateKey_10generateEC();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_10PrivateKey_10generateEC() {
  struct __pyx_obj_7opendht_PrivateKey *__pyx_v_k = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::shared_ptr<dht::crypto::PrivateKey>  __pyx_t_2;
  __Pyx_RefNannySetupContext("generateEC", 0);

  /* "opendht.pyx":338
 *     @staticmethod
 *     def generateEC():
 *         k = PrivateKey()             # <<<<<<<<<<<<<<
 *         k._key = cpp.make_shared[cpp.PrivateKey](cpp.PrivateKey.generateEC())
 *         return k
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_PrivateKey), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_k = ((struct __pyx_obj_7opendht_PrivateKey *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":339
 *     def generateEC():
 *         k = PrivateKey()
 *         k._key = cpp.make_shared[cpp.PrivateKey](cpp.PrivateKey.generateEC())             # <<<<<<<<<<<<<<
 *         return k
 * 
 */
  try {
    __pyx_t_2 = std::make_shared<dht::crypto::PrivateKey>(dht::crypto::PrivateKey::generateEC());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 339, __pyx_L1_error)
  }
  __pyx_v_k->_key = __pyx_t_2;

  /* "opendht.pyx":340
 *         k = PrivateKey()
 *         k._key = cpp.make_shared[cpp.PrivateKey](cpp.PrivateKey.generateEC())
 *         return k             # <<<<<<<<<<<<<<
 * 
 * cdef class PublicKey(_WithID):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_k));
  __pyx_r = ((PyObject *)__pyx_v_k);
  goto __pyx_L0;

  /* "opendht.pyx":337
 *         return k
 *     @staticmethod
 *     def generateEC():             # <<<<<<<<<<<<<<
 *         k = PrivateKey()
 *         k._key = cpp.make_shared[cpp.PrivateKey](cpp.PrivateKey.generateEC())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.PrivateKey.generateEC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_k);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_10PrivateKey_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_10PrivateKey_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_10PrivateKey_12__reduce_cython__(((struct __pyx_obj_7opendht_PrivateKey *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_10PrivateKey_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_PrivateKey *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.PrivateKey.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_10PrivateKey_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_10PrivateKey_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_10PrivateKey_14__setstate_cython__(((struct __pyx_obj_7opendht_PrivateKey *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_10PrivateKey_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_PrivateKey *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.PrivateKey.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":344
 * cdef class PublicKey(_WithID):
 *     cdef cpp.PublicKey _key
 *     def getId(self):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = self._key.getId()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9PublicKey_1getId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_9PublicKey_1getId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getId (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9PublicKey_getId(((struct __pyx_obj_7opendht_PublicKey *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9PublicKey_getId(struct __pyx_obj_7opendht_PublicKey *__pyx_v_self) {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_h = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getId", 0);

  /* "opendht.pyx":345
 *     cdef cpp.PublicKey _key
 *     def getId(self):
 *         h = InfoHash()             # <<<<<<<<<<<<<<
 *         h._infohash = self._key.getId()
 *         return h
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_InfoHash), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_h = ((struct __pyx_obj_7opendht_InfoHash *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":346
 *     def getId(self):
 *         h = InfoHash()
 *         h._infohash = self._key.getId()             # <<<<<<<<<<<<<<
 *         return h
 *     def encrypt(self, bytes dat):
 */
  __pyx_v_h->_infohash = __pyx_v_self->_key.getId();

  /* "opendht.pyx":347
 *         h = InfoHash()
 *         h._infohash = self._key.getId()
 *         return h             # <<<<<<<<<<<<<<
 *     def encrypt(self, bytes dat):
 *         cdef size_t d_len = len(dat)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  __pyx_r = ((PyObject *)__pyx_v_h);
  goto __pyx_L0;

  /* "opendht.pyx":344
 * cdef class PublicKey(_WithID):
 *     cdef cpp.PublicKey _key
 *     def getId(self):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = self._key.getId()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.PublicKey.getId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":348
 *         h._infohash = self._key.getId()
 *         return h
 *     def encrypt(self, bytes dat):             # <<<<<<<<<<<<<<
 *         cdef size_t d_len = len(dat)
 *         cdef cpp.uint8_t* d_ptr = <cpp.uint8_t*>dat
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9PublicKey_3encrypt(PyObject *__pyx_v_self, PyObject *__pyx_v_dat); /*proto*/
static PyObject *__pyx_pw_7opendht_9PublicKey_3encrypt(PyObject *__pyx_v_self, PyObject *__pyx_v_dat) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("encrypt (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dat), (&PyBytes_Type), 1, "dat", 1))) __PYX_ERR(0, 348, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_9PublicKey_2encrypt(((struct __pyx_obj_7opendht_PublicKey *)__pyx_v_self), ((PyObject*)__pyx_v_dat));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9PublicKey_2encrypt(struct __pyx_obj_7opendht_PublicKey *__pyx_v_self, PyObject *__pyx_v_dat) {
  size_t __pyx_v_d_len;
  uint8_t *__pyx_v_d_ptr;
  __pyx_t_11opendht_cpp_Blob __pyx_v_indat;
  __pyx_t_11opendht_cpp_Blob __pyx_v_encrypted;
  char *__pyx_v_encrypted_c_str;
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  uint8_t *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("encrypt", 0);

  /* "opendht.pyx":349
 *         return h
 *     def encrypt(self, bytes dat):
 *         cdef size_t d_len = len(dat)             # <<<<<<<<<<<<<<
 *         cdef cpp.uint8_t* d_ptr = <cpp.uint8_t*>dat
 *         cdef cpp.Blob indat
 */
  if (unlikely(__pyx_v_dat == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 349, __pyx_L1_error)
  }
  __pyx_t_1 = PyBytes_GET_SIZE(__pyx_v_dat); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 349, __pyx_L1_error)
  __pyx_v_d_len = __pyx_t_1;

  /* "opendht.pyx":350
 *     def encrypt(self, bytes dat):
 *         cdef size_t d_len = len(dat)
 *         cdef cpp.uint8_t* d_ptr = <cpp.uint8_t*>dat             # <<<<<<<<<<<<<<
 *         cdef cpp.Blob indat
 *         indat.assign(d_ptr, <cpp.uint8_t*>(d_ptr + d_len))
 */
  __pyx_t_2 = __Pyx_PyObject_AsWritableUString(__pyx_v_dat); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 350, __pyx_L1_error)
  __pyx_v_d_ptr = ((uint8_t *)__pyx_t_2);

  /* "opendht.pyx":352
 *         cdef cpp.uint8_t* d_ptr = <cpp.uint8_t*>dat
 *         cdef cpp.Blob indat
 *         indat.assign(d_ptr, <cpp.uint8_t*>(d_ptr + d_len))             # <<<<<<<<<<<<<<
 *         cdef cpp.Blob encrypted = self._key.encrypt(indat)
 *         cdef char* encrypted_c_str = <char *>encrypted.data()
 */
  try {
    __pyx_v_indat.assign(__pyx_v_d_ptr, ((uint8_t *)(__pyx_v_d_ptr + __pyx_v_d_len)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 352, __pyx_L1_error)
  }

  /* "opendht.pyx":353
 *         cdef cpp.Blob indat
 *         indat.assign(d_ptr, <cpp.uint8_t*>(d_ptr + d_len))
 *         cdef cpp.Blob encrypted = self._key.encrypt(indat)             # <<<<<<<<<<<<<<
 *         cdef char* encrypted_c_str = <char *>encrypted.data()
 *         cdef Py_ssize_t length = encrypted.size()
 */
  __pyx_v_encrypted = __pyx_v_self->_key.encrypt(__pyx_v_indat);

  /* "opendht.pyx":354
 *         indat.assign(d_ptr, <cpp.uint8_t*>(d_ptr + d_len))
 *         cdef cpp.Blob encrypted = self._key.encrypt(indat)
 *         cdef char* encrypted_c_str = <char *>encrypted.data()             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t length = encrypted.size()
 *         return encrypted_c_str[:length]
 */
  __pyx_v_encrypted_c_str = ((char *)__pyx_v_encrypted.data());

  /* "opendht.pyx":355
 *         cdef cpp.Blob encrypted = self._key.encrypt(indat)
 *         cdef char* encrypted_c_str = <char *>encrypted.data()
 *         cdef Py_ssize_t length = encrypted.size()             # <<<<<<<<<<<<<<
 *         return encrypted_c_str[:length]
 * 
 */
  __pyx_v_length = __pyx_v_encrypted.size();

  /* "opendht.pyx":356
 *         cdef char* encrypted_c_str = <char *>encrypted.data()
 *         cdef Py_ssize_t length = encrypted.size()
 *         return encrypted_c_str[:length]             # <<<<<<<<<<<<<<
 * 
 * cdef class Certificate(_WithID):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_encrypted_c_str + 0, __pyx_v_length - 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":348
 *         h._infohash = self._key.getId()
 *         return h
 *     def encrypt(self, bytes dat):             # <<<<<<<<<<<<<<
 *         cdef size_t d_len = len(dat)
 *         cdef cpp.uint8_t* d_ptr = <cpp.uint8_t*>dat
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opendht.PublicKey.encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9PublicKey_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_9PublicKey_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9PublicKey_4__reduce_cython__(((struct __pyx_obj_7opendht_PublicKey *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9PublicKey_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_PublicKey *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.PublicKey.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9PublicKey_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_9PublicKey_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9PublicKey_6__setstate_cython__(((struct __pyx_obj_7opendht_PublicKey *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9PublicKey_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_PublicKey *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.PublicKey.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":360
 * cdef class Certificate(_WithID):
 *     cdef shared_ptr[cpp.Certificate] _cert
 *     def __init__(self, bytes dat = None):             # <<<<<<<<<<<<<<
 *         if dat:
 *             self._cert = cpp.make_shared[cpp.Certificate](<cpp.string>dat)
 */

/* Python wrapper */
static int __pyx_pw_7opendht_11Certificate_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opendht_11Certificate_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dat = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dat,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dat);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 360, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dat = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 360, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Certificate.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dat), (&PyBytes_Type), 1, "dat", 1))) __PYX_ERR(0, 360, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_11Certificate___init__(((struct __pyx_obj_7opendht_Certificate *)__pyx_v_self), __pyx_v_dat);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_11Certificate___init__(struct __pyx_obj_7opendht_Certificate *__pyx_v_self, PyObject *__pyx_v_dat) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  std::shared_ptr<dht::crypto::Certificate>  __pyx_t_3;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "opendht.pyx":361
 *     cdef shared_ptr[cpp.Certificate] _cert
 *     def __init__(self, bytes dat = None):
 *         if dat:             # <<<<<<<<<<<<<<
 *             self._cert = cpp.make_shared[cpp.Certificate](<cpp.string>dat)
 *     def getId(self):
 */
  __pyx_t_1 = (__pyx_v_dat != Py_None) && (PyBytes_GET_SIZE(__pyx_v_dat) != 0);
  if (__pyx_t_1) {

    /* "opendht.pyx":362
 *     def __init__(self, bytes dat = None):
 *         if dat:
 *             self._cert = cpp.make_shared[cpp.Certificate](<cpp.string>dat)             # <<<<<<<<<<<<<<
 *     def getId(self):
 *         h = InfoHash()
 */
    __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_dat); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 362, __pyx_L1_error)
    try {
      __pyx_t_3 = std::make_shared<dht::crypto::Certificate>(((std::string)__pyx_t_2));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 362, __pyx_L1_error)
    }
    __pyx_v_self->_cert = __pyx_t_3;

    /* "opendht.pyx":361
 *     cdef shared_ptr[cpp.Certificate] _cert
 *     def __init__(self, bytes dat = None):
 *         if dat:             # <<<<<<<<<<<<<<
 *             self._cert = cpp.make_shared[cpp.Certificate](<cpp.string>dat)
 *     def getId(self):
 */
  }

  /* "opendht.pyx":360
 * cdef class Certificate(_WithID):
 *     cdef shared_ptr[cpp.Certificate] _cert
 *     def __init__(self, bytes dat = None):             # <<<<<<<<<<<<<<
 *         if dat:
 *             self._cert = cpp.make_shared[cpp.Certificate](<cpp.string>dat)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("opendht.Certificate.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":363
 *         if dat:
 *             self._cert = cpp.make_shared[cpp.Certificate](<cpp.string>dat)
 *     def getId(self):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         if self._cert:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_11Certificate_3getId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_11Certificate_3getId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getId (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_11Certificate_2getId(((struct __pyx_obj_7opendht_Certificate *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_11Certificate_2getId(struct __pyx_obj_7opendht_Certificate *__pyx_v_self) {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_h = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  bool __pyx_t_2;
  __Pyx_RefNannySetupContext("getId", 0);

  /* "opendht.pyx":364
 *             self._cert = cpp.make_shared[cpp.Certificate](<cpp.string>dat)
 *     def getId(self):
 *         h = InfoHash()             # <<<<<<<<<<<<<<
 *         if self._cert:
 *             h._infohash = self._cert.get().getId()
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_InfoHash), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_h = ((struct __pyx_obj_7opendht_InfoHash *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":365
 *     def getId(self):
 *         h = InfoHash()
 *         if self._cert:             # <<<<<<<<<<<<<<
 *             h._infohash = self._cert.get().getId()
 *         return h
 */
  __pyx_t_2 = __pyx_v_self->_cert.operator bool();
  if (__pyx_t_2) {

    /* "opendht.pyx":366
 *         h = InfoHash()
 *         if self._cert:
 *             h._infohash = self._cert.get().getId()             # <<<<<<<<<<<<<<
 *         return h
 *     def toString(self):
 */
    __pyx_v_h->_infohash = __pyx_v_self->_cert.get()->getId();

    /* "opendht.pyx":365
 *     def getId(self):
 *         h = InfoHash()
 *         if self._cert:             # <<<<<<<<<<<<<<
 *             h._infohash = self._cert.get().getId()
 *         return h
 */
  }

  /* "opendht.pyx":367
 *         if self._cert:
 *             h._infohash = self._cert.get().getId()
 *         return h             # <<<<<<<<<<<<<<
 *     def toString(self):
 *         return self._cert.get().toString().decode()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  __pyx_r = ((PyObject *)__pyx_v_h);
  goto __pyx_L0;

  /* "opendht.pyx":363
 *         if dat:
 *             self._cert = cpp.make_shared[cpp.Certificate](<cpp.string>dat)
 *     def getId(self):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         if self._cert:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Certificate.getId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":368
 *             h._infohash = self._cert.get().getId()
 *         return h
 *     def toString(self):             # <<<<<<<<<<<<<<
 *         return self._cert.get().toString().decode()
 *     def getName(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_11Certificate_5toString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_11Certificate_5toString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("toString (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_11Certificate_4toString(((struct __pyx_obj_7opendht_Certificate *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_11Certificate_4toString(struct __pyx_obj_7opendht_Certificate *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("toString", 0);

  /* "opendht.pyx":369
 *         return h
 *     def toString(self):
 *         return self._cert.get().toString().decode()             # <<<<<<<<<<<<<<
 *     def getName(self):
 *         return self._cert.get().getName()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->_cert.get()->toString(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":368
 *             h._infohash = self._cert.get().getId()
 *         return h
 *     def toString(self):             # <<<<<<<<<<<<<<
 *         return self._cert.get().toString().decode()
 *     def getName(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Certificate.toString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":370
 *     def toString(self):
 *         return self._cert.get().toString().decode()
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         return self._cert.get().getName()
 *     def revoke(self, PrivateKey k, Certificate c):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_11Certificate_7getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_11Certificate_7getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getName (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_11Certificate_6getName(((struct __pyx_obj_7opendht_Certificate *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_11Certificate_6getName(struct __pyx_obj_7opendht_Certificate *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getName", 0);

  /* "opendht.pyx":371
 *         return self._cert.get().toString().decode()
 *     def getName(self):
 *         return self._cert.get().getName()             # <<<<<<<<<<<<<<
 *     def revoke(self, PrivateKey k, Certificate c):
 *         self._cert.get().revoke(deref(k._key.get()), deref(c._cert.get()));
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->_cert.get()->getName()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":370
 *     def toString(self):
 *         return self._cert.get().toString().decode()
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         return self._cert.get().getName()
 *     def revoke(self, PrivateKey k, Certificate c):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Certificate.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":372
 *     def getName(self):
 *         return self._cert.get().getName()
 *     def revoke(self, PrivateKey k, Certificate c):             # <<<<<<<<<<<<<<
 *         self._cert.get().revoke(deref(k._key.get()), deref(c._cert.get()));
 *     def __bytes__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_11Certificate_9revoke(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opendht_11Certificate_9revoke(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opendht_PrivateKey *__pyx_v_k = 0;
  struct __pyx_obj_7opendht_Certificate *__pyx_v_c = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("revoke (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_c,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("revoke", 1, 2, 2, 1); __PYX_ERR(0, 372, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "revoke") < 0)) __PYX_ERR(0, 372, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_k = ((struct __pyx_obj_7opendht_PrivateKey *)values[0]);
    __pyx_v_c = ((struct __pyx_obj_7opendht_Certificate *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("revoke", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 372, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Certificate.revoke", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_k), __pyx_ptype_7opendht_PrivateKey, 1, "k", 0))) __PYX_ERR(0, 372, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), __pyx_ptype_7opendht_Certificate, 1, "c", 0))) __PYX_ERR(0, 372, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_11Certificate_8revoke(((struct __pyx_obj_7opendht_Certificate *)__pyx_v_self), __pyx_v_k, __pyx_v_c);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_11Certificate_8revoke(struct __pyx_obj_7opendht_Certificate *__pyx_v_self, struct __pyx_obj_7opendht_PrivateKey *__pyx_v_k, struct __pyx_obj_7opendht_Certificate *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("revoke", 0);

  /* "opendht.pyx":373
 *         return self._cert.get().getName()
 *     def revoke(self, PrivateKey k, Certificate c):
 *         self._cert.get().revoke(deref(k._key.get()), deref(c._cert.get()));             # <<<<<<<<<<<<<<
 *     def __bytes__(self):
 *         return self._cert.get().toString() if self._cert else b''
 */
  __pyx_v_self->_cert.get()->revoke((*__pyx_v_k->_key.get()), (*__pyx_v_c->_cert.get()));

  /* "opendht.pyx":372
 *     def getName(self):
 *         return self._cert.get().getName()
 *     def revoke(self, PrivateKey k, Certificate c):             # <<<<<<<<<<<<<<
 *         self._cert.get().revoke(deref(k._key.get()), deref(c._cert.get()));
 *     def __bytes__(self):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":374
 *     def revoke(self, PrivateKey k, Certificate c):
 *         self._cert.get().revoke(deref(k._key.get()), deref(c._cert.get()));
 *     def __bytes__(self):             # <<<<<<<<<<<<<<
 *         return self._cert.get().toString() if self._cert else b''
 *     property issuer:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_11Certificate_11__bytes__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_11Certificate_11__bytes__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bytes__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_11Certificate_10__bytes__(((struct __pyx_obj_7opendht_Certificate *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_11Certificate_10__bytes__(struct __pyx_obj_7opendht_Certificate *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__bytes__", 0);

  /* "opendht.pyx":375
 *         self._cert.get().revoke(deref(k._key.get()), deref(c._cert.get()));
 *     def __bytes__(self):
 *         return self._cert.get().toString() if self._cert else b''             # <<<<<<<<<<<<<<
 *     property issuer:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  if (__pyx_v_self->_cert.operator bool()) {
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->_cert.get()->toString()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(__pyx_kp_b_);
    __pyx_t_1 = __pyx_kp_b_;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":374
 *     def revoke(self, PrivateKey k, Certificate c):
 *         self._cert.get().revoke(deref(k._key.get()), deref(c._cert.get()));
 *     def __bytes__(self):             # <<<<<<<<<<<<<<
 *         return self._cert.get().toString() if self._cert else b''
 *     property issuer:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opendht.Certificate.__bytes__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":377
 *         return self._cert.get().toString() if self._cert else b''
 *     property issuer:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             c = Certificate()
 *             c._cert = self._cert.get().issuer
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_11Certificate_6issuer_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_11Certificate_6issuer_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_11Certificate_6issuer___get__(((struct __pyx_obj_7opendht_Certificate *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_11Certificate_6issuer___get__(struct __pyx_obj_7opendht_Certificate *__pyx_v_self) {
  struct __pyx_obj_7opendht_Certificate *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::shared_ptr<dht::crypto::Certificate>  __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "opendht.pyx":378
 *     property issuer:
 *         def __get__(self):
 *             c = Certificate()             # <<<<<<<<<<<<<<
 *             c._cert = self._cert.get().issuer
 *             return c;
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_Certificate), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_c = ((struct __pyx_obj_7opendht_Certificate *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":379
 *         def __get__(self):
 *             c = Certificate()
 *             c._cert = self._cert.get().issuer             # <<<<<<<<<<<<<<
 *             return c;
 *     @staticmethod
 */
  __pyx_t_2 = __pyx_v_self->_cert.get()->issuer;
  __pyx_v_c->_cert = __pyx_t_2;

  /* "opendht.pyx":380
 *             c = Certificate()
 *             c._cert = self._cert.get().issuer
 *             return c;             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     def generate(PrivateKey k, str name, Identity i = Identity(), bool is_ca = False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "opendht.pyx":377
 *         return self._cert.get().toString() if self._cert else b''
 *     property issuer:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             c = Certificate()
 *             c._cert = self._cert.get().issuer
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Certificate.issuer.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":382
 *             return c;
 *     @staticmethod
 *     def generate(PrivateKey k, str name, Identity i = Identity(), bool is_ca = False):             # <<<<<<<<<<<<<<
 *         c = Certificate()
 *         c._cert = cpp.make_shared[cpp.Certificate](cpp.Certificate.generate(deref(k._key.get()), name.encode(), i._id, is_ca))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_11Certificate_13generate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opendht_11Certificate_13generate = {"generate", (PyCFunction)__pyx_pw_7opendht_11Certificate_13generate, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opendht_11Certificate_13generate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opendht_PrivateKey *__pyx_v_k = 0;
  PyObject *__pyx_v_name = 0;
  struct __pyx_obj_7opendht_Identity *__pyx_v_i = 0;
  bool __pyx_v_is_ca;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_name_2,&__pyx_n_s_i,&__pyx_n_s_is_ca,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = (PyObject *)__pyx_k__28;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("generate", 0, 2, 4, 1); __PYX_ERR(0, 382, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_i);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_is_ca);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "generate") < 0)) __PYX_ERR(0, 382, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = ((struct __pyx_obj_7opendht_PrivateKey *)values[0]);
    __pyx_v_name = ((PyObject*)values[1]);
    __pyx_v_i = ((struct __pyx_obj_7opendht_Identity *)values[2]);
    if (values[3]) {
      __pyx_v_is_ca = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_is_ca == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L3_error)
    } else {
      __pyx_v_is_ca = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 382, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Certificate.generate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_k), __pyx_ptype_7opendht_PrivateKey, 1, "k", 0))) __PYX_ERR(0, 382, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyUnicode_Type), 1, "name", 1))) __PYX_ERR(0, 382, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_i), __pyx_ptype_7opendht_Identity, 1, "i", 0))) __PYX_ERR(0, 382, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_11Certificate_12generate(__pyx_v_k, __pyx_v_name, __pyx_v_i, __pyx_v_is_ca);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_11Certificate_12generate(struct __pyx_obj_7opendht_PrivateKey *__pyx_v_k, PyObject *__pyx_v_name, struct __pyx_obj_7opendht_Identity *__pyx_v_i, bool __pyx_v_is_ca) {
  struct __pyx_obj_7opendht_Certificate *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  std::shared_ptr<dht::crypto::Certificate>  __pyx_t_3;
  __Pyx_RefNannySetupContext("generate", 0);

  /* "opendht.pyx":383
 *     @staticmethod
 *     def generate(PrivateKey k, str name, Identity i = Identity(), bool is_ca = False):
 *         c = Certificate()             # <<<<<<<<<<<<<<
 *         c._cert = cpp.make_shared[cpp.Certificate](cpp.Certificate.generate(deref(k._key.get()), name.encode(), i._id, is_ca))
 *         return c
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_Certificate), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_c = ((struct __pyx_obj_7opendht_Certificate *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":384
 *     def generate(PrivateKey k, str name, Identity i = Identity(), bool is_ca = False):
 *         c = Certificate()
 *         c._cert = cpp.make_shared[cpp.Certificate](cpp.Certificate.generate(deref(k._key.get()), name.encode(), i._id, is_ca))             # <<<<<<<<<<<<<<
 *         return c
 * 
 */
  if (unlikely(__pyx_v_name == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "encode");
    __PYX_ERR(0, 384, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsEncodedString(__pyx_v_name, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_3 = std::make_shared<dht::crypto::Certificate>(dht::crypto::Certificate::generate((*__pyx_v_k->_key.get()), __pyx_t_2, __pyx_v_i->_id, __pyx_v_is_ca));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 384, __pyx_L1_error)
  }
  __pyx_v_c->_cert = __pyx_t_3;

  /* "opendht.pyx":385
 *         c = Certificate()
 *         c._cert = cpp.make_shared[cpp.Certificate](cpp.Certificate.generate(deref(k._key.get()), name.encode(), i._id, is_ca))
 *         return c             # <<<<<<<<<<<<<<
 * 
 * cdef class VerifyResult(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "opendht.pyx":382
 *             return c;
 *     @staticmethod
 *     def generate(PrivateKey k, str name, Identity i = Identity(), bool is_ca = False):             # <<<<<<<<<<<<<<
 *         c = Certificate()
 *         c._cert = cpp.make_shared[cpp.Certificate](cpp.Certificate.generate(deref(k._key.get()), name.encode(), i._id, is_ca))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Certificate.generate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._cert cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_11Certificate_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_11Certificate_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_11Certificate_14__reduce_cython__(((struct __pyx_obj_7opendht_Certificate *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_11Certificate_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Certificate *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._cert cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._cert cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._cert cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Certificate.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._cert cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._cert cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_11Certificate_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_11Certificate_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_11Certificate_16__setstate_cython__(((struct __pyx_obj_7opendht_Certificate *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_11Certificate_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Certificate *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._cert cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._cert cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._cert cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._cert cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Certificate.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":389
 * cdef class VerifyResult(object):
 *     cdef cpp.TrustListVerifyResult _result
 *     def __bool__(self):             # <<<<<<<<<<<<<<
 *         return self._result.isValid()
 *     def __str(self):
 */

/* Python wrapper */
static int __pyx_pw_7opendht_12VerifyResult_1__bool__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7opendht_12VerifyResult_1__bool__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bool__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_12VerifyResult___bool__(((struct __pyx_obj_7opendht_VerifyResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_12VerifyResult___bool__(struct __pyx_obj_7opendht_VerifyResult *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bool__", 0);

  /* "opendht.pyx":390
 *     cdef cpp.TrustListVerifyResult _result
 *     def __bool__(self):
 *         return self._result.isValid()             # <<<<<<<<<<<<<<
 *     def __str(self):
 *         return self._result.toString()
 */
  __pyx_r = __pyx_v_self->_result.isValid();
  goto __pyx_L0;

  /* "opendht.pyx":389
 * cdef class VerifyResult(object):
 *     cdef cpp.TrustListVerifyResult _result
 *     def __bool__(self):             # <<<<<<<<<<<<<<
 *         return self._result.isValid()
 *     def __str(self):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":391
 *     def __bool__(self):
 *         return self._result.isValid()
 *     def __str(self):             # <<<<<<<<<<<<<<
 *         return self._result.toString()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_12VerifyResult_3__str(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_12VerifyResult_3__str(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_12VerifyResult_2__str(((struct __pyx_obj_7opendht_VerifyResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_12VerifyResult_2__str(struct __pyx_obj_7opendht_VerifyResult *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__str", 0);

  /* "opendht.pyx":392
 *         return self._result.isValid()
 *     def __str(self):
 *         return self._result.toString()             # <<<<<<<<<<<<<<
 * 
 * cdef class TrustList(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->_result.toString()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":391
 *     def __bool__(self):
 *         return self._result.isValid()
 *     def __str(self):             # <<<<<<<<<<<<<<
 *         return self._result.toString()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.VerifyResult.__str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._result cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_12VerifyResult_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_12VerifyResult_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_12VerifyResult_4__reduce_cython__(((struct __pyx_obj_7opendht_VerifyResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_12VerifyResult_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_VerifyResult *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._result cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._result cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._result cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.VerifyResult.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._result cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._result cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_12VerifyResult_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_12VerifyResult_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_12VerifyResult_6__setstate_cython__(((struct __pyx_obj_7opendht_VerifyResult *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_12VerifyResult_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_VerifyResult *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._result cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._result cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._result cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._result cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.VerifyResult.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":396
 * cdef class TrustList(object):
 *     cdef cpp.TrustList _trust
 *     def add(self, Certificate cert):             # <<<<<<<<<<<<<<
 *         self._trust.add(deref(cert._cert.get()))
 *     def remove(self, Certificate cert):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9TrustList_1add(PyObject *__pyx_v_self, PyObject *__pyx_v_cert); /*proto*/
static PyObject *__pyx_pw_7opendht_9TrustList_1add(PyObject *__pyx_v_self, PyObject *__pyx_v_cert) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cert), __pyx_ptype_7opendht_Certificate, 1, "cert", 0))) __PYX_ERR(0, 396, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_9TrustList_add(((struct __pyx_obj_7opendht_TrustList *)__pyx_v_self), ((struct __pyx_obj_7opendht_Certificate *)__pyx_v_cert));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9TrustList_add(struct __pyx_obj_7opendht_TrustList *__pyx_v_self, struct __pyx_obj_7opendht_Certificate *__pyx_v_cert) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add", 0);

  /* "opendht.pyx":397
 *     cdef cpp.TrustList _trust
 *     def add(self, Certificate cert):
 *         self._trust.add(deref(cert._cert.get()))             # <<<<<<<<<<<<<<
 *     def remove(self, Certificate cert):
 *         self._trust.remove(deref(cert._cert.get()))
 */
  __pyx_v_self->_trust.add((*__pyx_v_cert->_cert.get()));

  /* "opendht.pyx":396
 * cdef class TrustList(object):
 *     cdef cpp.TrustList _trust
 *     def add(self, Certificate cert):             # <<<<<<<<<<<<<<
 *         self._trust.add(deref(cert._cert.get()))
 *     def remove(self, Certificate cert):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":398
 *     def add(self, Certificate cert):
 *         self._trust.add(deref(cert._cert.get()))
 *     def remove(self, Certificate cert):             # <<<<<<<<<<<<<<
 *         self._trust.remove(deref(cert._cert.get()))
 *     def verify(self, Certificate cert):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9TrustList_3remove(PyObject *__pyx_v_self, PyObject *__pyx_v_cert); /*proto*/
static PyObject *__pyx_pw_7opendht_9TrustList_3remove(PyObject *__pyx_v_self, PyObject *__pyx_v_cert) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cert), __pyx_ptype_7opendht_Certificate, 1, "cert", 0))) __PYX_ERR(0, 398, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_9TrustList_2remove(((struct __pyx_obj_7opendht_TrustList *)__pyx_v_self), ((struct __pyx_obj_7opendht_Certificate *)__pyx_v_cert));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9TrustList_2remove(struct __pyx_obj_7opendht_TrustList *__pyx_v_self, struct __pyx_obj_7opendht_Certificate *__pyx_v_cert) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove", 0);

  /* "opendht.pyx":399
 *         self._trust.add(deref(cert._cert.get()))
 *     def remove(self, Certificate cert):
 *         self._trust.remove(deref(cert._cert.get()))             # <<<<<<<<<<<<<<
 *     def verify(self, Certificate cert):
 *         r = VerifyResult()
 */
  __pyx_v_self->_trust.remove((*__pyx_v_cert->_cert.get()));

  /* "opendht.pyx":398
 *     def add(self, Certificate cert):
 *         self._trust.add(deref(cert._cert.get()))
 *     def remove(self, Certificate cert):             # <<<<<<<<<<<<<<
 *         self._trust.remove(deref(cert._cert.get()))
 *     def verify(self, Certificate cert):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":400
 *     def remove(self, Certificate cert):
 *         self._trust.remove(deref(cert._cert.get()))
 *     def verify(self, Certificate cert):             # <<<<<<<<<<<<<<
 *         r = VerifyResult()
 *         r._result = self._trust.verify(deref(cert._cert.get()))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9TrustList_5verify(PyObject *__pyx_v_self, PyObject *__pyx_v_cert); /*proto*/
static PyObject *__pyx_pw_7opendht_9TrustList_5verify(PyObject *__pyx_v_self, PyObject *__pyx_v_cert) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("verify (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cert), __pyx_ptype_7opendht_Certificate, 1, "cert", 0))) __PYX_ERR(0, 400, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_9TrustList_4verify(((struct __pyx_obj_7opendht_TrustList *)__pyx_v_self), ((struct __pyx_obj_7opendht_Certificate *)__pyx_v_cert));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9TrustList_4verify(struct __pyx_obj_7opendht_TrustList *__pyx_v_self, struct __pyx_obj_7opendht_Certificate *__pyx_v_cert) {
  struct __pyx_obj_7opendht_VerifyResult *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("verify", 0);

  /* "opendht.pyx":401
 *         self._trust.remove(deref(cert._cert.get()))
 *     def verify(self, Certificate cert):
 *         r = VerifyResult()             # <<<<<<<<<<<<<<
 *         r._result = self._trust.verify(deref(cert._cert.get()))
 *         return r
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_VerifyResult), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r = ((struct __pyx_obj_7opendht_VerifyResult *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":402
 *     def verify(self, Certificate cert):
 *         r = VerifyResult()
 *         r._result = self._trust.verify(deref(cert._cert.get()))             # <<<<<<<<<<<<<<
 *         return r
 * 
 */
  __pyx_v_r->_result = __pyx_v_self->_trust.verify((*__pyx_v_cert->_cert.get()));

  /* "opendht.pyx":403
 *         r = VerifyResult()
 *         r._result = self._trust.verify(deref(cert._cert.get()))
 *         return r             # <<<<<<<<<<<<<<
 * 
 * cdef class ListenToken(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_r));
  __pyx_r = ((PyObject *)__pyx_v_r);
  goto __pyx_L0;

  /* "opendht.pyx":400
 *     def remove(self, Certificate cert):
 *         self._trust.remove(deref(cert._cert.get()))
 *     def verify(self, Certificate cert):             # <<<<<<<<<<<<<<
 *         r = VerifyResult()
 *         r._result = self._trust.verify(deref(cert._cert.get()))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.TrustList.verify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._trust cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9TrustList_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_9TrustList_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9TrustList_6__reduce_cython__(((struct __pyx_obj_7opendht_TrustList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9TrustList_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_TrustList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._trust cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._trust cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._trust cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.TrustList.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._trust cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._trust cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9TrustList_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_9TrustList_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9TrustList_8__setstate_cython__(((struct __pyx_obj_7opendht_TrustList *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9TrustList_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_TrustList *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._trust cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._trust cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._trust cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._trust cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.TrustList.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._h,self._t cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_11ListenToken_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_11ListenToken_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_11ListenToken___reduce_cython__(((struct __pyx_obj_7opendht_ListenToken *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_11ListenToken___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_ListenToken *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._h,self._t cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._h,self._t cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._h,self._t cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.ListenToken.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._h,self._t cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._h,self._t cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_11ListenToken_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_11ListenToken_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_11ListenToken_2__setstate_cython__(((struct __pyx_obj_7opendht_ListenToken *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_11ListenToken_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_ListenToken *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._h,self._t cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._h,self._t cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._h,self._t cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._h,self._t cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.ListenToken.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":412
 * cdef class Identity(object):
 *     cdef cpp.Identity _id
 *     def __init__(self, PrivateKey k = None, Certificate c = None):             # <<<<<<<<<<<<<<
 *         if k:
 *             self._id.first = k._key
 */

/* Python wrapper */
static int __pyx_pw_7opendht_8Identity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opendht_8Identity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opendht_PrivateKey *__pyx_v_k = 0;
  struct __pyx_obj_7opendht_Certificate *__pyx_v_c = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_c,0};
    PyObject* values[2] = {0,0};
    values[0] = (PyObject *)((struct __pyx_obj_7opendht_PrivateKey *)Py_None);
    values[1] = (PyObject *)((struct __pyx_obj_7opendht_Certificate *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_k);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 412, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = ((struct __pyx_obj_7opendht_PrivateKey *)values[0]);
    __pyx_v_c = ((struct __pyx_obj_7opendht_Certificate *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 412, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Identity.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_k), __pyx_ptype_7opendht_PrivateKey, 1, "k", 0))) __PYX_ERR(0, 412, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), __pyx_ptype_7opendht_Certificate, 1, "c", 0))) __PYX_ERR(0, 412, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_8Identity___init__(((struct __pyx_obj_7opendht_Identity *)__pyx_v_self), __pyx_v_k, __pyx_v_c);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_8Identity___init__(struct __pyx_obj_7opendht_Identity *__pyx_v_self, struct __pyx_obj_7opendht_PrivateKey *__pyx_v_k, struct __pyx_obj_7opendht_Certificate *__pyx_v_c) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::shared_ptr<dht::crypto::PrivateKey>  __pyx_t_2;
  std::shared_ptr<dht::crypto::Certificate>  __pyx_t_3;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "opendht.pyx":413
 *     cdef cpp.Identity _id
 *     def __init__(self, PrivateKey k = None, Certificate c = None):
 *         if k:             # <<<<<<<<<<<<<<
 *             self._id.first = k._key
 *         if c:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_k)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 413, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "opendht.pyx":414
 *     def __init__(self, PrivateKey k = None, Certificate c = None):
 *         if k:
 *             self._id.first = k._key             # <<<<<<<<<<<<<<
 *         if c:
 *             self._id.second = c._cert
 */
    __pyx_t_2 = __pyx_v_k->_key;
    __pyx_v_self->_id.first = __pyx_t_2;

    /* "opendht.pyx":413
 *     cdef cpp.Identity _id
 *     def __init__(self, PrivateKey k = None, Certificate c = None):
 *         if k:             # <<<<<<<<<<<<<<
 *             self._id.first = k._key
 *         if c:
 */
  }

  /* "opendht.pyx":415
 *         if k:
 *             self._id.first = k._key
 *         if c:             # <<<<<<<<<<<<<<
 *             self._id.second = c._cert
 *     @staticmethod
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_c)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 415, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "opendht.pyx":416
 *             self._id.first = k._key
 *         if c:
 *             self._id.second = c._cert             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     def generate(str name = "pydht", Identity ca = Identity(), unsigned bits = 4096):
 */
    __pyx_t_3 = __pyx_v_c->_cert;
    __pyx_v_self->_id.second = __pyx_t_3;

    /* "opendht.pyx":415
 *         if k:
 *             self._id.first = k._key
 *         if c:             # <<<<<<<<<<<<<<
 *             self._id.second = c._cert
 *     @staticmethod
 */
  }

  /* "opendht.pyx":412
 * cdef class Identity(object):
 *     cdef cpp.Identity _id
 *     def __init__(self, PrivateKey k = None, Certificate c = None):             # <<<<<<<<<<<<<<
 *         if k:
 *             self._id.first = k._key
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("opendht.Identity.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":418
 *             self._id.second = c._cert
 *     @staticmethod
 *     def generate(str name = "pydht", Identity ca = Identity(), unsigned bits = 4096):             # <<<<<<<<<<<<<<
 *         i = Identity()
 *         i._id = cpp.generateIdentity(name.encode(), ca._id, bits)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8Identity_3generate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opendht_8Identity_3generate = {"generate", (PyCFunction)__pyx_pw_7opendht_8Identity_3generate, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opendht_8Identity_3generate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  struct __pyx_obj_7opendht_Identity *__pyx_v_ca = 0;
  unsigned int __pyx_v_bits;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name_2,&__pyx_n_s_ca,&__pyx_n_s_bits,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject*)__pyx_n_u_pydht);
    values[1] = (PyObject *)__pyx_k__37;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name_2);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ca);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bits);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "generate") < 0)) __PYX_ERR(0, 418, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = ((PyObject*)values[0]);
    __pyx_v_ca = ((struct __pyx_obj_7opendht_Identity *)values[1]);
    if (values[2]) {
      __pyx_v_bits = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_bits == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 418, __pyx_L3_error)
    } else {
      __pyx_v_bits = ((unsigned int)0x1000);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 418, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Identity.generate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyUnicode_Type), 1, "name", 1))) __PYX_ERR(0, 418, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ca), __pyx_ptype_7opendht_Identity, 1, "ca", 0))) __PYX_ERR(0, 418, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_8Identity_2generate(__pyx_v_name, __pyx_v_ca, __pyx_v_bits);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8Identity_2generate(PyObject *__pyx_v_name, struct __pyx_obj_7opendht_Identity *__pyx_v_ca, unsigned int __pyx_v_bits) {
  struct __pyx_obj_7opendht_Identity *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  __Pyx_RefNannySetupContext("generate", 0);

  /* "opendht.pyx":419
 *     @staticmethod
 *     def generate(str name = "pydht", Identity ca = Identity(), unsigned bits = 4096):
 *         i = Identity()             # <<<<<<<<<<<<<<
 *         i._id = cpp.generateIdentity(name.encode(), ca._id, bits)
 *         return i
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_Identity), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_i = ((struct __pyx_obj_7opendht_Identity *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":420
 *     def generate(str name = "pydht", Identity ca = Identity(), unsigned bits = 4096):
 *         i = Identity()
 *         i._id = cpp.generateIdentity(name.encode(), ca._id, bits)             # <<<<<<<<<<<<<<
 *         return i
 *     property publickey:
 */
  if (unlikely(__pyx_v_name == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "encode");
    __PYX_ERR(0, 420, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsEncodedString(__pyx_v_name, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_i->_id = dht::crypto::generateIdentity(__pyx_t_2, __pyx_v_ca->_id, __pyx_v_bits);

  /* "opendht.pyx":421
 *         i = Identity()
 *         i._id = cpp.generateIdentity(name.encode(), ca._id, bits)
 *         return i             # <<<<<<<<<<<<<<
 *     property publickey:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_i));
  __pyx_r = ((PyObject *)__pyx_v_i);
  goto __pyx_L0;

  /* "opendht.pyx":418
 *             self._id.second = c._cert
 *     @staticmethod
 *     def generate(str name = "pydht", Identity ca = Identity(), unsigned bits = 4096):             # <<<<<<<<<<<<<<
 *         i = Identity()
 *         i._id = cpp.generateIdentity(name.encode(), ca._id, bits)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Identity.generate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":423
 *         return i
 *     property publickey:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             k = PublicKey()
 *             k._key = self._id.first.get().getPublicKey()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8Identity_9publickey_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_8Identity_9publickey_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8Identity_9publickey___get__(((struct __pyx_obj_7opendht_Identity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8Identity_9publickey___get__(struct __pyx_obj_7opendht_Identity *__pyx_v_self) {
  struct __pyx_obj_7opendht_PublicKey *__pyx_v_k = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "opendht.pyx":424
 *     property publickey:
 *         def __get__(self):
 *             k = PublicKey()             # <<<<<<<<<<<<<<
 *             k._key = self._id.first.get().getPublicKey()
 *             return k
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_PublicKey), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_k = ((struct __pyx_obj_7opendht_PublicKey *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":425
 *         def __get__(self):
 *             k = PublicKey()
 *             k._key = self._id.first.get().getPublicKey()             # <<<<<<<<<<<<<<
 *             return k
 *     property certificate:
 */
  __pyx_v_k->_key = __pyx_v_self->_id.first.get()->getPublicKey();

  /* "opendht.pyx":426
 *             k = PublicKey()
 *             k._key = self._id.first.get().getPublicKey()
 *             return k             # <<<<<<<<<<<<<<
 *     property certificate:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_k));
  __pyx_r = ((PyObject *)__pyx_v_k);
  goto __pyx_L0;

  /* "opendht.pyx":423
 *         return i
 *     property publickey:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             k = PublicKey()
 *             k._key = self._id.first.get().getPublicKey()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Identity.publickey.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_k);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":428
 *             return k
 *     property certificate:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             c = Certificate()
 *             c._cert = self._id.second
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8Identity_11certificate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_8Identity_11certificate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8Identity_11certificate___get__(((struct __pyx_obj_7opendht_Identity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8Identity_11certificate___get__(struct __pyx_obj_7opendht_Identity *__pyx_v_self) {
  struct __pyx_obj_7opendht_Certificate *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::shared_ptr<dht::crypto::Certificate>  __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "opendht.pyx":429
 *     property certificate:
 *         def __get__(self):
 *             c = Certificate()             # <<<<<<<<<<<<<<
 *             c._cert = self._id.second
 *             return c
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_Certificate), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_c = ((struct __pyx_obj_7opendht_Certificate *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":430
 *         def __get__(self):
 *             c = Certificate()
 *             c._cert = self._id.second             # <<<<<<<<<<<<<<
 *             return c
 *     property key:
 */
  __pyx_t_2 = __pyx_v_self->_id.second;
  __pyx_v_c->_cert = __pyx_t_2;

  /* "opendht.pyx":431
 *             c = Certificate()
 *             c._cert = self._id.second
 *             return c             # <<<<<<<<<<<<<<
 *     property key:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "opendht.pyx":428
 *             return k
 *     property certificate:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             c = Certificate()
 *             c._cert = self._id.second
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Identity.certificate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":433
 *             return c
 *     property key:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             k = PrivateKey()
 *             k._key = self._id.first
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8Identity_3key_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_8Identity_3key_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8Identity_3key___get__(((struct __pyx_obj_7opendht_Identity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8Identity_3key___get__(struct __pyx_obj_7opendht_Identity *__pyx_v_self) {
  struct __pyx_obj_7opendht_PrivateKey *__pyx_v_k = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::shared_ptr<dht::crypto::PrivateKey>  __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "opendht.pyx":434
 *     property key:
 *         def __get__(self):
 *             k = PrivateKey()             # <<<<<<<<<<<<<<
 *             k._key = self._id.first
 *             return k
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_PrivateKey), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_k = ((struct __pyx_obj_7opendht_PrivateKey *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":435
 *         def __get__(self):
 *             k = PrivateKey()
 *             k._key = self._id.first             # <<<<<<<<<<<<<<
 *             return k
 * 
 */
  __pyx_t_2 = __pyx_v_self->_id.first;
  __pyx_v_k->_key = __pyx_t_2;

  /* "opendht.pyx":436
 *             k = PrivateKey()
 *             k._key = self._id.first
 *             return k             # <<<<<<<<<<<<<<
 * 
 * cdef class DhtConfig(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_k));
  __pyx_r = ((PyObject *)__pyx_v_k);
  goto __pyx_L0;

  /* "opendht.pyx":433
 *             return c
 *     property key:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             k = PrivateKey()
 *             k._key = self._id.first
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Identity.key.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_k);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._id cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8Identity_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_8Identity_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8Identity_4__reduce_cython__(((struct __pyx_obj_7opendht_Identity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8Identity_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Identity *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._id cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._id cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._id cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Identity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._id cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._id cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_8Identity_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_8Identity_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_8Identity_6__setstate_cython__(((struct __pyx_obj_7opendht_Identity *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_8Identity_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Identity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._id cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._id cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._id cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._id cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Identity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":440
 * cdef class DhtConfig(object):
 *     cdef cpp.DhtRunnerConfig _config
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self._config = cpp.DhtRunnerConfig()
 *         self._config.threaded = True;
 */

/* Python wrapper */
static int __pyx_pw_7opendht_9DhtConfig_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opendht_9DhtConfig_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_7opendht_9DhtConfig___init__(((struct __pyx_obj_7opendht_DhtConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_9DhtConfig___init__(struct __pyx_obj_7opendht_DhtConfig *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_11opendht_cpp_DhtRunnerConfig __pyx_t_1;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "opendht.pyx":441
 *     cdef cpp.DhtRunnerConfig _config
 *     def __init__(self):
 *         self._config = cpp.DhtRunnerConfig()             # <<<<<<<<<<<<<<
 *         self._config.threaded = True;
 *     def setIdentity(self, Identity id):
 */
  try {
    __pyx_t_1 = __pyx_t_11opendht_cpp_DhtRunnerConfig();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 441, __pyx_L1_error)
  }
  __pyx_v_self->_config = __pyx_t_1;

  /* "opendht.pyx":442
 *     def __init__(self):
 *         self._config = cpp.DhtRunnerConfig()
 *         self._config.threaded = True;             # <<<<<<<<<<<<<<
 *     def setIdentity(self, Identity id):
 *         self._config.dht_config.id = id._id
 */
  __pyx_v_self->_config.threaded = 1;

  /* "opendht.pyx":440
 * cdef class DhtConfig(object):
 *     cdef cpp.DhtRunnerConfig _config
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self._config = cpp.DhtRunnerConfig()
 *         self._config.threaded = True;
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("opendht.DhtConfig.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":443
 *         self._config = cpp.DhtRunnerConfig()
 *         self._config.threaded = True;
 *     def setIdentity(self, Identity id):             # <<<<<<<<<<<<<<
 *         self._config.dht_config.id = id._id
 *     def setBootstrapMode(self, bool bootstrap):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtConfig_3setIdentity(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtConfig_3setIdentity(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setIdentity (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_id), __pyx_ptype_7opendht_Identity, 1, "id", 0))) __PYX_ERR(0, 443, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_9DhtConfig_2setIdentity(((struct __pyx_obj_7opendht_DhtConfig *)__pyx_v_self), ((struct __pyx_obj_7opendht_Identity *)__pyx_v_id));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtConfig_2setIdentity(struct __pyx_obj_7opendht_DhtConfig *__pyx_v_self, struct __pyx_obj_7opendht_Identity *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  dht::crypto::Identity __pyx_t_1;
  __Pyx_RefNannySetupContext("setIdentity", 0);

  /* "opendht.pyx":444
 *         self._config.threaded = True;
 *     def setIdentity(self, Identity id):
 *         self._config.dht_config.id = id._id             # <<<<<<<<<<<<<<
 *     def setBootstrapMode(self, bool bootstrap):
 *         self._config.dht_config.node_config.is_bootstrap = bootstrap
 */
  __pyx_t_1 = __pyx_v_id->_id;
  __pyx_v_self->_config.dht_config.id = __pyx_t_1;

  /* "opendht.pyx":443
 *         self._config = cpp.DhtRunnerConfig()
 *         self._config.threaded = True;
 *     def setIdentity(self, Identity id):             # <<<<<<<<<<<<<<
 *         self._config.dht_config.id = id._id
 *     def setBootstrapMode(self, bool bootstrap):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":445
 *     def setIdentity(self, Identity id):
 *         self._config.dht_config.id = id._id
 *     def setBootstrapMode(self, bool bootstrap):             # <<<<<<<<<<<<<<
 *         self._config.dht_config.node_config.is_bootstrap = bootstrap
 *     def setNodeId(self, InfoHash id):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtConfig_5setBootstrapMode(PyObject *__pyx_v_self, PyObject *__pyx_arg_bootstrap); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtConfig_5setBootstrapMode(PyObject *__pyx_v_self, PyObject *__pyx_arg_bootstrap) {
  bool __pyx_v_bootstrap;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setBootstrapMode (wrapper)", 0);
  assert(__pyx_arg_bootstrap); {
    __pyx_v_bootstrap = __Pyx_PyObject_IsTrue(__pyx_arg_bootstrap); if (unlikely((__pyx_v_bootstrap == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 445, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.DhtConfig.setBootstrapMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_9DhtConfig_4setBootstrapMode(((struct __pyx_obj_7opendht_DhtConfig *)__pyx_v_self), ((bool)__pyx_v_bootstrap));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtConfig_4setBootstrapMode(struct __pyx_obj_7opendht_DhtConfig *__pyx_v_self, bool __pyx_v_bootstrap) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setBootstrapMode", 0);

  /* "opendht.pyx":446
 *         self._config.dht_config.id = id._id
 *     def setBootstrapMode(self, bool bootstrap):
 *         self._config.dht_config.node_config.is_bootstrap = bootstrap             # <<<<<<<<<<<<<<
 *     def setNodeId(self, InfoHash id):
 *         self._config.dht_config.node_config.node_id = id._infohash
 */
  __pyx_v_self->_config.dht_config.node_config.is_bootstrap = __pyx_v_bootstrap;

  /* "opendht.pyx":445
 *     def setIdentity(self, Identity id):
 *         self._config.dht_config.id = id._id
 *     def setBootstrapMode(self, bool bootstrap):             # <<<<<<<<<<<<<<
 *         self._config.dht_config.node_config.is_bootstrap = bootstrap
 *     def setNodeId(self, InfoHash id):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":447
 *     def setBootstrapMode(self, bool bootstrap):
 *         self._config.dht_config.node_config.is_bootstrap = bootstrap
 *     def setNodeId(self, InfoHash id):             # <<<<<<<<<<<<<<
 *         self._config.dht_config.node_config.node_id = id._infohash
 *     def setNetwork(self, unsigned netid):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtConfig_7setNodeId(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtConfig_7setNodeId(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNodeId (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_id), __pyx_ptype_7opendht_InfoHash, 1, "id", 0))) __PYX_ERR(0, 447, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_9DhtConfig_6setNodeId(((struct __pyx_obj_7opendht_DhtConfig *)__pyx_v_self), ((struct __pyx_obj_7opendht_InfoHash *)__pyx_v_id));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtConfig_6setNodeId(struct __pyx_obj_7opendht_DhtConfig *__pyx_v_self, struct __pyx_obj_7opendht_InfoHash *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  dht::InfoHash __pyx_t_1;
  __Pyx_RefNannySetupContext("setNodeId", 0);

  /* "opendht.pyx":448
 *         self._config.dht_config.node_config.is_bootstrap = bootstrap
 *     def setNodeId(self, InfoHash id):
 *         self._config.dht_config.node_config.node_id = id._infohash             # <<<<<<<<<<<<<<
 *     def setNetwork(self, unsigned netid):
 *         self._config.dht_config.node_config.network = netid
 */
  __pyx_t_1 = __pyx_v_id->_infohash;
  __pyx_v_self->_config.dht_config.node_config.node_id = __pyx_t_1;

  /* "opendht.pyx":447
 *     def setBootstrapMode(self, bool bootstrap):
 *         self._config.dht_config.node_config.is_bootstrap = bootstrap
 *     def setNodeId(self, InfoHash id):             # <<<<<<<<<<<<<<
 *         self._config.dht_config.node_config.node_id = id._infohash
 *     def setNetwork(self, unsigned netid):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":449
 *     def setNodeId(self, InfoHash id):
 *         self._config.dht_config.node_config.node_id = id._infohash
 *     def setNetwork(self, unsigned netid):             # <<<<<<<<<<<<<<
 *         self._config.dht_config.node_config.network = netid
 *     def setMaintainStorage(self, bool maintain_storage):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtConfig_9setNetwork(PyObject *__pyx_v_self, PyObject *__pyx_arg_netid); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtConfig_9setNetwork(PyObject *__pyx_v_self, PyObject *__pyx_arg_netid) {
  unsigned int __pyx_v_netid;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNetwork (wrapper)", 0);
  assert(__pyx_arg_netid); {
    __pyx_v_netid = __Pyx_PyInt_As_unsigned_int(__pyx_arg_netid); if (unlikely((__pyx_v_netid == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.DhtConfig.setNetwork", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_9DhtConfig_8setNetwork(((struct __pyx_obj_7opendht_DhtConfig *)__pyx_v_self), ((unsigned int)__pyx_v_netid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtConfig_8setNetwork(struct __pyx_obj_7opendht_DhtConfig *__pyx_v_self, unsigned int __pyx_v_netid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNetwork", 0);

  /* "opendht.pyx":450
 *         self._config.dht_config.node_config.node_id = id._infohash
 *     def setNetwork(self, unsigned netid):
 *         self._config.dht_config.node_config.network = netid             # <<<<<<<<<<<<<<
 *     def setMaintainStorage(self, bool maintain_storage):
 *         self._config.dht_config.node_config.maintain_storage = maintain_storage
 */
  __pyx_v_self->_config.dht_config.node_config.network = __pyx_v_netid;

  /* "opendht.pyx":449
 *     def setNodeId(self, InfoHash id):
 *         self._config.dht_config.node_config.node_id = id._infohash
 *     def setNetwork(self, unsigned netid):             # <<<<<<<<<<<<<<
 *         self._config.dht_config.node_config.network = netid
 *     def setMaintainStorage(self, bool maintain_storage):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":451
 *     def setNetwork(self, unsigned netid):
 *         self._config.dht_config.node_config.network = netid
 *     def setMaintainStorage(self, bool maintain_storage):             # <<<<<<<<<<<<<<
 *         self._config.dht_config.node_config.maintain_storage = maintain_storage
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtConfig_11setMaintainStorage(PyObject *__pyx_v_self, PyObject *__pyx_arg_maintain_storage); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtConfig_11setMaintainStorage(PyObject *__pyx_v_self, PyObject *__pyx_arg_maintain_storage) {
  bool __pyx_v_maintain_storage;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMaintainStorage (wrapper)", 0);
  assert(__pyx_arg_maintain_storage); {
    __pyx_v_maintain_storage = __Pyx_PyObject_IsTrue(__pyx_arg_maintain_storage); if (unlikely((__pyx_v_maintain_storage == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 451, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.DhtConfig.setMaintainStorage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_9DhtConfig_10setMaintainStorage(((struct __pyx_obj_7opendht_DhtConfig *)__pyx_v_self), ((bool)__pyx_v_maintain_storage));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtConfig_10setMaintainStorage(struct __pyx_obj_7opendht_DhtConfig *__pyx_v_self, bool __pyx_v_maintain_storage) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMaintainStorage", 0);

  /* "opendht.pyx":452
 *         self._config.dht_config.node_config.network = netid
 *     def setMaintainStorage(self, bool maintain_storage):
 *         self._config.dht_config.node_config.maintain_storage = maintain_storage             # <<<<<<<<<<<<<<
 * 
 * cdef class DhtRunner(_WithID):
 */
  __pyx_v_self->_config.dht_config.node_config.maintain_storage = __pyx_v_maintain_storage;

  /* "opendht.pyx":451
 *     def setNetwork(self, unsigned netid):
 *         self._config.dht_config.node_config.network = netid
 *     def setMaintainStorage(self, bool maintain_storage):             # <<<<<<<<<<<<<<
 *         self._config.dht_config.node_config.maintain_storage = maintain_storage
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._config cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtConfig_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtConfig_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9DhtConfig_12__reduce_cython__(((struct __pyx_obj_7opendht_DhtConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtConfig_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_DhtConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._config cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._config cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._config cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.DhtConfig.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._config cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._config cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtConfig_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtConfig_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9DhtConfig_14__setstate_cython__(((struct __pyx_obj_7opendht_DhtConfig *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtConfig_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_DhtConfig *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._config cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._config cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._config cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._config cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.DhtConfig.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":456
 * cdef class DhtRunner(_WithID):
 *     cdef cpp.shared_ptr[cpp.DhtRunner] thisptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.reset(new cpp.DhtRunner())
 *     def getId(self):
 */

/* Python wrapper */
static int __pyx_pw_7opendht_9DhtRunner_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opendht_9DhtRunner_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7opendht_9DhtRunner___cinit__(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_9DhtRunner___cinit__(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  dht::DhtRunner *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "opendht.pyx":457
 *     cdef cpp.shared_ptr[cpp.DhtRunner] thisptr
 *     def __cinit__(self):
 *         self.thisptr.reset(new cpp.DhtRunner())             # <<<<<<<<<<<<<<
 *     def getId(self):
 *         h = InfoHash()
 */
  try {
    __pyx_t_1 = new dht::DhtRunner();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 457, __pyx_L1_error)
  }
  __pyx_v_self->thisptr.reset(__pyx_t_1);

  /* "opendht.pyx":456
 * cdef class DhtRunner(_WithID):
 *     cdef cpp.shared_ptr[cpp.DhtRunner] thisptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.reset(new cpp.DhtRunner())
 *     def getId(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("opendht.DhtRunner.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":458
 *     def __cinit__(self):
 *         self.thisptr.reset(new cpp.DhtRunner())
 *     def getId(self):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         if self.thisptr:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_3getId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_3getId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getId (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_2getId(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_2getId(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self) {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_h = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  bool __pyx_t_2;
  __Pyx_RefNannySetupContext("getId", 0);

  /* "opendht.pyx":459
 *         self.thisptr.reset(new cpp.DhtRunner())
 *     def getId(self):
 *         h = InfoHash()             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             h._infohash = self.thisptr.get().getId()
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_InfoHash), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_h = ((struct __pyx_obj_7opendht_InfoHash *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":460
 *     def getId(self):
 *         h = InfoHash()
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             h._infohash = self.thisptr.get().getId()
 *         return h
 */
  __pyx_t_2 = __pyx_v_self->thisptr.operator bool();
  if (__pyx_t_2) {

    /* "opendht.pyx":461
 *         h = InfoHash()
 *         if self.thisptr:
 *             h._infohash = self.thisptr.get().getId()             # <<<<<<<<<<<<<<
 *         return h
 *     def getNodeId(self):
 */
    __pyx_v_h->_infohash = __pyx_v_self->thisptr.get()->getId();

    /* "opendht.pyx":460
 *     def getId(self):
 *         h = InfoHash()
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             h._infohash = self.thisptr.get().getId()
 *         return h
 */
  }

  /* "opendht.pyx":462
 *         if self.thisptr:
 *             h._infohash = self.thisptr.get().getId()
 *         return h             # <<<<<<<<<<<<<<
 *     def getNodeId(self):
 *         return self.thisptr.get().getNodeId().toString()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  __pyx_r = ((PyObject *)__pyx_v_h);
  goto __pyx_L0;

  /* "opendht.pyx":458
 *     def __cinit__(self):
 *         self.thisptr.reset(new cpp.DhtRunner())
 *     def getId(self):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         if self.thisptr:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.DhtRunner.getId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":463
 *             h._infohash = self.thisptr.get().getId()
 *         return h
 *     def getNodeId(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.get().getNodeId().toString()
 *     def ping(self, SockAddr addr, done_cb=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_5getNodeId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_5getNodeId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeId (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_4getNodeId(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_4getNodeId(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNodeId", 0);

  /* "opendht.pyx":464
 *         return h
 *     def getNodeId(self):
 *         return self.thisptr.get().getNodeId().toString()             # <<<<<<<<<<<<<<
 *     def ping(self, SockAddr addr, done_cb=None):
 *         if done_cb:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr.get()->getNodeId().toString()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":463
 *             h._infohash = self.thisptr.get().getId()
 *         return h
 *     def getNodeId(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.get().getNodeId().toString()
 *     def ping(self, SockAddr addr, done_cb=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.DhtRunner.getNodeId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":465
 *     def getNodeId(self):
 *         return self.thisptr.get().getNodeId().toString()
 *     def ping(self, SockAddr addr, done_cb=None):             # <<<<<<<<<<<<<<
 *         if done_cb:
 *             cb_obj = {'done':done_cb}
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_7ping(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_7ping(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opendht_SockAddr *__pyx_v_addr = 0;
  PyObject *__pyx_v_done_cb = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ping (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_addr,&__pyx_n_s_done_cb,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_addr)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_done_cb);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ping") < 0)) __PYX_ERR(0, 465, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_addr = ((struct __pyx_obj_7opendht_SockAddr *)values[0]);
    __pyx_v_done_cb = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ping", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 465, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.DhtRunner.ping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_addr), __pyx_ptype_7opendht_SockAddr, 1, "addr", 0))) __PYX_ERR(0, 465, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_6ping(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self), __pyx_v_addr, __pyx_v_done_cb);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":474
 *             pending = 0
 *             ok = False
 *             def tmp_done(ok_ret):             # <<<<<<<<<<<<<<
 *                 nonlocal pending, ok, lock
 *                 with lock:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_4ping_1tmp_done(PyObject *__pyx_self, PyObject *__pyx_v_ok_ret); /*proto*/
static PyMethodDef __pyx_mdef_7opendht_9DhtRunner_4ping_1tmp_done = {"tmp_done", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_4ping_1tmp_done, METH_O, 0};
static PyObject *__pyx_pw_7opendht_9DhtRunner_4ping_1tmp_done(PyObject *__pyx_self, PyObject *__pyx_v_ok_ret) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tmp_done (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_4ping_tmp_done(__pyx_self, ((PyObject *)__pyx_v_ok_ret));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_4ping_tmp_done(PyObject *__pyx_self, PyObject *__pyx_v_ok_ret) {
  struct __pyx_obj_7opendht___pyx_scope_struct__ping *__pyx_cur_scope;
  struct __pyx_obj_7opendht___pyx_scope_struct__ping *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("tmp_done", 0);
  __pyx_outer_scope = (struct __pyx_obj_7opendht___pyx_scope_struct__ping *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "opendht.pyx":476
 *             def tmp_done(ok_ret):
 *                 nonlocal pending, ok, lock
 *                 with lock:             # <<<<<<<<<<<<<<
 *                     ok = ok_ret
 *                     pending -= 1
 */
  /*with:*/ {
    if (unlikely(!__pyx_cur_scope->__pyx_v_lock)) { __Pyx_RaiseClosureNameError("lock"); __PYX_ERR(0, 476, __pyx_L1_error) }
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_exit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 476, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 476, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 476, __pyx_L3_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_5);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        /*try:*/ {

          /* "opendht.pyx":477
 *                 nonlocal pending, ok, lock
 *                 with lock:
 *                     ok = ok_ret             # <<<<<<<<<<<<<<
 *                     pending -= 1
 *                     lock.notify()
 */
          __Pyx_INCREF(__pyx_v_ok_ret);
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ok);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ok, __pyx_v_ok_ret);
          __Pyx_GIVEREF(__pyx_v_ok_ret);

          /* "opendht.pyx":478
 *                 with lock:
 *                     ok = ok_ret
 *                     pending -= 1             # <<<<<<<<<<<<<<
 *                     lock.notify()
 *             with lock:
 */
          if (unlikely(!__pyx_cur_scope->__pyx_v_pending)) { __Pyx_RaiseClosureNameError("pending"); __PYX_ERR(0, 478, __pyx_L7_error) }
          __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_cur_scope->__pyx_v_pending, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 478, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_pending);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_pending, __pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_2);
          __pyx_t_2 = 0;

          /* "opendht.pyx":479
 *                     ok = ok_ret
 *                     pending -= 1
 *                     lock.notify()             # <<<<<<<<<<<<<<
 *             with lock:
 *                 pending += 1
 */
          if (unlikely(!__pyx_cur_scope->__pyx_v_lock)) { __Pyx_RaiseClosureNameError("lock"); __PYX_ERR(0, 479, __pyx_L7_error) }
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_notify); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          if (__pyx_t_4) {
            __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 479, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          } else {
            __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 479, __pyx_L7_error)
          }
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "opendht.pyx":476
 *             def tmp_done(ok_ret):
 *                 nonlocal pending, ok, lock
 *                 with lock:             # <<<<<<<<<<<<<<
 *                     ok = ok_ret
 *                     pending -= 1
 */
        }
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L12_try_end;
        __pyx_L7_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("opendht.DhtRunner.ping.tmp_done", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4) < 0) __PYX_ERR(0, 476, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 476, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 476, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (__pyx_t_10 < 0) __PYX_ERR(0, 476, __pyx_L9_except_error)
          __pyx_t_11 = ((!(__pyx_t_10 != 0)) != 0);
          if (__pyx_t_11) {
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_XGIVEREF(__pyx_t_4);
            __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_3, __pyx_t_4);
            __pyx_t_2 = 0; __pyx_t_3 = 0; __pyx_t_4 = 0; 
            __PYX_ERR(0, 476, __pyx_L9_except_error)
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
        __pyx_L12_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_1) {
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__42, NULL);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 476, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L16;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L1_error;
    __pyx_L16:;
  }

  /* "opendht.pyx":474
 *             pending = 0
 *             ok = False
 *             def tmp_done(ok_ret):             # <<<<<<<<<<<<<<
 *                 nonlocal pending, ok, lock
 *                 with lock:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("opendht.DhtRunner.ping.tmp_done", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":465
 *     def getNodeId(self):
 *         return self.thisptr.get().getNodeId().toString()
 *     def ping(self, SockAddr addr, done_cb=None):             # <<<<<<<<<<<<<<
 *         if done_cb:
 *             cb_obj = {'done':done_cb}
 */

static PyObject *__pyx_pf_7opendht_9DhtRunner_6ping(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, struct __pyx_obj_7opendht_SockAddr *__pyx_v_addr, PyObject *__pyx_v_done_cb) {
  struct __pyx_obj_7opendht___pyx_scope_struct__ping *__pyx_cur_scope;
  PyObject *__pyx_v_cb_obj = NULL;
  PyObject *__pyx_v_tmp_done = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("ping", 0);
  __pyx_cur_scope = (struct __pyx_obj_7opendht___pyx_scope_struct__ping *)__pyx_tp_new_7opendht___pyx_scope_struct__ping(__pyx_ptype_7opendht___pyx_scope_struct__ping, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7opendht___pyx_scope_struct__ping *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 465, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "opendht.pyx":466
 *         return self.thisptr.get().getNodeId().toString()
 *     def ping(self, SockAddr addr, done_cb=None):
 *         if done_cb:             # <<<<<<<<<<<<<<
 *             cb_obj = {'done':done_cb}
 *             ref.Py_INCREF(cb_obj)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_done_cb); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 466, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "opendht.pyx":467
 *     def ping(self, SockAddr addr, done_cb=None):
 *         if done_cb:
 *             cb_obj = {'done':done_cb}             # <<<<<<<<<<<<<<
 *             ref.Py_INCREF(cb_obj)
 *             self.thisptr.get().bootstrap(addr._addr, cpp.bindDoneCbSimple(done_callback_simple, <void*>cb_obj))
 */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_done, __pyx_v_done_cb) < 0) __PYX_ERR(0, 467, __pyx_L1_error)
    __pyx_v_cb_obj = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "opendht.pyx":468
 *         if done_cb:
 *             cb_obj = {'done':done_cb}
 *             ref.Py_INCREF(cb_obj)             # <<<<<<<<<<<<<<
 *             self.thisptr.get().bootstrap(addr._addr, cpp.bindDoneCbSimple(done_callback_simple, <void*>cb_obj))
 *         else:
 */
    Py_INCREF(__pyx_v_cb_obj);

    /* "opendht.pyx":469
 *             cb_obj = {'done':done_cb}
 *             ref.Py_INCREF(cb_obj)
 *             self.thisptr.get().bootstrap(addr._addr, cpp.bindDoneCbSimple(done_callback_simple, <void*>cb_obj))             # <<<<<<<<<<<<<<
 *         else:
 *             lock = threading.Condition()
 */
    __pyx_v_self->thisptr.get()->bootstrap(__pyx_v_addr->_addr, dht::bindDoneCbSimple(__pyx_f_7opendht_done_callback_simple, ((void *)__pyx_v_cb_obj)));

    /* "opendht.pyx":466
 *         return self.thisptr.get().getNodeId().toString()
 *     def ping(self, SockAddr addr, done_cb=None):
 *         if done_cb:             # <<<<<<<<<<<<<<
 *             cb_obj = {'done':done_cb}
 *             ref.Py_INCREF(cb_obj)
 */
    goto __pyx_L3;
  }

  /* "opendht.pyx":471
 *             self.thisptr.get().bootstrap(addr._addr, cpp.bindDoneCbSimple(done_callback_simple, <void*>cb_obj))
 *         else:
 *             lock = threading.Condition()             # <<<<<<<<<<<<<<
 *             pending = 0
 *             ok = False
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_threading); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Condition); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 471, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 471, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_v_lock = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "opendht.pyx":472
 *         else:
 *             lock = threading.Condition()
 *             pending = 0             # <<<<<<<<<<<<<<
 *             ok = False
 *             def tmp_done(ok_ret):
 */
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    __pyx_cur_scope->__pyx_v_pending = __pyx_int_0;

    /* "opendht.pyx":473
 *             lock = threading.Condition()
 *             pending = 0
 *             ok = False             # <<<<<<<<<<<<<<
 *             def tmp_done(ok_ret):
 *                 nonlocal pending, ok, lock
 */
    __Pyx_INCREF(Py_False);
    __Pyx_GIVEREF(Py_False);
    __pyx_cur_scope->__pyx_v_ok = Py_False;

    /* "opendht.pyx":474
 *             pending = 0
 *             ok = False
 *             def tmp_done(ok_ret):             # <<<<<<<<<<<<<<
 *                 nonlocal pending, ok, lock
 *                 with lock:
 */
    __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7opendht_9DhtRunner_4ping_1tmp_done, 0, __pyx_n_s_ping_locals_tmp_done, ((PyObject*)__pyx_cur_scope), __pyx_n_s_opendht, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_tmp_done = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "opendht.pyx":480
 *                     pending -= 1
 *                     lock.notify()
 *             with lock:             # <<<<<<<<<<<<<<
 *                 pending += 1
 *                 self.ping(addr, done_cb=tmp_done)
 */
    /*with:*/ {
      __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_exit); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 480, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 480, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (__pyx_t_3) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 480, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 480, __pyx_L4_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
          __Pyx_XGOTREF(__pyx_t_6);
          __Pyx_XGOTREF(__pyx_t_7);
          __Pyx_XGOTREF(__pyx_t_8);
          /*try:*/ {

            /* "opendht.pyx":481
 *                     lock.notify()
 *             with lock:
 *                 pending += 1             # <<<<<<<<<<<<<<
 *                 self.ping(addr, done_cb=tmp_done)
 *                 while pending > 0:
 */
            __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_pending, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 481, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_pending);
            __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_pending, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            __pyx_t_2 = 0;

            /* "opendht.pyx":482
 *             with lock:
 *                 pending += 1
 *                 self.ping(addr, done_cb=tmp_done)             # <<<<<<<<<<<<<<
 *                 while pending > 0:
 *                     lock.wait()
 */
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ping); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 482, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 482, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_INCREF(((PyObject *)__pyx_v_addr));
            __Pyx_GIVEREF(((PyObject *)__pyx_v_addr));
            PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_addr));
            __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 482, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_3);
            if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_done_cb, __pyx_v_tmp_done) < 0) __PYX_ERR(0, 482, __pyx_L8_error)
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 482, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

            /* "opendht.pyx":483
 *                 pending += 1
 *                 self.ping(addr, done_cb=tmp_done)
 *                 while pending > 0:             # <<<<<<<<<<<<<<
 *                     lock.wait()
 *             return ok
 */
            while (1) {
              __pyx_t_9 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_pending, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 483, __pyx_L8_error)
              __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 483, __pyx_L8_error)
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              if (!__pyx_t_1) break;

              /* "opendht.pyx":484
 *                 self.ping(addr, done_cb=tmp_done)
 *                 while pending > 0:
 *                     lock.wait()             # <<<<<<<<<<<<<<
 *             return ok
 *     def bootstrap(self, str host, str port=None):
 */
              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_wait); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 484, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_4 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                }
              }
              if (__pyx_t_4) {
                __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 484, __pyx_L8_error)
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else {
                __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 484, __pyx_L8_error)
              }
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            }

            /* "opendht.pyx":480
 *                     pending -= 1
 *                     lock.notify()
 *             with lock:             # <<<<<<<<<<<<<<
 *                 pending += 1
 *                 self.ping(addr, done_cb=tmp_done)
 */
          }
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          goto __pyx_L13_try_end;
          __pyx_L8_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("opendht.DhtRunner.ping", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_3, &__pyx_t_4) < 0) __PYX_ERR(0, 480, __pyx_L10_except_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_2 = PyTuple_Pack(3, __pyx_t_9, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 480, __pyx_L10_except_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 480, __pyx_L10_except_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (__pyx_t_1 < 0) __PYX_ERR(0, 480, __pyx_L10_except_error)
            __pyx_t_11 = ((!(__pyx_t_1 != 0)) != 0);
            if (__pyx_t_11) {
              __Pyx_GIVEREF(__pyx_t_9);
              __Pyx_GIVEREF(__pyx_t_3);
              __Pyx_XGIVEREF(__pyx_t_4);
              __Pyx_ErrRestoreWithState(__pyx_t_9, __pyx_t_3, __pyx_t_4);
              __pyx_t_9 = 0; __pyx_t_3 = 0; __pyx_t_4 = 0; 
              __PYX_ERR(0, 480, __pyx_L10_except_error)
            }
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            goto __pyx_L9_exception_handled;
          }
          __pyx_L10_except_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_6);
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
          goto __pyx_L1_error;
          __pyx_L9_exception_handled:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_6);
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
          __pyx_L13_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_5) {
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__45, NULL);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 480, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
          goto __pyx_L7;
        }
        __pyx_L7:;
      }
      goto __pyx_L19;
      __pyx_L4_error:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L1_error;
      __pyx_L19:;
    }

    /* "opendht.pyx":485
 *                 while pending > 0:
 *                     lock.wait()
 *             return ok             # <<<<<<<<<<<<<<
 *     def bootstrap(self, str host, str port=None):
 *         host_bytes = host.encode()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ok);
    __pyx_r = __pyx_cur_scope->__pyx_v_ok;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "opendht.pyx":465
 *     def getNodeId(self):
 *         return self.thisptr.get().getNodeId().toString()
 *     def ping(self, SockAddr addr, done_cb=None):             # <<<<<<<<<<<<<<
 *         if done_cb:
 *             cb_obj = {'done':done_cb}
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("opendht.DhtRunner.ping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cb_obj);
  __Pyx_XDECREF(__pyx_v_tmp_done);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":486
 *                     lock.wait()
 *             return ok
 *     def bootstrap(self, str host, str port=None):             # <<<<<<<<<<<<<<
 *         host_bytes = host.encode()
 *         port_bytes = port.encode() if port else b'4222'
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_9bootstrap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_9bootstrap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_host = 0;
  PyObject *__pyx_v_port = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bootstrap (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_host,&__pyx_n_s_port,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_host)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_port);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bootstrap") < 0)) __PYX_ERR(0, 486, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_host = ((PyObject*)values[0]);
    __pyx_v_port = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bootstrap", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 486, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.DhtRunner.bootstrap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_host), (&PyUnicode_Type), 1, "host", 1))) __PYX_ERR(0, 486, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_port), (&PyUnicode_Type), 1, "port", 1))) __PYX_ERR(0, 486, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_8bootstrap(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self), __pyx_v_host, __pyx_v_port);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_8bootstrap(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, PyObject *__pyx_v_host, PyObject *__pyx_v_port) {
  PyObject *__pyx_v_host_bytes = NULL;
  PyObject *__pyx_v_port_bytes = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  const char *__pyx_t_4;
  const char *__pyx_t_5;
  __Pyx_RefNannySetupContext("bootstrap", 0);

  /* "opendht.pyx":487
 *             return ok
 *     def bootstrap(self, str host, str port=None):
 *         host_bytes = host.encode()             # <<<<<<<<<<<<<<
 *         port_bytes = port.encode() if port else b'4222'
 *         self.thisptr.get().bootstrap(<cpp.const_char*>host_bytes, <cpp.const_char*>port_bytes)
 */
  if (unlikely(__pyx_v_host == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "encode");
    __PYX_ERR(0, 487, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsEncodedString(__pyx_v_host, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_host_bytes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "opendht.pyx":488
 *     def bootstrap(self, str host, str port=None):
 *         host_bytes = host.encode()
 *         port_bytes = port.encode() if port else b'4222'             # <<<<<<<<<<<<<<
 *         self.thisptr.get().bootstrap(<cpp.const_char*>host_bytes, <cpp.const_char*>port_bytes)
 *     def run(self, Identity id=None, is_bootstrap=False, cpp.in_port_t port=0, str ipv4="", str ipv6="", DhtConfig config=DhtConfig()):
 */
  __pyx_t_2 = (__pyx_v_port != Py_None) && (__Pyx_PyUnicode_IS_TRUE(__pyx_v_port) != 0);
  if (__pyx_t_2) {
    if (unlikely(__pyx_v_port == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "encode");
      __PYX_ERR(0, 488, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsEncodedString(__pyx_v_port, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(__pyx_kp_b_4222);
    __pyx_t_1 = __pyx_kp_b_4222;
  }
  __pyx_v_port_bytes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "opendht.pyx":489
 *         host_bytes = host.encode()
 *         port_bytes = port.encode() if port else b'4222'
 *         self.thisptr.get().bootstrap(<cpp.const_char*>host_bytes, <cpp.const_char*>port_bytes)             # <<<<<<<<<<<<<<
 *     def run(self, Identity id=None, is_bootstrap=False, cpp.in_port_t port=0, str ipv4="", str ipv6="", DhtConfig config=DhtConfig()):
 *         if id:
 */
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_host_bytes); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_v_port_bytes); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L1_error)
  __pyx_v_self->thisptr.get()->bootstrap(((const char *)__pyx_t_4), ((const char *)__pyx_t_5));

  /* "opendht.pyx":486
 *                     lock.wait()
 *             return ok
 *     def bootstrap(self, str host, str port=None):             # <<<<<<<<<<<<<<
 *         host_bytes = host.encode()
 *         port_bytes = port.encode() if port else b'4222'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opendht.DhtRunner.bootstrap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_host_bytes);
  __Pyx_XDECREF(__pyx_v_port_bytes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":490
 *         port_bytes = port.encode() if port else b'4222'
 *         self.thisptr.get().bootstrap(<cpp.const_char*>host_bytes, <cpp.const_char*>port_bytes)
 *     def run(self, Identity id=None, is_bootstrap=False, cpp.in_port_t port=0, str ipv4="", str ipv6="", DhtConfig config=DhtConfig()):             # <<<<<<<<<<<<<<
 *         if id:
 *             config.setIdentity(id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_11run(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_11run(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opendht_Identity *__pyx_v_id = 0;
  CYTHON_UNUSED PyObject *__pyx_v_is_bootstrap = 0;
  __pyx_t_11opendht_cpp_in_port_t __pyx_v_port;
  PyObject *__pyx_v_ipv4 = 0;
  PyObject *__pyx_v_ipv6 = 0;
  struct __pyx_obj_7opendht_DhtConfig *__pyx_v_config = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_is_bootstrap,&__pyx_n_s_port,&__pyx_n_s_ipv4,&__pyx_n_s_ipv6,&__pyx_n_s_config,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[0] = (PyObject *)((struct __pyx_obj_7opendht_Identity *)Py_None);
    values[1] = ((PyObject *)Py_False);
    values[3] = ((PyObject*)__pyx_kp_u_);
    values[4] = ((PyObject*)__pyx_kp_u_);
    values[5] = (PyObject *)__pyx_k__46;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_is_bootstrap);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_port);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ipv4);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ipv6);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_config);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "run") < 0)) __PYX_ERR(0, 490, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_id = ((struct __pyx_obj_7opendht_Identity *)values[0]);
    __pyx_v_is_bootstrap = values[1];
    if (values[2]) {
      __pyx_v_port = __Pyx_PyInt_As_uint16_t(values[2]); if (unlikely((__pyx_v_port == ((uint16_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L3_error)
    } else {
      __pyx_v_port = ((__pyx_t_11opendht_cpp_in_port_t)0);
    }
    __pyx_v_ipv4 = ((PyObject*)values[3]);
    __pyx_v_ipv6 = ((PyObject*)values[4]);
    __pyx_v_config = ((struct __pyx_obj_7opendht_DhtConfig *)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("run", 0, 0, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 490, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.DhtRunner.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_id), __pyx_ptype_7opendht_Identity, 1, "id", 0))) __PYX_ERR(0, 490, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ipv4), (&PyUnicode_Type), 1, "ipv4", 1))) __PYX_ERR(0, 490, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ipv6), (&PyUnicode_Type), 1, "ipv6", 1))) __PYX_ERR(0, 490, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_config), __pyx_ptype_7opendht_DhtConfig, 1, "config", 0))) __PYX_ERR(0, 490, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_10run(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self), __pyx_v_id, __pyx_v_is_bootstrap, __pyx_v_port, __pyx_v_ipv4, __pyx_v_ipv6, __pyx_v_config);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_10run(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, struct __pyx_obj_7opendht_Identity *__pyx_v_id, CYTHON_UNUSED PyObject *__pyx_v_is_bootstrap, __pyx_t_11opendht_cpp_in_port_t __pyx_v_port, PyObject *__pyx_v_ipv4, PyObject *__pyx_v_ipv6, struct __pyx_obj_7opendht_DhtConfig *__pyx_v_config) {
  PyObject *__pyx_v_bind4 = NULL;
  PyObject *__pyx_v_bind6 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  const char *__pyx_t_7;
  const char *__pyx_t_8;
  const char *__pyx_t_9;
  __Pyx_RefNannySetupContext("run", 0);

  /* "opendht.pyx":491
 *         self.thisptr.get().bootstrap(<cpp.const_char*>host_bytes, <cpp.const_char*>port_bytes)
 *     def run(self, Identity id=None, is_bootstrap=False, cpp.in_port_t port=0, str ipv4="", str ipv6="", DhtConfig config=DhtConfig()):
 *         if id:             # <<<<<<<<<<<<<<
 *             config.setIdentity(id)
 *         if ipv4 or ipv6:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_id)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 491, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "opendht.pyx":492
 *     def run(self, Identity id=None, is_bootstrap=False, cpp.in_port_t port=0, str ipv4="", str ipv6="", DhtConfig config=DhtConfig()):
 *         if id:
 *             config.setIdentity(id)             # <<<<<<<<<<<<<<
 *         if ipv4 or ipv6:
 *             bind4 = ipv4.encode() if ipv4 else b''
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_config), __pyx_n_s_setIdentity); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_id)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 492, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_id)};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 492, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_id)};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 492, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 492, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_id));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_id));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_id));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 492, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "opendht.pyx":491
 *         self.thisptr.get().bootstrap(<cpp.const_char*>host_bytes, <cpp.const_char*>port_bytes)
 *     def run(self, Identity id=None, is_bootstrap=False, cpp.in_port_t port=0, str ipv4="", str ipv6="", DhtConfig config=DhtConfig()):
 *         if id:             # <<<<<<<<<<<<<<
 *             config.setIdentity(id)
 *         if ipv4 or ipv6:
 */
  }

  /* "opendht.pyx":493
 *         if id:
 *             config.setIdentity(id)
 *         if ipv4 or ipv6:             # <<<<<<<<<<<<<<
 *             bind4 = ipv4.encode() if ipv4 else b''
 *             bind6 = ipv6.encode() if ipv6 else b''
 */
  __pyx_t_6 = (__pyx_v_ipv4 != Py_None) && (__Pyx_PyUnicode_IS_TRUE(__pyx_v_ipv4) != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_1 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_6 = (__pyx_v_ipv6 != Py_None) && (__Pyx_PyUnicode_IS_TRUE(__pyx_v_ipv6) != 0);
  __pyx_t_1 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "opendht.pyx":494
 *             config.setIdentity(id)
 *         if ipv4 or ipv6:
 *             bind4 = ipv4.encode() if ipv4 else b''             # <<<<<<<<<<<<<<
 *             bind6 = ipv6.encode() if ipv6 else b''
 *             self.thisptr.get().run(bind4, bind6, str(port).encode(), config._config)
 */
    __pyx_t_1 = (__pyx_v_ipv4 != Py_None) && (__Pyx_PyUnicode_IS_TRUE(__pyx_v_ipv4) != 0);
    if (__pyx_t_1) {
      if (unlikely(__pyx_v_ipv4 == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "encode");
        __PYX_ERR(0, 494, __pyx_L1_error)
      }
      __pyx_t_3 = PyUnicode_AsEncodedString(__pyx_v_ipv4, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __pyx_t_3;
      __pyx_t_3 = 0;
    } else {
      __Pyx_INCREF(__pyx_kp_b_);
      __pyx_t_2 = __pyx_kp_b_;
    }
    __pyx_v_bind4 = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "opendht.pyx":495
 *         if ipv4 or ipv6:
 *             bind4 = ipv4.encode() if ipv4 else b''
 *             bind6 = ipv6.encode() if ipv6 else b''             # <<<<<<<<<<<<<<
 *             self.thisptr.get().run(bind4, bind6, str(port).encode(), config._config)
 *         else:
 */
    __pyx_t_1 = (__pyx_v_ipv6 != Py_None) && (__Pyx_PyUnicode_IS_TRUE(__pyx_v_ipv6) != 0);
    if (__pyx_t_1) {
      if (unlikely(__pyx_v_ipv6 == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "encode");
        __PYX_ERR(0, 495, __pyx_L1_error)
      }
      __pyx_t_3 = PyUnicode_AsEncodedString(__pyx_v_ipv6, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 495, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __pyx_t_3;
      __pyx_t_3 = 0;
    } else {
      __Pyx_INCREF(__pyx_kp_b_);
      __pyx_t_2 = __pyx_kp_b_;
    }
    __pyx_v_bind6 = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "opendht.pyx":496
 *             bind4 = ipv4.encode() if ipv4 else b''
 *             bind6 = ipv6.encode() if ipv6 else b''
 *             self.thisptr.get().run(bind4, bind6, str(port).encode(), config._config)             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr.get().run(port, config._config)
 */
    __pyx_t_7 = __Pyx_PyObject_AsString(__pyx_v_bind4); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(0, 496, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_v_bind6); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 496, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_From_uint16_t(__pyx_v_port); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyUnicode_AsEncodedString(((PyObject*)__pyx_t_2), NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(0, 496, __pyx_L1_error)
    __pyx_v_self->thisptr.get()->run(__pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_v_config->_config);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "opendht.pyx":493
 *         if id:
 *             config.setIdentity(id)
 *         if ipv4 or ipv6:             # <<<<<<<<<<<<<<
 *             bind4 = ipv4.encode() if ipv4 else b''
 *             bind6 = ipv6.encode() if ipv6 else b''
 */
    goto __pyx_L4;
  }

  /* "opendht.pyx":498
 *             self.thisptr.get().run(bind4, bind6, str(port).encode(), config._config)
 *         else:
 *             self.thisptr.get().run(port, config._config)             # <<<<<<<<<<<<<<
 *     def join(self):
 *         self.thisptr.get().join()
 */
  /*else*/ {
    __pyx_v_self->thisptr.get()->run(__pyx_v_port, __pyx_v_config->_config);
  }
  __pyx_L4:;

  /* "opendht.pyx":490
 *         port_bytes = port.encode() if port else b'4222'
 *         self.thisptr.get().bootstrap(<cpp.const_char*>host_bytes, <cpp.const_char*>port_bytes)
 *     def run(self, Identity id=None, is_bootstrap=False, cpp.in_port_t port=0, str ipv4="", str ipv6="", DhtConfig config=DhtConfig()):             # <<<<<<<<<<<<<<
 *         if id:
 *             config.setIdentity(id)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opendht.DhtRunner.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bind4);
  __Pyx_XDECREF(__pyx_v_bind6);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":499
 *         else:
 *             self.thisptr.get().run(port, config._config)
 *     def join(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.get().join()
 *     def shutdown(self, shutdown_cb=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_13join(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_13join(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("join (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_12join(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_12join(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("join", 0);

  /* "opendht.pyx":500
 *             self.thisptr.get().run(port, config._config)
 *     def join(self):
 *         self.thisptr.get().join()             # <<<<<<<<<<<<<<
 *     def shutdown(self, shutdown_cb=None):
 *         cb_obj = {'shutdown':shutdown_cb}
 */
  __pyx_v_self->thisptr.get()->join();

  /* "opendht.pyx":499
 *         else:
 *             self.thisptr.get().run(port, config._config)
 *     def join(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.get().join()
 *     def shutdown(self, shutdown_cb=None):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":501
 *     def join(self):
 *         self.thisptr.get().join()
 *     def shutdown(self, shutdown_cb=None):             # <<<<<<<<<<<<<<
 *         cb_obj = {'shutdown':shutdown_cb}
 *         ref.Py_INCREF(cb_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_15shutdown(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_15shutdown(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shutdown_cb = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shutdown (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shutdown_cb,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shutdown_cb);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "shutdown") < 0)) __PYX_ERR(0, 501, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shutdown_cb = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("shutdown", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 501, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.DhtRunner.shutdown", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_14shutdown(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self), __pyx_v_shutdown_cb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_14shutdown(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, PyObject *__pyx_v_shutdown_cb) {
  PyObject *__pyx_v_cb_obj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("shutdown", 0);

  /* "opendht.pyx":502
 *         self.thisptr.get().join()
 *     def shutdown(self, shutdown_cb=None):
 *         cb_obj = {'shutdown':shutdown_cb}             # <<<<<<<<<<<<<<
 *         ref.Py_INCREF(cb_obj)
 *         self.thisptr.get().shutdown(cpp.bindShutdownCb(shutdown_callback, <void*>cb_obj))
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_shutdown, __pyx_v_shutdown_cb) < 0) __PYX_ERR(0, 502, __pyx_L1_error)
  __pyx_v_cb_obj = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":503
 *     def shutdown(self, shutdown_cb=None):
 *         cb_obj = {'shutdown':shutdown_cb}
 *         ref.Py_INCREF(cb_obj)             # <<<<<<<<<<<<<<
 *         self.thisptr.get().shutdown(cpp.bindShutdownCb(shutdown_callback, <void*>cb_obj))
 *     def enableLogging(self):
 */
  Py_INCREF(__pyx_v_cb_obj);

  /* "opendht.pyx":504
 *         cb_obj = {'shutdown':shutdown_cb}
 *         ref.Py_INCREF(cb_obj)
 *         self.thisptr.get().shutdown(cpp.bindShutdownCb(shutdown_callback, <void*>cb_obj))             # <<<<<<<<<<<<<<
 *     def enableLogging(self):
 *         cpp.enableLogging(self.thisptr.get()[0])
 */
  __pyx_v_self->thisptr.get()->shutdown(dht::bindShutdownCb(__pyx_f_7opendht_shutdown_callback, ((void *)__pyx_v_cb_obj)));

  /* "opendht.pyx":501
 *     def join(self):
 *         self.thisptr.get().join()
 *     def shutdown(self, shutdown_cb=None):             # <<<<<<<<<<<<<<
 *         cb_obj = {'shutdown':shutdown_cb}
 *         ref.Py_INCREF(cb_obj)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.DhtRunner.shutdown", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cb_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":505
 *         ref.Py_INCREF(cb_obj)
 *         self.thisptr.get().shutdown(cpp.bindShutdownCb(shutdown_callback, <void*>cb_obj))
 *     def enableLogging(self):             # <<<<<<<<<<<<<<
 *         cpp.enableLogging(self.thisptr.get()[0])
 *     def disableLogging(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_17enableLogging(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_17enableLogging(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enableLogging (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_16enableLogging(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_16enableLogging(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enableLogging", 0);

  /* "opendht.pyx":506
 *         self.thisptr.get().shutdown(cpp.bindShutdownCb(shutdown_callback, <void*>cb_obj))
 *     def enableLogging(self):
 *         cpp.enableLogging(self.thisptr.get()[0])             # <<<<<<<<<<<<<<
 *     def disableLogging(self):
 *         cpp.disableLogging(self.thisptr.get()[0])
 */
  dht::log::enableLogging((__pyx_v_self->thisptr.get()[0]));

  /* "opendht.pyx":505
 *         ref.Py_INCREF(cb_obj)
 *         self.thisptr.get().shutdown(cpp.bindShutdownCb(shutdown_callback, <void*>cb_obj))
 *     def enableLogging(self):             # <<<<<<<<<<<<<<
 *         cpp.enableLogging(self.thisptr.get()[0])
 *     def disableLogging(self):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":507
 *     def enableLogging(self):
 *         cpp.enableLogging(self.thisptr.get()[0])
 *     def disableLogging(self):             # <<<<<<<<<<<<<<
 *         cpp.disableLogging(self.thisptr.get()[0])
 *     def enableFileLogging(self, str path):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_19disableLogging(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_19disableLogging(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("disableLogging (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_18disableLogging(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_18disableLogging(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("disableLogging", 0);

  /* "opendht.pyx":508
 *         cpp.enableLogging(self.thisptr.get()[0])
 *     def disableLogging(self):
 *         cpp.disableLogging(self.thisptr.get()[0])             # <<<<<<<<<<<<<<
 *     def enableFileLogging(self, str path):
 *         cpp.enableFileLogging(self.thisptr.get()[0], path.encode())
 */
  dht::log::disableLogging((__pyx_v_self->thisptr.get()[0]));

  /* "opendht.pyx":507
 *     def enableLogging(self):
 *         cpp.enableLogging(self.thisptr.get()[0])
 *     def disableLogging(self):             # <<<<<<<<<<<<<<
 *         cpp.disableLogging(self.thisptr.get()[0])
 *     def enableFileLogging(self, str path):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":509
 *     def disableLogging(self):
 *         cpp.disableLogging(self.thisptr.get()[0])
 *     def enableFileLogging(self, str path):             # <<<<<<<<<<<<<<
 *         cpp.enableFileLogging(self.thisptr.get()[0], path.encode())
 *     def isRunning(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_21enableFileLogging(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_21enableFileLogging(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enableFileLogging (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), (&PyUnicode_Type), 1, "path", 1))) __PYX_ERR(0, 509, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_20enableFileLogging(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self), ((PyObject*)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_20enableFileLogging(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  __Pyx_RefNannySetupContext("enableFileLogging", 0);

  /* "opendht.pyx":510
 *         cpp.disableLogging(self.thisptr.get()[0])
 *     def enableFileLogging(self, str path):
 *         cpp.enableFileLogging(self.thisptr.get()[0], path.encode())             # <<<<<<<<<<<<<<
 *     def isRunning(self):
 *         return self.thisptr.get().isRunning()
 */
  if (unlikely(__pyx_v_path == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "encode");
    __PYX_ERR(0, 510, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsEncodedString(__pyx_v_path, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  dht::log::enableFileLogging((__pyx_v_self->thisptr.get()[0]), __pyx_t_2);

  /* "opendht.pyx":509
 *     def disableLogging(self):
 *         cpp.disableLogging(self.thisptr.get()[0])
 *     def enableFileLogging(self, str path):             # <<<<<<<<<<<<<<
 *         cpp.enableFileLogging(self.thisptr.get()[0], path.encode())
 *     def isRunning(self):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.DhtRunner.enableFileLogging", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":511
 *     def enableFileLogging(self, str path):
 *         cpp.enableFileLogging(self.thisptr.get()[0], path.encode())
 *     def isRunning(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.get().isRunning()
 *     def getBound(self, cpp.sa_family_t af = 0):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_23isRunning(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_23isRunning(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isRunning (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_22isRunning(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_22isRunning(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isRunning", 0);

  /* "opendht.pyx":512
 *         cpp.enableFileLogging(self.thisptr.get()[0], path.encode())
 *     def isRunning(self):
 *         return self.thisptr.get().isRunning()             # <<<<<<<<<<<<<<
 *     def getBound(self, cpp.sa_family_t af = 0):
 *         s = SockAddr()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr.get()->isRunning()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":511
 *     def enableFileLogging(self, str path):
 *         cpp.enableFileLogging(self.thisptr.get()[0], path.encode())
 *     def isRunning(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.get().isRunning()
 *     def getBound(self, cpp.sa_family_t af = 0):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.DhtRunner.isRunning", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":513
 *     def isRunning(self):
 *         return self.thisptr.get().isRunning()
 *     def getBound(self, cpp.sa_family_t af = 0):             # <<<<<<<<<<<<<<
 *         s = SockAddr()
 *         s._addr = self.thisptr.get().getBound(af)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_25getBound(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_25getBound(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_11opendht_cpp_sa_family_t __pyx_v_af;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBound (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_af,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_af);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getBound") < 0)) __PYX_ERR(0, 513, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_af = __Pyx_PyInt_As_unsigned_short(values[0]); if (unlikely((__pyx_v_af == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(0, 513, __pyx_L3_error)
    } else {
      __pyx_v_af = ((__pyx_t_11opendht_cpp_sa_family_t)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getBound", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 513, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.DhtRunner.getBound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_24getBound(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self), __pyx_v_af);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_24getBound(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, __pyx_t_11opendht_cpp_sa_family_t __pyx_v_af) {
  struct __pyx_obj_7opendht_SockAddr *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getBound", 0);

  /* "opendht.pyx":514
 *         return self.thisptr.get().isRunning()
 *     def getBound(self, cpp.sa_family_t af = 0):
 *         s = SockAddr()             # <<<<<<<<<<<<<<
 *         s._addr = self.thisptr.get().getBound(af)
 *         return s
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_SockAddr), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_7opendht_SockAddr *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":515
 *     def getBound(self, cpp.sa_family_t af = 0):
 *         s = SockAddr()
 *         s._addr = self.thisptr.get().getBound(af)             # <<<<<<<<<<<<<<
 *         return s
 *     def getStorageLog(self):
 */
  __pyx_v_s->_addr = __pyx_v_self->thisptr.get()->getBound(__pyx_v_af);

  /* "opendht.pyx":516
 *         s = SockAddr()
 *         s._addr = self.thisptr.get().getBound(af)
 *         return s             # <<<<<<<<<<<<<<
 *     def getStorageLog(self):
 *         return self.thisptr.get().getStorageLog().decode()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "opendht.pyx":513
 *     def isRunning(self):
 *         return self.thisptr.get().isRunning()
 *     def getBound(self, cpp.sa_family_t af = 0):             # <<<<<<<<<<<<<<
 *         s = SockAddr()
 *         s._addr = self.thisptr.get().getBound(af)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.DhtRunner.getBound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":517
 *         s._addr = self.thisptr.get().getBound(af)
 *         return s
 *     def getStorageLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.get().getStorageLog().decode()
 *     def getRoutingTablesLog(self, cpp.sa_family_t af):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_27getStorageLog(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_27getStorageLog(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStorageLog (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_26getStorageLog(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_26getStorageLog(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getStorageLog", 0);

  /* "opendht.pyx":518
 *         return s
 *     def getStorageLog(self):
 *         return self.thisptr.get().getStorageLog().decode()             # <<<<<<<<<<<<<<
 *     def getRoutingTablesLog(self, cpp.sa_family_t af):
 *         return self.thisptr.get().getRoutingTablesLog(af).decode()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr.get()->getStorageLog(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":517
 *         s._addr = self.thisptr.get().getBound(af)
 *         return s
 *     def getStorageLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.get().getStorageLog().decode()
 *     def getRoutingTablesLog(self, cpp.sa_family_t af):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.DhtRunner.getStorageLog", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":519
 *     def getStorageLog(self):
 *         return self.thisptr.get().getStorageLog().decode()
 *     def getRoutingTablesLog(self, cpp.sa_family_t af):             # <<<<<<<<<<<<<<
 *         return self.thisptr.get().getRoutingTablesLog(af).decode()
 *     def getSearchesLog(self, cpp.sa_family_t af):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_29getRoutingTablesLog(PyObject *__pyx_v_self, PyObject *__pyx_arg_af); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_29getRoutingTablesLog(PyObject *__pyx_v_self, PyObject *__pyx_arg_af) {
  __pyx_t_11opendht_cpp_sa_family_t __pyx_v_af;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRoutingTablesLog (wrapper)", 0);
  assert(__pyx_arg_af); {
    __pyx_v_af = __Pyx_PyInt_As_unsigned_short(__pyx_arg_af); if (unlikely((__pyx_v_af == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(0, 519, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.DhtRunner.getRoutingTablesLog", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_28getRoutingTablesLog(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self), ((__pyx_t_11opendht_cpp_sa_family_t)__pyx_v_af));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_28getRoutingTablesLog(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, __pyx_t_11opendht_cpp_sa_family_t __pyx_v_af) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getRoutingTablesLog", 0);

  /* "opendht.pyx":520
 *         return self.thisptr.get().getStorageLog().decode()
 *     def getRoutingTablesLog(self, cpp.sa_family_t af):
 *         return self.thisptr.get().getRoutingTablesLog(af).decode()             # <<<<<<<<<<<<<<
 *     def getSearchesLog(self, cpp.sa_family_t af):
 *         return self.thisptr.get().getSearchesLog(af).decode()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr.get()->getRoutingTablesLog(__pyx_v_af), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":519
 *     def getStorageLog(self):
 *         return self.thisptr.get().getStorageLog().decode()
 *     def getRoutingTablesLog(self, cpp.sa_family_t af):             # <<<<<<<<<<<<<<
 *         return self.thisptr.get().getRoutingTablesLog(af).decode()
 *     def getSearchesLog(self, cpp.sa_family_t af):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.DhtRunner.getRoutingTablesLog", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":521
 *     def getRoutingTablesLog(self, cpp.sa_family_t af):
 *         return self.thisptr.get().getRoutingTablesLog(af).decode()
 *     def getSearchesLog(self, cpp.sa_family_t af):             # <<<<<<<<<<<<<<
 *         return self.thisptr.get().getSearchesLog(af).decode()
 *     def getNodeMessageStats(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_31getSearchesLog(PyObject *__pyx_v_self, PyObject *__pyx_arg_af); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_31getSearchesLog(PyObject *__pyx_v_self, PyObject *__pyx_arg_af) {
  __pyx_t_11opendht_cpp_sa_family_t __pyx_v_af;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSearchesLog (wrapper)", 0);
  assert(__pyx_arg_af); {
    __pyx_v_af = __Pyx_PyInt_As_unsigned_short(__pyx_arg_af); if (unlikely((__pyx_v_af == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.DhtRunner.getSearchesLog", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_30getSearchesLog(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self), ((__pyx_t_11opendht_cpp_sa_family_t)__pyx_v_af));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_30getSearchesLog(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, __pyx_t_11opendht_cpp_sa_family_t __pyx_v_af) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getSearchesLog", 0);

  /* "opendht.pyx":522
 *         return self.thisptr.get().getRoutingTablesLog(af).decode()
 *     def getSearchesLog(self, cpp.sa_family_t af):
 *         return self.thisptr.get().getSearchesLog(af).decode()             # <<<<<<<<<<<<<<
 *     def getNodeMessageStats(self):
 *         stats = []
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr.get()->getSearchesLog(__pyx_v_af), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":521
 *     def getRoutingTablesLog(self, cpp.sa_family_t af):
 *         return self.thisptr.get().getRoutingTablesLog(af).decode()
 *     def getSearchesLog(self, cpp.sa_family_t af):             # <<<<<<<<<<<<<<
 *         return self.thisptr.get().getSearchesLog(af).decode()
 *     def getNodeMessageStats(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.DhtRunner.getSearchesLog", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":523
 *     def getSearchesLog(self, cpp.sa_family_t af):
 *         return self.thisptr.get().getSearchesLog(af).decode()
 *     def getNodeMessageStats(self):             # <<<<<<<<<<<<<<
 *         stats = []
 *         cdef cpp.vector[unsigned] res = self.thisptr.get().getNodeMessageStats(False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_33getNodeMessageStats(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_33getNodeMessageStats(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeMessageStats (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_32getNodeMessageStats(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_32getNodeMessageStats(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self) {
  PyObject *__pyx_v_stats = NULL;
  std::vector<unsigned int>  __pyx_v_res;
  unsigned int __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<unsigned int> ::iterator __pyx_t_2;
  unsigned int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("getNodeMessageStats", 0);

  /* "opendht.pyx":524
 *         return self.thisptr.get().getSearchesLog(af).decode()
 *     def getNodeMessageStats(self):
 *         stats = []             # <<<<<<<<<<<<<<
 *         cdef cpp.vector[unsigned] res = self.thisptr.get().getNodeMessageStats(False)
 *         for n in res:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_stats = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":525
 *     def getNodeMessageStats(self):
 *         stats = []
 *         cdef cpp.vector[unsigned] res = self.thisptr.get().getNodeMessageStats(False)             # <<<<<<<<<<<<<<
 *         for n in res:
 *             stats.append(n)
 */
  __pyx_v_res = __pyx_v_self->thisptr.get()->getNodeMessageStats(0);

  /* "opendht.pyx":526
 *         stats = []
 *         cdef cpp.vector[unsigned] res = self.thisptr.get().getNodeMessageStats(False)
 *         for n in res:             # <<<<<<<<<<<<<<
 *             stats.append(n)
 *         return stats
 */
  __pyx_t_2 = __pyx_v_res.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_res.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_n = __pyx_t_3;

    /* "opendht.pyx":527
 *         cdef cpp.vector[unsigned] res = self.thisptr.get().getNodeMessageStats(False)
 *         for n in res:
 *             stats.append(n)             # <<<<<<<<<<<<<<
 *         return stats
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_stats, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "opendht.pyx":526
 *         stats = []
 *         cdef cpp.vector[unsigned] res = self.thisptr.get().getNodeMessageStats(False)
 *         for n in res:             # <<<<<<<<<<<<<<
 *             stats.append(n)
 *         return stats
 */
  }

  /* "opendht.pyx":528
 *         for n in res:
 *             stats.append(n)
 *         return stats             # <<<<<<<<<<<<<<
 * 
 *     def get(self, InfoHash key, get_cb=None, done_cb=None, filter=None, Where where=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_stats);
  __pyx_r = __pyx_v_stats;
  goto __pyx_L0;

  /* "opendht.pyx":523
 *     def getSearchesLog(self, cpp.sa_family_t af):
 *         return self.thisptr.get().getSearchesLog(af).decode()
 *     def getNodeMessageStats(self):             # <<<<<<<<<<<<<<
 *         stats = []
 *         cdef cpp.vector[unsigned] res = self.thisptr.get().getNodeMessageStats(False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.DhtRunner.getNodeMessageStats", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_stats);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":530
 *         return stats
 * 
 *     def get(self, InfoHash key, get_cb=None, done_cb=None, filter=None, Where where=None):             # <<<<<<<<<<<<<<
 *         """Retreive values associated with a key on the DHT.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_35get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7opendht_9DhtRunner_34get[] = "Retreive values associated with a key on the DHT.\n\n        key     -- the key for which to search\n        get_cb  -- is set, makes the operation non-blocking. Called when a value\n                   is found on the DHT.\n        done_cb -- optional callback used when get_cb is set. Called when the\n                   operation is completed.\n        ";
static PyObject *__pyx_pw_7opendht_9DhtRunner_35get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_key = 0;
  PyObject *__pyx_v_get_cb = 0;
  PyObject *__pyx_v_done_cb = 0;
  PyObject *__pyx_v_filter = 0;
  struct __pyx_obj_7opendht_Where *__pyx_v_where = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_get_cb,&__pyx_n_s_done_cb,&__pyx_n_s_filter,&__pyx_n_s_where,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = (PyObject *)((struct __pyx_obj_7opendht_Where *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_get_cb);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_done_cb);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filter);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_where);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get") < 0)) __PYX_ERR(0, 530, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = ((struct __pyx_obj_7opendht_InfoHash *)values[0]);
    __pyx_v_get_cb = values[1];
    __pyx_v_done_cb = values[2];
    __pyx_v_filter = values[3];
    __pyx_v_where = ((struct __pyx_obj_7opendht_Where *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 530, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.DhtRunner.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_7opendht_InfoHash, 1, "key", 0))) __PYX_ERR(0, 530, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_where), __pyx_ptype_7opendht_Where, 1, "where", 0))) __PYX_ERR(0, 530, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_34get(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self), __pyx_v_key, __pyx_v_get_cb, __pyx_v_done_cb, __pyx_v_filter, __pyx_v_where);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":552
 *             pending = 0
 *             res = []
 *             def tmp_get(v):             # <<<<<<<<<<<<<<
 *                 nonlocal res
 *                 res.append(v)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_3get_1tmp_get(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static PyMethodDef __pyx_mdef_7opendht_9DhtRunner_3get_1tmp_get = {"tmp_get", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_3get_1tmp_get, METH_O, 0};
static PyObject *__pyx_pw_7opendht_9DhtRunner_3get_1tmp_get(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tmp_get (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_3get_tmp_get(__pyx_self, ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_3get_tmp_get(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  struct __pyx_obj_7opendht___pyx_scope_struct_1_get *__pyx_cur_scope;
  struct __pyx_obj_7opendht___pyx_scope_struct_1_get *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("tmp_get", 0);
  __pyx_outer_scope = (struct __pyx_obj_7opendht___pyx_scope_struct_1_get *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "opendht.pyx":554
 *             def tmp_get(v):
 *                 nonlocal res
 *                 res.append(v)             # <<<<<<<<<<<<<<
 *                 return True
 *             def tmp_done(ok, nodes):
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_res)) { __Pyx_RaiseClosureNameError("res"); __PYX_ERR(0, 554, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_res == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
    __PYX_ERR(0, 554, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_res, __pyx_v_v); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 554, __pyx_L1_error)

  /* "opendht.pyx":555
 *                 nonlocal res
 *                 res.append(v)
 *                 return True             # <<<<<<<<<<<<<<
 *             def tmp_done(ok, nodes):
 *                 nonlocal pending, lock
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "opendht.pyx":552
 *             pending = 0
 *             res = []
 *             def tmp_get(v):             # <<<<<<<<<<<<<<
 *                 nonlocal res
 *                 res.append(v)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("opendht.DhtRunner.get.tmp_get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":556
 *                 res.append(v)
 *                 return True
 *             def tmp_done(ok, nodes):             # <<<<<<<<<<<<<<
 *                 nonlocal pending, lock
 *                 with lock:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_3get_3tmp_done(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opendht_9DhtRunner_3get_3tmp_done = {"tmp_done", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_3get_3tmp_done, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opendht_9DhtRunner_3get_3tmp_done(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_ok = 0;
  CYTHON_UNUSED PyObject *__pyx_v_nodes = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tmp_done (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ok,&__pyx_n_s_nodes,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ok)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("tmp_done", 1, 2, 2, 1); __PYX_ERR(0, 556, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "tmp_done") < 0)) __PYX_ERR(0, 556, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ok = values[0];
    __pyx_v_nodes = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tmp_done", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 556, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.DhtRunner.get.tmp_done", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_3get_2tmp_done(__pyx_self, __pyx_v_ok, __pyx_v_nodes);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_3get_2tmp_done(PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_ok, CYTHON_UNUSED PyObject *__pyx_v_nodes) {
  struct __pyx_obj_7opendht___pyx_scope_struct_1_get *__pyx_cur_scope;
  struct __pyx_obj_7opendht___pyx_scope_struct_1_get *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("tmp_done", 0);
  __pyx_outer_scope = (struct __pyx_obj_7opendht___pyx_scope_struct_1_get *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "opendht.pyx":558
 *             def tmp_done(ok, nodes):
 *                 nonlocal pending, lock
 *                 with lock:             # <<<<<<<<<<<<<<
 *                     pending -= 1
 *                     lock.notify()
 */
  /*with:*/ {
    if (unlikely(!__pyx_cur_scope->__pyx_v_lock)) { __Pyx_RaiseClosureNameError("lock"); __PYX_ERR(0, 558, __pyx_L1_error) }
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_exit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 558, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 558, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 558, __pyx_L3_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_5);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        /*try:*/ {

          /* "opendht.pyx":559
 *                 nonlocal pending, lock
 *                 with lock:
 *                     pending -= 1             # <<<<<<<<<<<<<<
 *                     lock.notify()
 *             with lock:
 */
          if (unlikely(!__pyx_cur_scope->__pyx_v_pending)) { __Pyx_RaiseClosureNameError("pending"); __PYX_ERR(0, 559, __pyx_L7_error) }
          __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_cur_scope->__pyx_v_pending, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 559, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_pending);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_pending, __pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_2);
          __pyx_t_2 = 0;

          /* "opendht.pyx":560
 *                 with lock:
 *                     pending -= 1
 *                     lock.notify()             # <<<<<<<<<<<<<<
 *             with lock:
 *                 pending += 1
 */
          if (unlikely(!__pyx_cur_scope->__pyx_v_lock)) { __Pyx_RaiseClosureNameError("lock"); __PYX_ERR(0, 560, __pyx_L7_error) }
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_notify); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 560, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          if (__pyx_t_4) {
            __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 560, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          } else {
            __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 560, __pyx_L7_error)
          }
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "opendht.pyx":558
 *             def tmp_done(ok, nodes):
 *                 nonlocal pending, lock
 *                 with lock:             # <<<<<<<<<<<<<<
 *                     pending -= 1
 *                     lock.notify()
 */
        }
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L12_try_end;
        __pyx_L7_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("opendht.DhtRunner.get.tmp_done", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4) < 0) __PYX_ERR(0, 558, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 558, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 558, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (__pyx_t_10 < 0) __PYX_ERR(0, 558, __pyx_L9_except_error)
          __pyx_t_11 = ((!(__pyx_t_10 != 0)) != 0);
          if (__pyx_t_11) {
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_XGIVEREF(__pyx_t_4);
            __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_3, __pyx_t_4);
            __pyx_t_2 = 0; __pyx_t_3 = 0; __pyx_t_4 = 0; 
            __PYX_ERR(0, 558, __pyx_L9_except_error)
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
        __pyx_L12_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_1) {
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__47, NULL);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 558, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L16;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L1_error;
    __pyx_L16:;
  }

  /* "opendht.pyx":556
 *                 res.append(v)
 *                 return True
 *             def tmp_done(ok, nodes):             # <<<<<<<<<<<<<<
 *                 nonlocal pending, lock
 *                 with lock:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("opendht.DhtRunner.get.tmp_done", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":530
 *         return stats
 * 
 *     def get(self, InfoHash key, get_cb=None, done_cb=None, filter=None, Where where=None):             # <<<<<<<<<<<<<<
 *         """Retreive values associated with a key on the DHT.
 * 
 */

static PyObject *__pyx_pf_7opendht_9DhtRunner_34get(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, struct __pyx_obj_7opendht_InfoHash *__pyx_v_key, PyObject *__pyx_v_get_cb, PyObject *__pyx_v_done_cb, PyObject *__pyx_v_filter, struct __pyx_obj_7opendht_Where *__pyx_v_where) {
  struct __pyx_obj_7opendht___pyx_scope_struct_1_get *__pyx_cur_scope;
  PyObject *__pyx_v_cb_obj = NULL;
  PyObject *__pyx_v_tmp_get = 0;
  PyObject *__pyx_v_tmp_done = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("get", 0);
  __pyx_cur_scope = (struct __pyx_obj_7opendht___pyx_scope_struct_1_get *)__pyx_tp_new_7opendht___pyx_scope_struct_1_get(__pyx_ptype_7opendht___pyx_scope_struct_1_get, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7opendht___pyx_scope_struct_1_get *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 530, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_INCREF((PyObject *)__pyx_v_where);

  /* "opendht.pyx":539
 *                    operation is completed.
 *         """
 *         if get_cb:             # <<<<<<<<<<<<<<
 *             cb_obj = {'get':get_cb, 'done':done_cb, 'filter':filter}
 *             ref.Py_INCREF(cb_obj)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_get_cb); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 539, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "opendht.pyx":540
 *         """
 *         if get_cb:
 *             cb_obj = {'get':get_cb, 'done':done_cb, 'filter':filter}             # <<<<<<<<<<<<<<
 *             ref.Py_INCREF(cb_obj)
 *             if where is None:
 */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_get, __pyx_v_get_cb) < 0) __PYX_ERR(0, 540, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_done, __pyx_v_done_cb) < 0) __PYX_ERR(0, 540, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_filter, __pyx_v_filter) < 0) __PYX_ERR(0, 540, __pyx_L1_error)
    __pyx_v_cb_obj = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "opendht.pyx":541
 *         if get_cb:
 *             cb_obj = {'get':get_cb, 'done':done_cb, 'filter':filter}
 *             ref.Py_INCREF(cb_obj)             # <<<<<<<<<<<<<<
 *             if where is None:
 *                 where = Where()
 */
    Py_INCREF(__pyx_v_cb_obj);

    /* "opendht.pyx":542
 *             cb_obj = {'get':get_cb, 'done':done_cb, 'filter':filter}
 *             ref.Py_INCREF(cb_obj)
 *             if where is None:             # <<<<<<<<<<<<<<
 *                 where = Where()
 *             self.thisptr.get().get(key._infohash, cpp.bindGetCb(get_callback, <void*>cb_obj),
 */
    __pyx_t_1 = (((PyObject *)__pyx_v_where) == Py_None);
    __pyx_t_3 = (__pyx_t_1 != 0);
    if (__pyx_t_3) {

      /* "opendht.pyx":543
 *             ref.Py_INCREF(cb_obj)
 *             if where is None:
 *                 where = Where()             # <<<<<<<<<<<<<<
 *             self.thisptr.get().get(key._infohash, cpp.bindGetCb(get_callback, <void*>cb_obj),
 *                     cpp.bindDoneCb(done_callback, <void*>cb_obj),
 */
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_Where), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 543, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_where, ((struct __pyx_obj_7opendht_Where *)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "opendht.pyx":542
 *             cb_obj = {'get':get_cb, 'done':done_cb, 'filter':filter}
 *             ref.Py_INCREF(cb_obj)
 *             if where is None:             # <<<<<<<<<<<<<<
 *                 where = Where()
 *             self.thisptr.get().get(key._infohash, cpp.bindGetCb(get_callback, <void*>cb_obj),
 */
    }

    /* "opendht.pyx":544
 *             if where is None:
 *                 where = Where()
 *             self.thisptr.get().get(key._infohash, cpp.bindGetCb(get_callback, <void*>cb_obj),             # <<<<<<<<<<<<<<
 *                     cpp.bindDoneCb(done_callback, <void*>cb_obj),
 *                     cpp.nullptr, #filter implemented in the get_callback
 */
    __pyx_v_self->thisptr.get()->get(__pyx_v_key->_infohash, dht::bindGetCb(__pyx_f_7opendht_get_callback, ((void *)__pyx_v_cb_obj)), dht::bindDoneCb(__pyx_f_7opendht_done_callback, ((void *)__pyx_v_cb_obj)), nullptr, __pyx_v_where->_where);

    /* "opendht.pyx":539
 *                    operation is completed.
 *         """
 *         if get_cb:             # <<<<<<<<<<<<<<
 *             cb_obj = {'get':get_cb, 'done':done_cb, 'filter':filter}
 *             ref.Py_INCREF(cb_obj)
 */
    goto __pyx_L3;
  }

  /* "opendht.pyx":549
 *                     where._where)
 *         else:
 *             lock = threading.Condition()             # <<<<<<<<<<<<<<
 *             pending = 0
 *             res = []
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_threading); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Condition); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 549, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 549, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_v_lock = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "opendht.pyx":550
 *         else:
 *             lock = threading.Condition()
 *             pending = 0             # <<<<<<<<<<<<<<
 *             res = []
 *             def tmp_get(v):
 */
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    __pyx_cur_scope->__pyx_v_pending = __pyx_int_0;

    /* "opendht.pyx":551
 *             lock = threading.Condition()
 *             pending = 0
 *             res = []             # <<<<<<<<<<<<<<
 *             def tmp_get(v):
 *                 nonlocal res
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_v_res = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "opendht.pyx":552
 *             pending = 0
 *             res = []
 *             def tmp_get(v):             # <<<<<<<<<<<<<<
 *                 nonlocal res
 *                 res.append(v)
 */
    __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7opendht_9DhtRunner_3get_1tmp_get, 0, __pyx_n_s_get_locals_tmp_get, ((PyObject*)__pyx_cur_scope), __pyx_n_s_opendht, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_tmp_get = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "opendht.pyx":556
 *                 res.append(v)
 *                 return True
 *             def tmp_done(ok, nodes):             # <<<<<<<<<<<<<<
 *                 nonlocal pending, lock
 *                 with lock:
 */
    __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7opendht_9DhtRunner_3get_3tmp_done, 0, __pyx_n_s_get_locals_tmp_done, ((PyObject*)__pyx_cur_scope), __pyx_n_s_opendht, __pyx_d, ((PyObject *)__pyx_codeobj__51)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_tmp_done = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "opendht.pyx":561
 *                     pending -= 1
 *                     lock.notify()
 *             with lock:             # <<<<<<<<<<<<<<
 *                 pending += 1
 *                 self.get(key, get_cb=tmp_get, done_cb=tmp_done, filter=filter, where=where)
 */
    /*with:*/ {
      __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 561, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 561, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 561, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 561, __pyx_L5_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
          __Pyx_XGOTREF(__pyx_t_7);
          __Pyx_XGOTREF(__pyx_t_8);
          __Pyx_XGOTREF(__pyx_t_9);
          /*try:*/ {

            /* "opendht.pyx":562
 *                     lock.notify()
 *             with lock:
 *                 pending += 1             # <<<<<<<<<<<<<<
 *                 self.get(key, get_cb=tmp_get, done_cb=tmp_done, filter=filter, where=where)
 *                 while pending > 0:
 */
            __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_pending, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_pending);
            __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_pending, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            __pyx_t_2 = 0;

            /* "opendht.pyx":563
 *             with lock:
 *                 pending += 1
 *                 self.get(key, get_cb=tmp_get, done_cb=tmp_done, filter=filter, where=where)             # <<<<<<<<<<<<<<
 *                 while pending > 0:
 *                     lock.wait()
 */
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 563, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_INCREF(((PyObject *)__pyx_v_key));
            __Pyx_GIVEREF(((PyObject *)__pyx_v_key));
            PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_key));
            __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 563, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_get_cb, __pyx_v_tmp_get) < 0) __PYX_ERR(0, 563, __pyx_L9_error)
            if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_done_cb, __pyx_v_tmp_done) < 0) __PYX_ERR(0, 563, __pyx_L9_error)
            if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_filter, __pyx_v_filter) < 0) __PYX_ERR(0, 563, __pyx_L9_error)
            if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_where, ((PyObject *)__pyx_v_where)) < 0) __PYX_ERR(0, 563, __pyx_L9_error)
            __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 563, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

            /* "opendht.pyx":564
 *                 pending += 1
 *                 self.get(key, get_cb=tmp_get, done_cb=tmp_done, filter=filter, where=where)
 *                 while pending > 0:             # <<<<<<<<<<<<<<
 *                     lock.wait()
 *             return res
 */
            while (1) {
              __pyx_t_10 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_pending, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 564, __pyx_L9_error)
              __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 564, __pyx_L9_error)
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (!__pyx_t_3) break;

              /* "opendht.pyx":565
 *                 self.get(key, get_cb=tmp_get, done_cb=tmp_done, filter=filter, where=where)
 *                 while pending > 0:
 *                     lock.wait()             # <<<<<<<<<<<<<<
 *             return res
 *     def put(self, InfoHash key, Value val, done_cb=None):
 */
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_wait); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 565, __pyx_L9_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_5 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
                __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
                if (likely(__pyx_t_5)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                  __Pyx_INCREF(__pyx_t_5);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_4, function);
                }
              }
              if (__pyx_t_5) {
                __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 565, __pyx_L9_error)
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              } else {
                __pyx_t_10 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 565, __pyx_L9_error)
              }
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            }

            /* "opendht.pyx":561
 *                     pending -= 1
 *                     lock.notify()
 *             with lock:             # <<<<<<<<<<<<<<
 *                 pending += 1
 *                 self.get(key, get_cb=tmp_get, done_cb=tmp_done, filter=filter, where=where)
 */
          }
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          goto __pyx_L14_try_end;
          __pyx_L9_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("opendht.DhtRunner.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_4, &__pyx_t_5) < 0) __PYX_ERR(0, 561, __pyx_L11_except_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_2 = PyTuple_Pack(3, __pyx_t_10, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 561, __pyx_L11_except_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 561, __pyx_L11_except_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (__pyx_t_3 < 0) __PYX_ERR(0, 561, __pyx_L11_except_error)
            __pyx_t_1 = ((!(__pyx_t_3 != 0)) != 0);
            if (__pyx_t_1) {
              __Pyx_GIVEREF(__pyx_t_10);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_5);
              __Pyx_ErrRestoreWithState(__pyx_t_10, __pyx_t_4, __pyx_t_5);
              __pyx_t_10 = 0; __pyx_t_4 = 0; __pyx_t_5 = 0; 
              __PYX_ERR(0, 561, __pyx_L11_except_error)
            }
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            goto __pyx_L10_exception_handled;
          }
          __pyx_L11_except_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
          goto __pyx_L1_error;
          __pyx_L10_exception_handled:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
          __pyx_L14_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_6) {
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__52, NULL);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 561, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          goto __pyx_L8;
        }
        __pyx_L8:;
      }
      goto __pyx_L20;
      __pyx_L5_error:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L1_error;
      __pyx_L20:;
    }

    /* "opendht.pyx":566
 *                 while pending > 0:
 *                     lock.wait()
 *             return res             # <<<<<<<<<<<<<<
 *     def put(self, InfoHash key, Value val, done_cb=None):
 *         """Publish a new value on the DHT at key.
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_res);
    __pyx_r = __pyx_cur_scope->__pyx_v_res;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "opendht.pyx":530
 *         return stats
 * 
 *     def get(self, InfoHash key, get_cb=None, done_cb=None, filter=None, Where where=None):             # <<<<<<<<<<<<<<
 *         """Retreive values associated with a key on the DHT.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("opendht.DhtRunner.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cb_obj);
  __Pyx_XDECREF(__pyx_v_tmp_get);
  __Pyx_XDECREF(__pyx_v_tmp_done);
  __Pyx_XDECREF((PyObject *)__pyx_v_where);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":567
 *                     lock.wait()
 *             return res
 *     def put(self, InfoHash key, Value val, done_cb=None):             # <<<<<<<<<<<<<<
 *         """Publish a new value on the DHT at key.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_37put(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7opendht_9DhtRunner_36put[] = "Publish a new value on the DHT at key.\n\n        key     -- the DHT key where to put the value\n        val     -- the value to put on the DHT\n        done_cb -- optional callback called when the operation is completed.\n        ";
static PyObject *__pyx_pw_7opendht_9DhtRunner_37put(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_key = 0;
  struct __pyx_obj_7opendht_Value *__pyx_v_val = 0;
  PyObject *__pyx_v_done_cb = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("put (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_val,&__pyx_n_s_done_cb,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("put", 0, 2, 3, 1); __PYX_ERR(0, 567, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_done_cb);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "put") < 0)) __PYX_ERR(0, 567, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = ((struct __pyx_obj_7opendht_InfoHash *)values[0]);
    __pyx_v_val = ((struct __pyx_obj_7opendht_Value *)values[1]);
    __pyx_v_done_cb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("put", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 567, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.DhtRunner.put", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_7opendht_InfoHash, 1, "key", 0))) __PYX_ERR(0, 567, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_val), __pyx_ptype_7opendht_Value, 1, "val", 0))) __PYX_ERR(0, 567, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_36put(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self), __pyx_v_key, __pyx_v_val, __pyx_v_done_cb);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":582
 *             pending = 0
 *             ok = False
 *             def tmp_done(ok_ret, nodes):             # <<<<<<<<<<<<<<
 *                 nonlocal pending, ok, lock
 *                 with lock:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_3put_1tmp_done(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opendht_9DhtRunner_3put_1tmp_done = {"tmp_done", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_3put_1tmp_done, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opendht_9DhtRunner_3put_1tmp_done(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ok_ret = 0;
  CYTHON_UNUSED PyObject *__pyx_v_nodes = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tmp_done (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ok_ret,&__pyx_n_s_nodes,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ok_ret)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("tmp_done", 1, 2, 2, 1); __PYX_ERR(0, 582, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "tmp_done") < 0)) __PYX_ERR(0, 582, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ok_ret = values[0];
    __pyx_v_nodes = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tmp_done", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 582, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.DhtRunner.put.tmp_done", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_3put_tmp_done(__pyx_self, __pyx_v_ok_ret, __pyx_v_nodes);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_3put_tmp_done(PyObject *__pyx_self, PyObject *__pyx_v_ok_ret, CYTHON_UNUSED PyObject *__pyx_v_nodes) {
  struct __pyx_obj_7opendht___pyx_scope_struct_2_put *__pyx_cur_scope;
  struct __pyx_obj_7opendht___pyx_scope_struct_2_put *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("tmp_done", 0);
  __pyx_outer_scope = (struct __pyx_obj_7opendht___pyx_scope_struct_2_put *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "opendht.pyx":584
 *             def tmp_done(ok_ret, nodes):
 *                 nonlocal pending, ok, lock
 *                 with lock:             # <<<<<<<<<<<<<<
 *                     ok = ok_ret
 *                     pending -= 1
 */
  /*with:*/ {
    if (unlikely(!__pyx_cur_scope->__pyx_v_lock)) { __Pyx_RaiseClosureNameError("lock"); __PYX_ERR(0, 584, __pyx_L1_error) }
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_exit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 584, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 584, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 584, __pyx_L3_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_5);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        /*try:*/ {

          /* "opendht.pyx":585
 *                 nonlocal pending, ok, lock
 *                 with lock:
 *                     ok = ok_ret             # <<<<<<<<<<<<<<
 *                     pending -= 1
 *                     lock.notify()
 */
          __Pyx_INCREF(__pyx_v_ok_ret);
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ok);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ok, __pyx_v_ok_ret);
          __Pyx_GIVEREF(__pyx_v_ok_ret);

          /* "opendht.pyx":586
 *                 with lock:
 *                     ok = ok_ret
 *                     pending -= 1             # <<<<<<<<<<<<<<
 *                     lock.notify()
 *             with lock:
 */
          if (unlikely(!__pyx_cur_scope->__pyx_v_pending)) { __Pyx_RaiseClosureNameError("pending"); __PYX_ERR(0, 586, __pyx_L7_error) }
          __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_cur_scope->__pyx_v_pending, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 586, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_pending);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_pending, __pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_2);
          __pyx_t_2 = 0;

          /* "opendht.pyx":587
 *                     ok = ok_ret
 *                     pending -= 1
 *                     lock.notify()             # <<<<<<<<<<<<<<
 *             with lock:
 *                 pending += 1
 */
          if (unlikely(!__pyx_cur_scope->__pyx_v_lock)) { __Pyx_RaiseClosureNameError("lock"); __PYX_ERR(0, 587, __pyx_L7_error) }
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_notify); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 587, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          if (__pyx_t_4) {
            __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          } else {
            __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L7_error)
          }
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "opendht.pyx":584
 *             def tmp_done(ok_ret, nodes):
 *                 nonlocal pending, ok, lock
 *                 with lock:             # <<<<<<<<<<<<<<
 *                     ok = ok_ret
 *                     pending -= 1
 */
        }
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L12_try_end;
        __pyx_L7_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("opendht.DhtRunner.put.tmp_done", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4) < 0) __PYX_ERR(0, 584, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 584, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 584, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (__pyx_t_10 < 0) __PYX_ERR(0, 584, __pyx_L9_except_error)
          __pyx_t_11 = ((!(__pyx_t_10 != 0)) != 0);
          if (__pyx_t_11) {
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_XGIVEREF(__pyx_t_4);
            __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_3, __pyx_t_4);
            __pyx_t_2 = 0; __pyx_t_3 = 0; __pyx_t_4 = 0; 
            __PYX_ERR(0, 584, __pyx_L9_except_error)
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
        __pyx_L12_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_1) {
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__53, NULL);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 584, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L16;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L1_error;
    __pyx_L16:;
  }

  /* "opendht.pyx":582
 *             pending = 0
 *             ok = False
 *             def tmp_done(ok_ret, nodes):             # <<<<<<<<<<<<<<
 *                 nonlocal pending, ok, lock
 *                 with lock:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("opendht.DhtRunner.put.tmp_done", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":567
 *                     lock.wait()
 *             return res
 *     def put(self, InfoHash key, Value val, done_cb=None):             # <<<<<<<<<<<<<<
 *         """Publish a new value on the DHT at key.
 * 
 */

static PyObject *__pyx_pf_7opendht_9DhtRunner_36put(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, struct __pyx_obj_7opendht_InfoHash *__pyx_v_key, struct __pyx_obj_7opendht_Value *__pyx_v_val, PyObject *__pyx_v_done_cb) {
  struct __pyx_obj_7opendht___pyx_scope_struct_2_put *__pyx_cur_scope;
  PyObject *__pyx_v_cb_obj = NULL;
  PyObject *__pyx_v_tmp_done = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("put", 0);
  __pyx_cur_scope = (struct __pyx_obj_7opendht___pyx_scope_struct_2_put *)__pyx_tp_new_7opendht___pyx_scope_struct_2_put(__pyx_ptype_7opendht___pyx_scope_struct_2_put, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7opendht___pyx_scope_struct_2_put *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 567, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "opendht.pyx":574
 *         done_cb -- optional callback called when the operation is completed.
 *         """
 *         if done_cb:             # <<<<<<<<<<<<<<
 *             cb_obj = {'done':done_cb}
 *             ref.Py_INCREF(cb_obj)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_done_cb); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 574, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "opendht.pyx":575
 *         """
 *         if done_cb:
 *             cb_obj = {'done':done_cb}             # <<<<<<<<<<<<<<
 *             ref.Py_INCREF(cb_obj)
 *             self.thisptr.get().put(key._infohash, val._value, cpp.bindDoneCb(done_callback, <void*>cb_obj))
 */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_done, __pyx_v_done_cb) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
    __pyx_v_cb_obj = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "opendht.pyx":576
 *         if done_cb:
 *             cb_obj = {'done':done_cb}
 *             ref.Py_INCREF(cb_obj)             # <<<<<<<<<<<<<<
 *             self.thisptr.get().put(key._infohash, val._value, cpp.bindDoneCb(done_callback, <void*>cb_obj))
 *         else:
 */
    Py_INCREF(__pyx_v_cb_obj);

    /* "opendht.pyx":577
 *             cb_obj = {'done':done_cb}
 *             ref.Py_INCREF(cb_obj)
 *             self.thisptr.get().put(key._infohash, val._value, cpp.bindDoneCb(done_callback, <void*>cb_obj))             # <<<<<<<<<<<<<<
 *         else:
 *             lock = threading.Condition()
 */
    __pyx_v_self->thisptr.get()->put(__pyx_v_key->_infohash, __pyx_v_val->_value, dht::bindDoneCb(__pyx_f_7opendht_done_callback, ((void *)__pyx_v_cb_obj)));

    /* "opendht.pyx":574
 *         done_cb -- optional callback called when the operation is completed.
 *         """
 *         if done_cb:             # <<<<<<<<<<<<<<
 *             cb_obj = {'done':done_cb}
 *             ref.Py_INCREF(cb_obj)
 */
    goto __pyx_L3;
  }

  /* "opendht.pyx":579
 *             self.thisptr.get().put(key._infohash, val._value, cpp.bindDoneCb(done_callback, <void*>cb_obj))
 *         else:
 *             lock = threading.Condition()             # <<<<<<<<<<<<<<
 *             pending = 0
 *             ok = False
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_threading); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Condition); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 579, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 579, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_v_lock = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "opendht.pyx":580
 *         else:
 *             lock = threading.Condition()
 *             pending = 0             # <<<<<<<<<<<<<<
 *             ok = False
 *             def tmp_done(ok_ret, nodes):
 */
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    __pyx_cur_scope->__pyx_v_pending = __pyx_int_0;

    /* "opendht.pyx":581
 *             lock = threading.Condition()
 *             pending = 0
 *             ok = False             # <<<<<<<<<<<<<<
 *             def tmp_done(ok_ret, nodes):
 *                 nonlocal pending, ok, lock
 */
    __Pyx_INCREF(Py_False);
    __Pyx_GIVEREF(Py_False);
    __pyx_cur_scope->__pyx_v_ok = Py_False;

    /* "opendht.pyx":582
 *             pending = 0
 *             ok = False
 *             def tmp_done(ok_ret, nodes):             # <<<<<<<<<<<<<<
 *                 nonlocal pending, ok, lock
 *                 with lock:
 */
    __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7opendht_9DhtRunner_3put_1tmp_done, 0, __pyx_n_s_put_locals_tmp_done, ((PyObject*)__pyx_cur_scope), __pyx_n_s_opendht, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_tmp_done = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "opendht.pyx":588
 *                     pending -= 1
 *                     lock.notify()
 *             with lock:             # <<<<<<<<<<<<<<
 *                 pending += 1
 *                 self.put(key, val, done_cb=tmp_done)
 */
    /*with:*/ {
      __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_exit); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 588, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 588, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (__pyx_t_3) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 588, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 588, __pyx_L4_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
          __Pyx_XGOTREF(__pyx_t_6);
          __Pyx_XGOTREF(__pyx_t_7);
          __Pyx_XGOTREF(__pyx_t_8);
          /*try:*/ {

            /* "opendht.pyx":589
 *                     lock.notify()
 *             with lock:
 *                 pending += 1             # <<<<<<<<<<<<<<
 *                 self.put(key, val, done_cb=tmp_done)
 *                 while pending > 0:
 */
            __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_pending, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 589, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_pending);
            __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_pending, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            __pyx_t_2 = 0;

            /* "opendht.pyx":590
 *             with lock:
 *                 pending += 1
 *                 self.put(key, val, done_cb=tmp_done)             # <<<<<<<<<<<<<<
 *                 while pending > 0:
 *                     lock.wait()
 */
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_put); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 590, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 590, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_INCREF(((PyObject *)__pyx_v_key));
            __Pyx_GIVEREF(((PyObject *)__pyx_v_key));
            PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_key));
            __Pyx_INCREF(((PyObject *)__pyx_v_val));
            __Pyx_GIVEREF(((PyObject *)__pyx_v_val));
            PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_v_val));
            __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 590, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_3);
            if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_done_cb, __pyx_v_tmp_done) < 0) __PYX_ERR(0, 590, __pyx_L8_error)
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 590, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

            /* "opendht.pyx":591
 *                 pending += 1
 *                 self.put(key, val, done_cb=tmp_done)
 *                 while pending > 0:             # <<<<<<<<<<<<<<
 *                     lock.wait()
 *             return ok
 */
            while (1) {
              __pyx_t_9 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_pending, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 591, __pyx_L8_error)
              __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 591, __pyx_L8_error)
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              if (!__pyx_t_1) break;

              /* "opendht.pyx":592
 *                 self.put(key, val, done_cb=tmp_done)
 *                 while pending > 0:
 *                     lock.wait()             # <<<<<<<<<<<<<<
 *             return ok
 *     def listen(self, InfoHash key, get_cb):
 */
              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_lock, __pyx_n_s_wait); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 592, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_4 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                }
              }
              if (__pyx_t_4) {
                __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 592, __pyx_L8_error)
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else {
                __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 592, __pyx_L8_error)
              }
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            }

            /* "opendht.pyx":588
 *                     pending -= 1
 *                     lock.notify()
 *             with lock:             # <<<<<<<<<<<<<<
 *                 pending += 1
 *                 self.put(key, val, done_cb=tmp_done)
 */
          }
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          goto __pyx_L13_try_end;
          __pyx_L8_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("opendht.DhtRunner.put", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_3, &__pyx_t_4) < 0) __PYX_ERR(0, 588, __pyx_L10_except_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_2 = PyTuple_Pack(3, __pyx_t_9, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 588, __pyx_L10_except_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 588, __pyx_L10_except_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (__pyx_t_1 < 0) __PYX_ERR(0, 588, __pyx_L10_except_error)
            __pyx_t_11 = ((!(__pyx_t_1 != 0)) != 0);
            if (__pyx_t_11) {
              __Pyx_GIVEREF(__pyx_t_9);
              __Pyx_GIVEREF(__pyx_t_3);
              __Pyx_XGIVEREF(__pyx_t_4);
              __Pyx_ErrRestoreWithState(__pyx_t_9, __pyx_t_3, __pyx_t_4);
              __pyx_t_9 = 0; __pyx_t_3 = 0; __pyx_t_4 = 0; 
              __PYX_ERR(0, 588, __pyx_L10_except_error)
            }
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            goto __pyx_L9_exception_handled;
          }
          __pyx_L10_except_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_6);
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
          goto __pyx_L1_error;
          __pyx_L9_exception_handled:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_6);
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
          __pyx_L13_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_5) {
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__56, NULL);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 588, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
          goto __pyx_L7;
        }
        __pyx_L7:;
      }
      goto __pyx_L19;
      __pyx_L4_error:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L1_error;
      __pyx_L19:;
    }

    /* "opendht.pyx":593
 *                 while pending > 0:
 *                     lock.wait()
 *             return ok             # <<<<<<<<<<<<<<
 *     def listen(self, InfoHash key, get_cb):
 *         t = ListenToken()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ok);
    __pyx_r = __pyx_cur_scope->__pyx_v_ok;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "opendht.pyx":567
 *                     lock.wait()
 *             return res
 *     def put(self, InfoHash key, Value val, done_cb=None):             # <<<<<<<<<<<<<<
 *         """Publish a new value on the DHT at key.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("opendht.DhtRunner.put", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cb_obj);
  __Pyx_XDECREF(__pyx_v_tmp_done);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":594
 *                     lock.wait()
 *             return ok
 *     def listen(self, InfoHash key, get_cb):             # <<<<<<<<<<<<<<
 *         t = ListenToken()
 *         t._h = key._infohash
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_39listen(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_39listen(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_key = 0;
  PyObject *__pyx_v_get_cb = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listen (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_get_cb,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_get_cb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("listen", 1, 2, 2, 1); __PYX_ERR(0, 594, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "listen") < 0)) __PYX_ERR(0, 594, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = ((struct __pyx_obj_7opendht_InfoHash *)values[0]);
    __pyx_v_get_cb = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("listen", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 594, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.DhtRunner.listen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_7opendht_InfoHash, 1, "key", 0))) __PYX_ERR(0, 594, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_38listen(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self), __pyx_v_key, __pyx_v_get_cb);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_38listen(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, struct __pyx_obj_7opendht_InfoHash *__pyx_v_key, PyObject *__pyx_v_get_cb) {
  struct __pyx_obj_7opendht_ListenToken *__pyx_v_t = NULL;
  PyObject *__pyx_v_cb_obj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  dht::InfoHash __pyx_t_2;
  __Pyx_RefNannySetupContext("listen", 0);

  /* "opendht.pyx":595
 *             return ok
 *     def listen(self, InfoHash key, get_cb):
 *         t = ListenToken()             # <<<<<<<<<<<<<<
 *         t._h = key._infohash
 *         cb_obj = {'get':get_cb}
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_ListenToken), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((struct __pyx_obj_7opendht_ListenToken *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":596
 *     def listen(self, InfoHash key, get_cb):
 *         t = ListenToken()
 *         t._h = key._infohash             # <<<<<<<<<<<<<<
 *         cb_obj = {'get':get_cb}
 *         t._cb['cb'] = cb_obj
 */
  __pyx_t_2 = __pyx_v_key->_infohash;
  __pyx_v_t->_h = __pyx_t_2;

  /* "opendht.pyx":597
 *         t = ListenToken()
 *         t._h = key._infohash
 *         cb_obj = {'get':get_cb}             # <<<<<<<<<<<<<<
 *         t._cb['cb'] = cb_obj
 *         # avoid the callback being destructed if the token is destroyed
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_get, __pyx_v_get_cb) < 0) __PYX_ERR(0, 597, __pyx_L1_error)
  __pyx_v_cb_obj = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":598
 *         t._h = key._infohash
 *         cb_obj = {'get':get_cb}
 *         t._cb['cb'] = cb_obj             # <<<<<<<<<<<<<<
 *         # avoid the callback being destructed if the token is destroyed
 *         ref.Py_INCREF(cb_obj)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_t), __pyx_n_s_cb); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_n_u_cb_2, __pyx_v_cb_obj) < 0)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "opendht.pyx":600
 *         t._cb['cb'] = cb_obj
 *         # avoid the callback being destructed if the token is destroyed
 *         ref.Py_INCREF(cb_obj)             # <<<<<<<<<<<<<<
 *         t._t = self.thisptr.get().listen(t._h, cpp.bindGetCb(get_callback, <void*>cb_obj)).share()
 *         return t
 */
  Py_INCREF(__pyx_v_cb_obj);

  /* "opendht.pyx":601
 *         # avoid the callback being destructed if the token is destroyed
 *         ref.Py_INCREF(cb_obj)
 *         t._t = self.thisptr.get().listen(t._h, cpp.bindGetCb(get_callback, <void*>cb_obj)).share()             # <<<<<<<<<<<<<<
 *         return t
 *     def cancelListen(self, ListenToken token):
 */
  __pyx_v_t->_t = __pyx_v_self->thisptr.get()->listen(__pyx_v_t->_h, dht::bindGetCb(__pyx_f_7opendht_get_callback, ((void *)__pyx_v_cb_obj))).share();

  /* "opendht.pyx":602
 *         ref.Py_INCREF(cb_obj)
 *         t._t = self.thisptr.get().listen(t._h, cpp.bindGetCb(get_callback, <void*>cb_obj)).share()
 *         return t             # <<<<<<<<<<<<<<
 *     def cancelListen(self, ListenToken token):
 *         self.thisptr.get().cancelListen(token._h, token._t)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_t));
  __pyx_r = ((PyObject *)__pyx_v_t);
  goto __pyx_L0;

  /* "opendht.pyx":594
 *                     lock.wait()
 *             return ok
 *     def listen(self, InfoHash key, get_cb):             # <<<<<<<<<<<<<<
 *         t = ListenToken()
 *         t._h = key._infohash
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.DhtRunner.listen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_cb_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":603
 *         t._t = self.thisptr.get().listen(t._h, cpp.bindGetCb(get_callback, <void*>cb_obj)).share()
 *         return t
 *     def cancelListen(self, ListenToken token):             # <<<<<<<<<<<<<<
 *         self.thisptr.get().cancelListen(token._h, token._t)
 *         ref.Py_DECREF(<object>token._cb['cb'])
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_41cancelListen(PyObject *__pyx_v_self, PyObject *__pyx_v_token); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_41cancelListen(PyObject *__pyx_v_self, PyObject *__pyx_v_token) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancelListen (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_token), __pyx_ptype_7opendht_ListenToken, 1, "token", 0))) __PYX_ERR(0, 603, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_40cancelListen(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self), ((struct __pyx_obj_7opendht_ListenToken *)__pyx_v_token));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_40cancelListen(struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, struct __pyx_obj_7opendht_ListenToken *__pyx_v_token) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("cancelListen", 0);

  /* "opendht.pyx":604
 *         return t
 *     def cancelListen(self, ListenToken token):
 *         self.thisptr.get().cancelListen(token._h, token._t)             # <<<<<<<<<<<<<<
 *         ref.Py_DECREF(<object>token._cb['cb'])
 *         # fixme: not thread safe
 */
  __pyx_v_self->thisptr.get()->cancelListen(__pyx_v_token->_h, __pyx_v_token->_t);

  /* "opendht.pyx":605
 *     def cancelListen(self, ListenToken token):
 *         self.thisptr.get().cancelListen(token._h, token._t)
 *         ref.Py_DECREF(<object>token._cb['cb'])             # <<<<<<<<<<<<<<
 *         # fixme: not thread safe
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_token), __pyx_n_s_cb); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_u_cb_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  Py_DECREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "opendht.pyx":603
 *         t._t = self.thisptr.get().listen(t._h, cpp.bindGetCb(get_callback, <void*>cb_obj)).share()
 *         return t
 *     def cancelListen(self, ListenToken token):             # <<<<<<<<<<<<<<
 *         self.thisptr.get().cancelListen(token._h, token._t)
 *         ref.Py_DECREF(<object>token._cb['cb'])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opendht.DhtRunner.cancelListen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_43__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_43__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_42__reduce_cython__(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_42__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.DhtRunner.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_9DhtRunner_45__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_9DhtRunner_45__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_9DhtRunner_44__setstate_cython__(((struct __pyx_obj_7opendht_DhtRunner *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_9DhtRunner_44__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_DhtRunner *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.DhtRunner.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":610
 * cdef class IndexValue(object):
 *     cdef cpp.shared_ptr[cpp.IndexValue] _value
 *     def __init__(self, InfoHash h=None, cpp.uint64_t vid=0):             # <<<<<<<<<<<<<<
 *        cdef cpp.InfoHash hh = h._infohash
 *        self._value.reset(new cpp.IndexValue(hh, vid))
 */

/* Python wrapper */
static int __pyx_pw_7opendht_10IndexValue_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opendht_10IndexValue_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_h = 0;
  uint64_t __pyx_v_vid;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_h,&__pyx_n_s_vid,0};
    PyObject* values[2] = {0,0};
    values[0] = (PyObject *)((struct __pyx_obj_7opendht_InfoHash *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vid);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 610, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_h = ((struct __pyx_obj_7opendht_InfoHash *)values[0]);
    if (values[1]) {
      __pyx_v_vid = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_vid == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L3_error)
    } else {
      __pyx_v_vid = ((uint64_t)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 610, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.IndexValue.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_h), __pyx_ptype_7opendht_InfoHash, 1, "h", 0))) __PYX_ERR(0, 610, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_10IndexValue___init__(((struct __pyx_obj_7opendht_IndexValue *)__pyx_v_self), __pyx_v_h, __pyx_v_vid);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_10IndexValue___init__(struct __pyx_obj_7opendht_IndexValue *__pyx_v_self, struct __pyx_obj_7opendht_InfoHash *__pyx_v_h, uint64_t __pyx_v_vid) {
  dht::InfoHash __pyx_v_hh;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  dht::InfoHash __pyx_t_1;
  dht::indexation::Value *__pyx_t_2;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "opendht.pyx":611
 *     cdef cpp.shared_ptr[cpp.IndexValue] _value
 *     def __init__(self, InfoHash h=None, cpp.uint64_t vid=0):
 *        cdef cpp.InfoHash hh = h._infohash             # <<<<<<<<<<<<<<
 *        self._value.reset(new cpp.IndexValue(hh, vid))
 *     def __str__(self):
 */
  __pyx_t_1 = __pyx_v_h->_infohash;
  __pyx_v_hh = __pyx_t_1;

  /* "opendht.pyx":612
 *     def __init__(self, InfoHash h=None, cpp.uint64_t vid=0):
 *        cdef cpp.InfoHash hh = h._infohash
 *        self._value.reset(new cpp.IndexValue(hh, vid))             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         return "(" + self.getKey().toString().decode() +", "+ str(self.getValueId()) +")"
 */
  try {
    __pyx_t_2 = new dht::indexation::Value(__pyx_v_hh, __pyx_v_vid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 612, __pyx_L1_error)
  }
  __pyx_v_self->_value.reset(__pyx_t_2);

  /* "opendht.pyx":610
 * cdef class IndexValue(object):
 *     cdef cpp.shared_ptr[cpp.IndexValue] _value
 *     def __init__(self, InfoHash h=None, cpp.uint64_t vid=0):             # <<<<<<<<<<<<<<
 *        cdef cpp.InfoHash hh = h._infohash
 *        self._value.reset(new cpp.IndexValue(hh, vid))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("opendht.IndexValue.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":613
 *        cdef cpp.InfoHash hh = h._infohash
 *        self._value.reset(new cpp.IndexValue(hh, vid))
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "(" + self.getKey().toString().decode() +", "+ str(self.getValueId()) +")"
 *     def getKey(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_10IndexValue_3__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_10IndexValue_3__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_10IndexValue_2__str__(((struct __pyx_obj_7opendht_IndexValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_10IndexValue_2__str__(struct __pyx_obj_7opendht_IndexValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "opendht.pyx":614
 *        self._value.reset(new cpp.IndexValue(hh, vid))
 *     def __str__(self):
 *         return "(" + self.getKey().toString().decode() +", "+ str(self.getValueId()) +")"             # <<<<<<<<<<<<<<
 *     def getKey(self):
 *         h = InfoHash()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getKey); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 614, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_toString); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 614, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 614, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_kp_u__59, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_4, __pyx_kp_u__60); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getValueId); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_kp_u__61); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":613
 *        cdef cpp.InfoHash hh = h._infohash
 *        self._value.reset(new cpp.IndexValue(hh, vid))
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "(" + self.getKey().toString().decode() +", "+ str(self.getValueId()) +")"
 *     def getKey(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opendht.IndexValue.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":615
 *     def __str__(self):
 *         return "(" + self.getKey().toString().decode() +", "+ str(self.getValueId()) +")"
 *     def getKey(self):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = self._value.get().first
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_10IndexValue_5getKey(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_10IndexValue_5getKey(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getKey (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_10IndexValue_4getKey(((struct __pyx_obj_7opendht_IndexValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_10IndexValue_4getKey(struct __pyx_obj_7opendht_IndexValue *__pyx_v_self) {
  struct __pyx_obj_7opendht_InfoHash *__pyx_v_h = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  dht::InfoHash __pyx_t_2;
  __Pyx_RefNannySetupContext("getKey", 0);

  /* "opendht.pyx":616
 *         return "(" + self.getKey().toString().decode() +", "+ str(self.getValueId()) +")"
 *     def getKey(self):
 *         h = InfoHash()             # <<<<<<<<<<<<<<
 *         h._infohash = self._value.get().first
 *         return h
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_InfoHash), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_h = ((struct __pyx_obj_7opendht_InfoHash *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":617
 *     def getKey(self):
 *         h = InfoHash()
 *         h._infohash = self._value.get().first             # <<<<<<<<<<<<<<
 *         return h
 *     def getValueId(self):
 */
  __pyx_t_2 = __pyx_v_self->_value.get()->first;
  __pyx_v_h->_infohash = __pyx_t_2;

  /* "opendht.pyx":618
 *         h = InfoHash()
 *         h._infohash = self._value.get().first
 *         return h             # <<<<<<<<<<<<<<
 *     def getValueId(self):
 *         return self._value.get().second
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  __pyx_r = ((PyObject *)__pyx_v_h);
  goto __pyx_L0;

  /* "opendht.pyx":615
 *     def __str__(self):
 *         return "(" + self.getKey().toString().decode() +", "+ str(self.getValueId()) +")"
 *     def getKey(self):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = self._value.get().first
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.IndexValue.getKey", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":619
 *         h._infohash = self._value.get().first
 *         return h
 *     def getValueId(self):             # <<<<<<<<<<<<<<
 *         return self._value.get().second
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_10IndexValue_7getValueId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_10IndexValue_7getValueId(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueId (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_10IndexValue_6getValueId(((struct __pyx_obj_7opendht_IndexValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_10IndexValue_6getValueId(struct __pyx_obj_7opendht_IndexValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getValueId", 0);

  /* "opendht.pyx":620
 *         return h
 *     def getValueId(self):
 *         return self._value.get().second             # <<<<<<<<<<<<<<
 * 
 * cdef class Pht(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->_value.get()->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":619
 *         h._infohash = self._value.get().first
 *         return h
 *     def getValueId(self):             # <<<<<<<<<<<<<<
 *         return self._value.get().second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.IndexValue.getValueId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_10IndexValue_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_10IndexValue_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_10IndexValue_8__reduce_cython__(((struct __pyx_obj_7opendht_IndexValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_10IndexValue_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_IndexValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.IndexValue.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_10IndexValue_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_10IndexValue_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_10IndexValue_10__setstate_cython__(((struct __pyx_obj_7opendht_IndexValue *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_10IndexValue_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_IndexValue *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.IndexValue.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":624
 * cdef class Pht(object):
 *     cdef cpp.Pht* thisptr
 *     def __cinit__(self, bytes name, key_spec, DhtRunner dht):             # <<<<<<<<<<<<<<
 *         cdef cpp.IndexKeySpec cpp_key_spec
 *         for kk, size in key_spec.items():
 */

/* Python wrapper */
static int __pyx_pw_7opendht_3Pht_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opendht_3Pht_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_key_spec = 0;
  struct __pyx_obj_7opendht_DhtRunner *__pyx_v_dht = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name_2,&__pyx_n_s_key_spec,&__pyx_n_s_dht,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key_spec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 624, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dht)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 624, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 624, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_name = ((PyObject*)values[0]);
    __pyx_v_key_spec = values[1];
    __pyx_v_dht = ((struct __pyx_obj_7opendht_DhtRunner *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 624, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Pht.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) __PYX_ERR(0, 624, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dht), __pyx_ptype_7opendht_DhtRunner, 1, "dht", 0))) __PYX_ERR(0, 624, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_3Pht___cinit__(((struct __pyx_obj_7opendht_Pht *)__pyx_v_self), __pyx_v_name, __pyx_v_key_spec, __pyx_v_dht);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opendht_3Pht___cinit__(struct __pyx_obj_7opendht_Pht *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_key_spec, struct __pyx_obj_7opendht_DhtRunner *__pyx_v_dht) {
  dht::indexation::Pht::KeySpec __pyx_v_cpp_key_spec;
  PyObject *__pyx_v_kk = NULL;
  PyObject *__pyx_v_size = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  uint32_t __pyx_t_8;
  std::string __pyx_t_9;
  dht::indexation::Pht *__pyx_t_10;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "opendht.pyx":626
 *     def __cinit__(self, bytes name, key_spec, DhtRunner dht):
 *         cdef cpp.IndexKeySpec cpp_key_spec
 *         for kk, size in key_spec.items():             # <<<<<<<<<<<<<<
 *             cpp_key_spec[bytes(kk, 'utf-8')] = size
 *         self.thisptr = new cpp.Pht(name, cpp_key_spec, dht.thisptr)
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_key_spec == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "items");
    __PYX_ERR(0, 626, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_key_spec, 0, __pyx_n_s_items, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 626, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_kk, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_size, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "opendht.pyx":627
 *         cdef cpp.IndexKeySpec cpp_key_spec
 *         for kk, size in key_spec.items():
 *             cpp_key_spec[bytes(kk, 'utf-8')] = size             # <<<<<<<<<<<<<<
 *         self.thisptr = new cpp.Pht(name, cpp_key_spec, dht.thisptr)
 *     property MAX_NODE_ENTRY_COUNT:
 */
    __pyx_t_8 = __Pyx_PyInt_As_uint32_t(__pyx_v_size); if (unlikely((__pyx_t_8 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L1_error)
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_kk);
    __Pyx_GIVEREF(__pyx_v_kk);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_kk);
    __Pyx_INCREF(__pyx_kp_u_utf_8);
    __Pyx_GIVEREF(__pyx_kp_u_utf_8);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_kp_u_utf_8);
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyBytes_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_cpp_key_spec[__pyx_t_9]) = __pyx_t_8;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "opendht.pyx":628
 *         for kk, size in key_spec.items():
 *             cpp_key_spec[bytes(kk, 'utf-8')] = size
 *         self.thisptr = new cpp.Pht(name, cpp_key_spec, dht.thisptr)             # <<<<<<<<<<<<<<
 *     property MAX_NODE_ENTRY_COUNT:
 *         def __get__(self):
 */
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L1_error)
  try {
    __pyx_t_10 = new dht::indexation::Pht(__pyx_t_9, __pyx_v_cpp_key_spec, __pyx_v_dht->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 628, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_10;

  /* "opendht.pyx":624
 * cdef class Pht(object):
 *     cdef cpp.Pht* thisptr
 *     def __cinit__(self, bytes name, key_spec, DhtRunner dht):             # <<<<<<<<<<<<<<
 *         cdef cpp.IndexKeySpec cpp_key_spec
 *         for kk, size in key_spec.items():
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("opendht.Pht.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kk);
  __Pyx_XDECREF(__pyx_v_size);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":630
 *         self.thisptr = new cpp.Pht(name, cpp_key_spec, dht.thisptr)
 *     property MAX_NODE_ENTRY_COUNT:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return cpp.PHT_MAX_NODE_ENTRY_COUNT
 *     def lookup(self, key, lookup_cb=None, done_cb=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_3Pht_20MAX_NODE_ENTRY_COUNT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opendht_3Pht_20MAX_NODE_ENTRY_COUNT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_3Pht_20MAX_NODE_ENTRY_COUNT___get__(((struct __pyx_obj_7opendht_Pht *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_3Pht_20MAX_NODE_ENTRY_COUNT___get__(CYTHON_UNUSED struct __pyx_obj_7opendht_Pht *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "opendht.pyx":631
 *     property MAX_NODE_ENTRY_COUNT:
 *         def __get__(self):
 *             return cpp.PHT_MAX_NODE_ENTRY_COUNT             # <<<<<<<<<<<<<<
 *     def lookup(self, key, lookup_cb=None, done_cb=None):
 *         """Query the Index with a specified key.
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(dht::indexation::Pht::MAX_NODE_ENTRY_COUNT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "opendht.pyx":630
 *         self.thisptr = new cpp.Pht(name, cpp_key_spec, dht.thisptr)
 *     property MAX_NODE_ENTRY_COUNT:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return cpp.PHT_MAX_NODE_ENTRY_COUNT
 *     def lookup(self, key, lookup_cb=None, done_cb=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Pht.MAX_NODE_ENTRY_COUNT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":632
 *         def __get__(self):
 *             return cpp.PHT_MAX_NODE_ENTRY_COUNT
 *     def lookup(self, key, lookup_cb=None, done_cb=None):             # <<<<<<<<<<<<<<
 *         """Query the Index with a specified key.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_3Pht_3lookup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7opendht_3Pht_2lookup[] = "Query the Index with a specified key.\n\n        key       -- the key for to the entry in the index.\n        lookup_cb -- function called when the operation is completed. This\n                     function takes a list of IndexValue objects and a string\n                     representation of the prefix where the value was indexed in\n                     the PHT.\n        ";
static PyObject *__pyx_pw_7opendht_3Pht_3lookup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_lookup_cb = 0;
  PyObject *__pyx_v_done_cb = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lookup (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_lookup_cb,&__pyx_n_s_done_cb,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lookup_cb);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_done_cb);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lookup") < 0)) __PYX_ERR(0, 632, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = values[0];
    __pyx_v_lookup_cb = values[1];
    __pyx_v_done_cb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lookup", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 632, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Pht.lookup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht_3Pht_2lookup(((struct __pyx_obj_7opendht_Pht *)__pyx_v_self), __pyx_v_key, __pyx_v_lookup_cb, __pyx_v_done_cb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_3Pht_2lookup(struct __pyx_obj_7opendht_Pht *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_lookup_cb, PyObject *__pyx_v_done_cb) {
  PyObject *__pyx_v_cb_obj = NULL;
  dht::indexation::Pht::Key __pyx_v_cppk;
  PyObject *__pyx_v_kk = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  std::vector<uint8_t>  __pyx_t_8;
  std::string __pyx_t_9;
  __Pyx_RefNannySetupContext("lookup", 0);

  /* "opendht.pyx":641
 *                      the PHT.
 *         """
 *         cb_obj = {'lookup':lookup_cb, 'done':done_cb} # TODO: donecallback is to be removed             # <<<<<<<<<<<<<<
 *         ref.Py_INCREF(cb_obj)
 *         cdef cpp.IndexKey cppk
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_lookup, __pyx_v_lookup_cb) < 0) __PYX_ERR(0, 641, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_done, __pyx_v_done_cb) < 0) __PYX_ERR(0, 641, __pyx_L1_error)
  __pyx_v_cb_obj = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":642
 *         """
 *         cb_obj = {'lookup':lookup_cb, 'done':done_cb} # TODO: donecallback is to be removed
 *         ref.Py_INCREF(cb_obj)             # <<<<<<<<<<<<<<
 *         cdef cpp.IndexKey cppk
 *         for kk, v in key.items():
 */
  Py_INCREF(__pyx_v_cb_obj);

  /* "opendht.pyx":644
 *         ref.Py_INCREF(cb_obj)
 *         cdef cpp.IndexKey cppk
 *         for kk, v in key.items():             # <<<<<<<<<<<<<<
 *             cppk[bytes(kk, 'utf-8')] = bytes(v)
 *         self.thisptr.lookup(
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_key == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "items");
    __PYX_ERR(0, 644, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_key, 0, __pyx_n_s_items, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_kk, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "opendht.pyx":645
 *         cdef cpp.IndexKey cppk
 *         for kk, v in key.items():
 *             cppk[bytes(kk, 'utf-8')] = bytes(v)             # <<<<<<<<<<<<<<
 *         self.thisptr.lookup(
 *                 cppk,
 */
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_v);
    __Pyx_GIVEREF(__pyx_v_v);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_v);
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyBytes_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = __pyx_convert_vector_from_py_uint8_t(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_kk);
    __Pyx_GIVEREF(__pyx_v_kk);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_kk);
    __Pyx_INCREF(__pyx_kp_u_utf_8);
    __Pyx_GIVEREF(__pyx_kp_u_utf_8);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_kp_u_utf_8);
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyBytes_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    (__pyx_v_cppk[__pyx_t_9]) = __pyx_t_8;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "opendht.pyx":646
 *         for kk, v in key.items():
 *             cppk[bytes(kk, 'utf-8')] = bytes(v)
 *         self.thisptr.lookup(             # <<<<<<<<<<<<<<
 *                 cppk,
 *                 cpp.Pht.bindLookupCb(lookup_callback, <void*>cb_obj),
 */
  __pyx_v_self->thisptr->lookup(__pyx_v_cppk, dht::indexation::Pht::bindLookupCb(__pyx_f_7opendht_lookup_callback, ((void *)__pyx_v_cb_obj)), dht::bindDoneCbSimple(__pyx_f_7opendht_done_callback_simple, ((void *)__pyx_v_cb_obj)));

  /* "opendht.pyx":632
 *         def __get__(self):
 *             return cpp.PHT_MAX_NODE_ENTRY_COUNT
 *     def lookup(self, key, lookup_cb=None, done_cb=None):             # <<<<<<<<<<<<<<
 *         """Query the Index with a specified key.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("opendht.Pht.lookup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cb_obj);
  __Pyx_XDECREF(__pyx_v_kk);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "opendht.pyx":651
 *                 cpp.bindDoneCbSimple(done_callback_simple, <void*>cb_obj)
 *         )
 *     def insert(self, key, IndexValue value, done_cb=None):             # <<<<<<<<<<<<<<
 *         """Add an index entry to the Index.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_3Pht_5insert(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7opendht_3Pht_4insert[] = "Add an index entry to the Index.\n\n        key     -- the key for to the entry in the index.\n        value   -- an IndexValue object describing the indexed value.\n        done_cb -- Called when the operation is completed.\n        ";
static PyObject *__pyx_pw_7opendht_3Pht_5insert(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  struct __pyx_obj_7opendht_IndexValue *__pyx_v_value = 0;
  PyObject *__pyx_v_done_cb = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insert (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_value,&__pyx_n_s_done_cb,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert", 0, 2, 3, 1); __PYX_ERR(0, 651, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_done_cb);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "insert") < 0)) __PYX_ERR(0, 651, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = values[0];
    __pyx_v_value = ((struct __pyx_obj_7opendht_IndexValue *)values[1]);
    __pyx_v_done_cb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insert", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 651, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.Pht.insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7opendht_IndexValue, 1, "value", 0))) __PYX_ERR(0, 651, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opendht_3Pht_4insert(((struct __pyx_obj_7opendht_Pht *)__pyx_v_self), __pyx_v_key, __pyx_v_value, __pyx_v_done_cb);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_3Pht_4insert(struct __pyx_obj_7opendht_Pht *__pyx_v_self, PyObject *__pyx_v_key, struct __pyx_obj_7opendht_IndexValue *__pyx_v_value, PyObject *__pyx_v_done_cb) {
  PyObject *__pyx_v_cb_obj = NULL;
  dht::indexation::Pht::Key __pyx_v_cppk;
  PyObject *__pyx_v_kk = NULL;
  PyObject *__pyx_v_v = NULL;
  dht::indexation::Value __pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  std::vector<uint8_t>  __pyx_t_8;
  std::string __pyx_t_9;
  dht::InfoHash __pyx_t_10;
  uint64_t __pyx_t_11;
  __Pyx_RefNannySetupContext("insert", 0);

  /* "opendht.pyx":658
 *         done_cb -- Called when the operation is completed.
 *         """
 *         cb_obj = {'done':done_cb}             # <<<<<<<<<<<<<<
 *         ref.Py_INCREF(cb_obj)
 *         cdef cpp.IndexKey cppk
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_done, __pyx_v_done_cb) < 0) __PYX_ERR(0, 658, __pyx_L1_error)
  __pyx_v_cb_obj = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "opendht.pyx":659
 *         """
 *         cb_obj = {'done':done_cb}
 *         ref.Py_INCREF(cb_obj)             # <<<<<<<<<<<<<<
 *         cdef cpp.IndexKey cppk
 *         for kk, v in key.items():
 */
  Py_INCREF(__pyx_v_cb_obj);

  /* "opendht.pyx":661
 *         ref.Py_INCREF(cb_obj)
 *         cdef cpp.IndexKey cppk
 *         for kk, v in key.items():             # <<<<<<<<<<<<<<
 *             cppk[bytes(kk, 'utf-8')] = bytes(v)
 *         cdef cpp.IndexValue val
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_key == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "items");
    __PYX_ERR(0, 661, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_key, 0, __pyx_n_s_items, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_kk, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "opendht.pyx":662
 *         cdef cpp.IndexKey cppk
 *         for kk, v in key.items():
 *             cppk[bytes(kk, 'utf-8')] = bytes(v)             # <<<<<<<<<<<<<<
 *         cdef cpp.IndexValue val
 *         val.first = (<InfoHash>value.getKey())._infohash
 */
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_v);
    __Pyx_GIVEREF(__pyx_v_v);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_v);
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyBytes_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = __pyx_convert_vector_from_py_uint8_t(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_kk);
    __Pyx_GIVEREF(__pyx_v_kk);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_kk);
    __Pyx_INCREF(__pyx_kp_u_utf_8);
    __Pyx_GIVEREF(__pyx_kp_u_utf_8);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_kp_u_utf_8);
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyBytes_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    (__pyx_v_cppk[__pyx_t_9]) = __pyx_t_8;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "opendht.pyx":664
 *             cppk[bytes(kk, 'utf-8')] = bytes(v)
 *         cdef cpp.IndexValue val
 *         val.first = (<InfoHash>value.getKey())._infohash             # <<<<<<<<<<<<<<
 *         val.second = value.getValueId()
 *         self.thisptr.insert(
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_value), __pyx_n_s_getKey); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 664, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 664, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_10 = ((struct __pyx_obj_7opendht_InfoHash *)__pyx_t_1)->_infohash;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_val.first = __pyx_t_10;

  /* "opendht.pyx":665
 *         cdef cpp.IndexValue val
 *         val.first = (<InfoHash>value.getKey())._infohash
 *         val.second = value.getValueId()             # <<<<<<<<<<<<<<
 *         self.thisptr.insert(
 *                 cppk,
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_value), __pyx_n_s_getValueId); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 665, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_11 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_val.second = __pyx_t_11;

  /* "opendht.pyx":666
 *         val.first = (<InfoHash>value.getKey())._infohash
 *         val.second = value.getValueId()
 *         self.thisptr.insert(             # <<<<<<<<<<<<<<
 *                 cppk,
 *                 val,
 */
  __pyx_v_self->thisptr->insert(__pyx_v_cppk, __pyx_v_val, dht::bindDoneCbSimple(__pyx_f_7opendht_done_callback_simple, ((void *)__pyx_v_cb_obj)));

  /* "opendht.pyx":651
 *                 cpp.bindDoneCbSimple(done_callback_simple, <void*>cb_obj)
 *         )
 *     def insert(self, key, IndexValue value, done_cb=None):             # <<<<<<<<<<<<<<
 *         """Add an index entry to the Index.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("opendht.Pht.insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cb_obj);
  __Pyx_XDECREF(__pyx_v_kk);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_3Pht_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opendht_3Pht_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_3Pht_6__reduce_cython__(((struct __pyx_obj_7opendht_Pht *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_3Pht_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Pht *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Pht.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_3Pht_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opendht_3Pht_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opendht_3Pht_8__setstate_cython__(((struct __pyx_obj_7opendht_Pht *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht_3Pht_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opendht_Pht *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opendht.Pht.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle__WithID(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opendht_1__pyx_unpickle__WithID(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opendht_1__pyx_unpickle__WithID = {"__pyx_unpickle__WithID", (PyCFunction)__pyx_pw_7opendht_1__pyx_unpickle__WithID, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opendht_1__pyx_unpickle__WithID(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle__WithID (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle__WithID", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle__WithID", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle__WithID") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle__WithID", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opendht.__pyx_unpickle__WithID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opendht___pyx_unpickle__WithID(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opendht___pyx_unpickle__WithID(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = NULL;
  PyObject *__pyx_v___pyx_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__pyx_unpickle__WithID", 0);

  /* "(tree fragment)":2
 * def __pyx_unpickle__WithID(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":3
 * def __pyx_unpickle__WithID(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = _WithID.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":4
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = _WithID.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 4, __pyx_L1_error)

    /* "(tree fragment)":2
 * def __pyx_unpickle__WithID(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":5
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = _WithID.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle__WithID__set_state(<_WithID> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7opendht__WithID), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v___pyx_type);
      __Pyx_GIVEREF(__pyx_v___pyx_type);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v___pyx_type);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = _WithID.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle__WithID__set_state(<_WithID> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":7
 *     __pyx_result = _WithID.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle__WithID__set_state(<_WithID> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle__WithID__set_state(_WithID __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 7, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_7opendht___pyx_unpickle__WithID__set_state(((struct __pyx_obj_7opendht__WithID *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = _WithID.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle__WithID__set_state(<_WithID> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":8
 *     if __pyx_state is not None:
 *         __pyx_unpickle__WithID__set_state(<_WithID> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle__WithID__set_state(_WithID __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle__WithID(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("opendht.__pyx_unpickle__WithID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":9
 *         __pyx_unpickle__WithID__set_state(<_WithID> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle__WithID__set_state(_WithID __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_7opendht___pyx_unpickle__WithID__set_state(struct __pyx_obj_7opendht__WithID *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle__WithID__set_state", 0);

  /* "(tree fragment)":10
 *     return __pyx_result
 * cdef __pyx_unpickle__WithID__set_state(_WithID __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":11
 * cdef __pyx_unpickle__WithID__set_state(_WithID __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 11, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 11, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_6};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 11, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_6};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 11, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 11, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 11, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":10
 *     return __pyx_result
 * cdef __pyx_unpickle__WithID__set_state(_WithID __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":9
 *         __pyx_unpickle__WithID__set_state(<_WithID> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle__WithID__set_state(_WithID __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("opendht.__pyx_unpickle__WithID__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_uint8_t")
 * cdef vector[X] __pyx_convert_vector_from_py_uint8_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<uint8_t>  __pyx_convert_vector_from_py_uint8_t(PyObject *__pyx_v_o) {
  std::vector<uint8_t>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<uint8_t>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  uint8_t __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_uint8_t", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_uint8_t(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_uint8_t(__pyx_v_item); if (unlikely((__pyx_t_5 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((uint8_t)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_uint8_t(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_uint8_t")
 * cdef vector[X] __pyx_convert_vector_from_py_uint8_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_uint8_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_7opendht__WithID(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_7opendht__WithID(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7opendht__WithID[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_7_WithID_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_7_WithID_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht__WithID = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht._WithID", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht__WithID), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht__WithID, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_7opendht_7_WithID_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_7opendht_7_WithID_3__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht__WithID, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht__WithID, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_InfoHash(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opendht_InfoHash *p;
  PyObject *o = __pyx_tp_new_7opendht__WithID(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_InfoHash *)o);
  new((void*)&(p->_infohash)) dht::InfoHash();
  if (unlikely(__pyx_pw_7opendht_8InfoHash_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7opendht_InfoHash(PyObject *o) {
  struct __pyx_obj_7opendht_InfoHash *p = (struct __pyx_obj_7opendht_InfoHash *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_infohash);
  __pyx_tp_dealloc_7opendht__WithID(o);
}

static PyMethodDef __pyx_methods_7opendht_InfoHash[] = {
  {"getBit", (PyCFunction)__pyx_pw_7opendht_8InfoHash_7getBit, METH_O, 0},
  {"setBit", (PyCFunction)__pyx_pw_7opendht_8InfoHash_9setBit, METH_VARARGS|METH_KEYWORDS, 0},
  {"getId", (PyCFunction)__pyx_pw_7opendht_8InfoHash_11getId, METH_NOARGS, 0},
  {"toString", (PyCFunction)__pyx_pw_7opendht_8InfoHash_13toString, METH_NOARGS, 0},
  {"toFloat", (PyCFunction)__pyx_pw_7opendht_8InfoHash_15toFloat, METH_NOARGS, 0},
  {"commonBits", (PyCFunction)__pyx_pw_7opendht_8InfoHash_17commonBits, METH_VARARGS|METH_KEYWORDS, 0},
  {"get", (PyCFunction)__pyx_pw_7opendht_8InfoHash_19get, METH_VARARGS|METH_KEYWORDS, 0},
  {"getRandom", (PyCFunction)__pyx_pw_7opendht_8InfoHash_21getRandom, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_8InfoHash_23__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_8InfoHash_25__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_InfoHash = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  __pyx_pw_7opendht_8InfoHash_3__bool__, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_7opendht_InfoHash = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.InfoHash", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_InfoHash), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_InfoHash, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opendht_7_WithID_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  &__pyx_tp_as_number_InfoHash, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opendht_7_WithID_3__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_7opendht_8InfoHash_5__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_InfoHash, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_InfoHash, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_SockAddr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opendht_SockAddr *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_SockAddr *)o);
  new((void*)&(p->_addr)) dht::SockAddr();
  return o;
}

static void __pyx_tp_dealloc_7opendht_SockAddr(PyObject *o) {
  struct __pyx_obj_7opendht_SockAddr *p = (struct __pyx_obj_7opendht_SockAddr *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_addr);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7opendht_SockAddr[] = {
  {"toString", (PyCFunction)__pyx_pw_7opendht_8SockAddr_1toString, METH_NOARGS, 0},
  {"getPort", (PyCFunction)__pyx_pw_7opendht_8SockAddr_3getPort, METH_NOARGS, 0},
  {"getFamily", (PyCFunction)__pyx_pw_7opendht_8SockAddr_5getFamily, METH_NOARGS, 0},
  {"setPort", (PyCFunction)__pyx_pw_7opendht_8SockAddr_7setPort, METH_O, 0},
  {"setFamily", (PyCFunction)__pyx_pw_7opendht_8SockAddr_9setFamily, METH_O, 0},
  {"isLoopback", (PyCFunction)__pyx_pw_7opendht_8SockAddr_11isLoopback, METH_NOARGS, 0},
  {"isPrivate", (PyCFunction)__pyx_pw_7opendht_8SockAddr_13isPrivate, METH_NOARGS, 0},
  {"isUnspecified", (PyCFunction)__pyx_pw_7opendht_8SockAddr_15isUnspecified, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_8SockAddr_21__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_8SockAddr_23__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_SockAddr = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.SockAddr", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_SockAddr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_SockAddr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_7opendht_8SockAddr_19__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_7opendht_8SockAddr_17__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_SockAddr, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_SockAddr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_Node(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opendht_Node *p;
  PyObject *o = __pyx_tp_new_7opendht__WithID(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_Node *)o);
  new((void*)&(p->_node)) std::shared_ptr<dht::Node> ();
  return o;
}

static void __pyx_tp_dealloc_7opendht_Node(PyObject *o) {
  struct __pyx_obj_7opendht_Node *p = (struct __pyx_obj_7opendht_Node *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_node);
  __pyx_tp_dealloc_7opendht__WithID(o);
}

static PyMethodDef __pyx_methods_7opendht_Node[] = {
  {"getId", (PyCFunction)__pyx_pw_7opendht_4Node_1getId, METH_NOARGS, 0},
  {"getAddr", (PyCFunction)__pyx_pw_7opendht_4Node_3getAddr, METH_NOARGS, 0},
  {"isExpired", (PyCFunction)__pyx_pw_7opendht_4Node_5isExpired, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_4Node_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_4Node_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_Node = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.Node", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_Node), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_Node, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opendht_7_WithID_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opendht_7_WithID_3__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_Node, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_Node, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_NodeEntry(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opendht_NodeEntry *p;
  PyObject *o = __pyx_tp_new_7opendht__WithID(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_NodeEntry *)o);
  new((void*)&(p->_v)) std::pair<dht::InfoHash,std::shared_ptr<dht::Node> > ();
  return o;
}

static void __pyx_tp_dealloc_7opendht_NodeEntry(PyObject *o) {
  struct __pyx_obj_7opendht_NodeEntry *p = (struct __pyx_obj_7opendht_NodeEntry *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_v);
  __pyx_tp_dealloc_7opendht__WithID(o);
}

static PyMethodDef __pyx_methods_7opendht_NodeEntry[] = {
  {"getId", (PyCFunction)__pyx_pw_7opendht_9NodeEntry_1getId, METH_NOARGS, 0},
  {"getNode", (PyCFunction)__pyx_pw_7opendht_9NodeEntry_3getNode, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_9NodeEntry_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_9NodeEntry_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_NodeEntry = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.NodeEntry", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_NodeEntry), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_NodeEntry, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opendht_7_WithID_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opendht_7_WithID_3__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_NodeEntry, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_NodeEntry, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_Query(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opendht_Query *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_Query *)o);
  new((void*)&(p->_query)) dht::Query();
  if (unlikely(__pyx_pw_7opendht_5Query_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7opendht_Query(PyObject *o) {
  struct __pyx_obj_7opendht_Query *p = (struct __pyx_obj_7opendht_Query *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_query);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7opendht_Query[] = {
  {"buildFrom", (PyCFunction)__pyx_pw_7opendht_5Query_5buildFrom, METH_VARARGS|METH_KEYWORDS, 0},
  {"isSatisfiedBy", (PyCFunction)__pyx_pw_7opendht_5Query_7isSatisfiedBy, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_5Query_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_5Query_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_Query = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.Query", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_Query), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_Query, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_7opendht_5Query_3__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_Query, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_Query, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_Select(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opendht_Select *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_Select *)o);
  new((void*)&(p->_select)) dht::Select();
  if (unlikely(__pyx_pw_7opendht_6Select_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7opendht_Select(PyObject *o) {
  struct __pyx_obj_7opendht_Select *p = (struct __pyx_obj_7opendht_Select *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_select);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7opendht_Select[] = {
  {"isSatisfiedBy", (PyCFunction)__pyx_pw_7opendht_6Select_5isSatisfiedBy, METH_O, 0},
  {"field", (PyCFunction)__pyx_pw_7opendht_6Select_7field, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_6Select_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_6Select_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_Select = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.Select", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_Select), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_Select, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_7opendht_6Select_3__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_Select, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_Select, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_Where(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opendht_Where *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_Where *)o);
  new((void*)&(p->_where)) dht::Where();
  if (unlikely(__pyx_pw_7opendht_5Where_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7opendht_Where(PyObject *o) {
  struct __pyx_obj_7opendht_Where *p = (struct __pyx_obj_7opendht_Where *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_where);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7opendht_Where[] = {
  {"isSatisfiedBy", (PyCFunction)__pyx_pw_7opendht_5Where_5isSatisfiedBy, METH_O, 0},
  {"id", (PyCFunction)__pyx_pw_7opendht_5Where_7id, METH_O, 0},
  {"valueType", (PyCFunction)__pyx_pw_7opendht_5Where_9valueType, METH_O, 0},
  {"owner", (PyCFunction)__pyx_pw_7opendht_5Where_11owner, METH_O, 0},
  {"seq", (PyCFunction)__pyx_pw_7opendht_5Where_13seq, METH_O, 0},
  {"userType", (PyCFunction)__pyx_pw_7opendht_5Where_15userType, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_5Where_17__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_5Where_19__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_Where = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.Where", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_Where), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_Where, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_7opendht_5Where_3__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_Where, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_Where, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_Value(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opendht_Value *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_Value *)o);
  new((void*)&(p->_value)) std::shared_ptr<dht::Value> ();
  return o;
}

static void __pyx_tp_dealloc_7opendht_Value(PyObject *o) {
  struct __pyx_obj_7opendht_Value *p = (struct __pyx_obj_7opendht_Value *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_value);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7opendht_5Value_owner(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opendht_5Value_5owner_1__get__(o);
}

static PyObject *__pyx_getprop_7opendht_5Value_recipient(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opendht_5Value_9recipient_1__get__(o);
}

static int __pyx_setprop_7opendht_5Value_recipient(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7opendht_5Value_9recipient_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7opendht_5Value_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opendht_5Value_4data_1__get__(o);
}

static int __pyx_setprop_7opendht_5Value_data(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7opendht_5Value_4data_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7opendht_5Value_user_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opendht_5Value_9user_type_1__get__(o);
}

static int __pyx_setprop_7opendht_5Value_user_type(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7opendht_5Value_9user_type_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7opendht_5Value_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opendht_5Value_2id_1__get__(o);
}

static int __pyx_setprop_7opendht_5Value_id(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7opendht_5Value_2id_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7opendht_5Value_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opendht_5Value_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_7opendht_Value[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_5Value_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_5Value_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7opendht_Value[] = {
  {(char *)"owner", __pyx_getprop_7opendht_5Value_owner, 0, (char *)0, 0},
  {(char *)"recipient", __pyx_getprop_7opendht_5Value_recipient, __pyx_setprop_7opendht_5Value_recipient, (char *)0, 0},
  {(char *)"data", __pyx_getprop_7opendht_5Value_data, __pyx_setprop_7opendht_5Value_data, (char *)0, 0},
  {(char *)"user_type", __pyx_getprop_7opendht_5Value_user_type, __pyx_setprop_7opendht_5Value_user_type, (char *)0, 0},
  {(char *)"id", __pyx_getprop_7opendht_5Value_id, __pyx_setprop_7opendht_5Value_id, (char *)0, 0},
  {(char *)"size", __pyx_getprop_7opendht_5Value_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_Value = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.Value", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_Value), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_Value, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_7opendht_5Value_3__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_Value, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7opendht_Value, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7opendht_5Value_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_Value, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_NodeSetIter(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opendht_NodeSetIter *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_NodeSetIter *)o);
  new((void*)&(p->_curIter)) std::map<dht::InfoHash,std::shared_ptr<dht::Node> > ::iterator();
  return o;
}

static void __pyx_tp_dealloc_7opendht_NodeSetIter(PyObject *o) {
  struct __pyx_obj_7opendht_NodeSetIter *p = (struct __pyx_obj_7opendht_NodeSetIter *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_curIter);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7opendht_NodeSetIter[] = {
  {"__next__", (PyCFunction)__pyx_pw_7opendht_11NodeSetIter_3__next__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_11NodeSetIter_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_11NodeSetIter_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_NodeSetIter = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.NodeSetIter", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_NodeSetIter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_NodeSetIter, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  __pyx_pw_7opendht_11NodeSetIter_3__next__, /*tp_iternext*/
  __pyx_methods_7opendht_NodeSetIter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7opendht_11NodeSetIter_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_NodeSetIter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_NodeSet(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opendht_NodeSet *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_NodeSet *)o);
  new((void*)&(p->_nodes)) std::map<dht::InfoHash,std::shared_ptr<dht::Node> > ();
  return o;
}

static void __pyx_tp_dealloc_7opendht_NodeSet(PyObject *o) {
  struct __pyx_obj_7opendht_NodeSet *p = (struct __pyx_obj_7opendht_NodeSet *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_nodes);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7opendht_NodeSet[] = {
  {"size", (PyCFunction)__pyx_pw_7opendht_7NodeSet_1size, METH_NOARGS, 0},
  {"insert", (PyCFunction)__pyx_pw_7opendht_7NodeSet_3insert, METH_O, 0},
  {"extend", (PyCFunction)__pyx_pw_7opendht_7NodeSet_5extend, METH_O, 0},
  {"first", (PyCFunction)__pyx_pw_7opendht_7NodeSet_7first, METH_NOARGS, 0},
  {"last", (PyCFunction)__pyx_pw_7opendht_7NodeSet_9last, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_7NodeSet_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_7NodeSet_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_NodeSet = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.NodeSet", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_NodeSet), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_NodeSet, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_7opendht_7NodeSet_11__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7opendht_7NodeSet_13__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_NodeSet, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_NodeSet, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_PrivateKey(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opendht_PrivateKey *p;
  PyObject *o = __pyx_tp_new_7opendht__WithID(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_PrivateKey *)o);
  new((void*)&(p->_key)) std::shared_ptr<dht::crypto::PrivateKey> ();
  return o;
}

static void __pyx_tp_dealloc_7opendht_PrivateKey(PyObject *o) {
  struct __pyx_obj_7opendht_PrivateKey *p = (struct __pyx_obj_7opendht_PrivateKey *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_key);
  __pyx_tp_dealloc_7opendht__WithID(o);
}

static PyMethodDef __pyx_methods_7opendht_PrivateKey[] = {
  {"getId", (PyCFunction)__pyx_pw_7opendht_10PrivateKey_1getId, METH_NOARGS, 0},
  {"getPublicKey", (PyCFunction)__pyx_pw_7opendht_10PrivateKey_3getPublicKey, METH_NOARGS, 0},
  {"decrypt", (PyCFunction)__pyx_pw_7opendht_10PrivateKey_5decrypt, METH_O, 0},
  {"generate", (PyCFunction)__pyx_pw_7opendht_10PrivateKey_9generate, METH_VARARGS|METH_KEYWORDS, 0},
  {"generateEC", (PyCFunction)__pyx_pw_7opendht_10PrivateKey_11generateEC, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_10PrivateKey_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_10PrivateKey_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_PrivateKey = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.PrivateKey", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_PrivateKey), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_PrivateKey, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opendht_7_WithID_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_7opendht_10PrivateKey_7__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_PrivateKey, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_PrivateKey, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_PublicKey(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opendht_PublicKey *p;
  PyObject *o = __pyx_tp_new_7opendht__WithID(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_PublicKey *)o);
  new((void*)&(p->_key)) dht::crypto::PublicKey();
  return o;
}

static void __pyx_tp_dealloc_7opendht_PublicKey(PyObject *o) {
  struct __pyx_obj_7opendht_PublicKey *p = (struct __pyx_obj_7opendht_PublicKey *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_key);
  __pyx_tp_dealloc_7opendht__WithID(o);
}

static PyMethodDef __pyx_methods_7opendht_PublicKey[] = {
  {"getId", (PyCFunction)__pyx_pw_7opendht_9PublicKey_1getId, METH_NOARGS, 0},
  {"encrypt", (PyCFunction)__pyx_pw_7opendht_9PublicKey_3encrypt, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_9PublicKey_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_9PublicKey_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_PublicKey = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.PublicKey", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_PublicKey), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_PublicKey, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opendht_7_WithID_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opendht_7_WithID_3__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_PublicKey, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_PublicKey, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_Certificate(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opendht_Certificate *p;
  PyObject *o = __pyx_tp_new_7opendht__WithID(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_Certificate *)o);
  new((void*)&(p->_cert)) std::shared_ptr<dht::crypto::Certificate> ();
  return o;
}

static void __pyx_tp_dealloc_7opendht_Certificate(PyObject *o) {
  struct __pyx_obj_7opendht_Certificate *p = (struct __pyx_obj_7opendht_Certificate *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_cert);
  __pyx_tp_dealloc_7opendht__WithID(o);
}

static PyObject *__pyx_getprop_7opendht_11Certificate_issuer(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opendht_11Certificate_6issuer_1__get__(o);
}

static PyMethodDef __pyx_methods_7opendht_Certificate[] = {
  {"getId", (PyCFunction)__pyx_pw_7opendht_11Certificate_3getId, METH_NOARGS, 0},
  {"toString", (PyCFunction)__pyx_pw_7opendht_11Certificate_5toString, METH_NOARGS, 0},
  {"getName", (PyCFunction)__pyx_pw_7opendht_11Certificate_7getName, METH_NOARGS, 0},
  {"revoke", (PyCFunction)__pyx_pw_7opendht_11Certificate_9revoke, METH_VARARGS|METH_KEYWORDS, 0},
  {"__bytes__", (PyCFunction)__pyx_pw_7opendht_11Certificate_11__bytes__, METH_NOARGS, 0},
  {"generate", (PyCFunction)__pyx_pw_7opendht_11Certificate_13generate, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_11Certificate_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_11Certificate_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7opendht_Certificate[] = {
  {(char *)"issuer", __pyx_getprop_7opendht_11Certificate_issuer, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_Certificate = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.Certificate", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_Certificate), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_Certificate, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opendht_7_WithID_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opendht_7_WithID_3__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_Certificate, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7opendht_Certificate, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7opendht_11Certificate_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_Certificate, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_VerifyResult(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opendht_VerifyResult *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_VerifyResult *)o);
  new((void*)&(p->_result)) __pyx_t_11opendht_cpp_TrustListVerifyResult();
  return o;
}

static void __pyx_tp_dealloc_7opendht_VerifyResult(PyObject *o) {
  struct __pyx_obj_7opendht_VerifyResult *p = (struct __pyx_obj_7opendht_VerifyResult *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_result);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7opendht_VerifyResult[] = {
  {"__str", (PyCFunction)__pyx_pw_7opendht_12VerifyResult_3__str, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_12VerifyResult_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_12VerifyResult_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_VerifyResult = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  __pyx_pw_7opendht_12VerifyResult_1__bool__, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_7opendht_VerifyResult = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.VerifyResult", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_VerifyResult), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_VerifyResult, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_VerifyResult, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_VerifyResult, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_VerifyResult, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_TrustList(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opendht_TrustList *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_TrustList *)o);
  new((void*)&(p->_trust)) dht::crypto::TrustList();
  return o;
}

static void __pyx_tp_dealloc_7opendht_TrustList(PyObject *o) {
  struct __pyx_obj_7opendht_TrustList *p = (struct __pyx_obj_7opendht_TrustList *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_trust);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7opendht_TrustList[] = {
  {"add", (PyCFunction)__pyx_pw_7opendht_9TrustList_1add, METH_O, 0},
  {"remove", (PyCFunction)__pyx_pw_7opendht_9TrustList_3remove, METH_O, 0},
  {"verify", (PyCFunction)__pyx_pw_7opendht_9TrustList_5verify, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_9TrustList_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_9TrustList_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_TrustList = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.TrustList", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_TrustList), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_TrustList, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_TrustList, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_TrustList, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_ListenToken(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opendht_ListenToken *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_ListenToken *)o);
  new((void*)&(p->_h)) dht::InfoHash();
  new((void*)&(p->_t)) std::shared_future<size_t> ();
  return o;
}

static void __pyx_tp_dealloc_7opendht_ListenToken(PyObject *o) {
  struct __pyx_obj_7opendht_ListenToken *p = (struct __pyx_obj_7opendht_ListenToken *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_h);
  __Pyx_call_destructor(p->_t);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7opendht_ListenToken[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_11ListenToken_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_11ListenToken_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_ListenToken = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.ListenToken", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_ListenToken), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_ListenToken, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_ListenToken, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_ListenToken, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_Identity(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opendht_Identity *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_Identity *)o);
  new((void*)&(p->_id)) dht::crypto::Identity();
  return o;
}

static void __pyx_tp_dealloc_7opendht_Identity(PyObject *o) {
  struct __pyx_obj_7opendht_Identity *p = (struct __pyx_obj_7opendht_Identity *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_id);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7opendht_8Identity_publickey(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opendht_8Identity_9publickey_1__get__(o);
}

static PyObject *__pyx_getprop_7opendht_8Identity_certificate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opendht_8Identity_11certificate_1__get__(o);
}

static PyObject *__pyx_getprop_7opendht_8Identity_key(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opendht_8Identity_3key_1__get__(o);
}

static PyMethodDef __pyx_methods_7opendht_Identity[] = {
  {"generate", (PyCFunction)__pyx_pw_7opendht_8Identity_3generate, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_8Identity_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_8Identity_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7opendht_Identity[] = {
  {(char *)"publickey", __pyx_getprop_7opendht_8Identity_publickey, 0, (char *)0, 0},
  {(char *)"certificate", __pyx_getprop_7opendht_8Identity_certificate, 0, (char *)0, 0},
  {(char *)"key", __pyx_getprop_7opendht_8Identity_key, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_Identity = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.Identity", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_Identity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_Identity, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_Identity, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7opendht_Identity, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7opendht_8Identity_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_Identity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_DhtConfig(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opendht_DhtConfig *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_DhtConfig *)o);
  new((void*)&(p->_config)) __pyx_t_11opendht_cpp_DhtRunnerConfig();
  return o;
}

static void __pyx_tp_dealloc_7opendht_DhtConfig(PyObject *o) {
  struct __pyx_obj_7opendht_DhtConfig *p = (struct __pyx_obj_7opendht_DhtConfig *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_config);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7opendht_DhtConfig[] = {
  {"setIdentity", (PyCFunction)__pyx_pw_7opendht_9DhtConfig_3setIdentity, METH_O, 0},
  {"setBootstrapMode", (PyCFunction)__pyx_pw_7opendht_9DhtConfig_5setBootstrapMode, METH_O, 0},
  {"setNodeId", (PyCFunction)__pyx_pw_7opendht_9DhtConfig_7setNodeId, METH_O, 0},
  {"setNetwork", (PyCFunction)__pyx_pw_7opendht_9DhtConfig_9setNetwork, METH_O, 0},
  {"setMaintainStorage", (PyCFunction)__pyx_pw_7opendht_9DhtConfig_11setMaintainStorage, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_9DhtConfig_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_9DhtConfig_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_DhtConfig = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.DhtConfig", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_DhtConfig), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_DhtConfig, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_DhtConfig, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7opendht_9DhtConfig_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_DhtConfig, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_DhtRunner(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opendht_DhtRunner *p;
  PyObject *o = __pyx_tp_new_7opendht__WithID(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_DhtRunner *)o);
  new((void*)&(p->thisptr)) std::shared_ptr<dht::DhtRunner> ();
  if (unlikely(__pyx_pw_7opendht_9DhtRunner_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7opendht_DhtRunner(PyObject *o) {
  struct __pyx_obj_7opendht_DhtRunner *p = (struct __pyx_obj_7opendht_DhtRunner *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->thisptr);
  __pyx_tp_dealloc_7opendht__WithID(o);
}

static PyMethodDef __pyx_methods_7opendht_DhtRunner[] = {
  {"getId", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_3getId, METH_NOARGS, 0},
  {"getNodeId", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_5getNodeId, METH_NOARGS, 0},
  {"ping", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_7ping, METH_VARARGS|METH_KEYWORDS, 0},
  {"bootstrap", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_9bootstrap, METH_VARARGS|METH_KEYWORDS, 0},
  {"run", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_11run, METH_VARARGS|METH_KEYWORDS, 0},
  {"join", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_13join, METH_NOARGS, 0},
  {"shutdown", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_15shutdown, METH_VARARGS|METH_KEYWORDS, 0},
  {"enableLogging", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_17enableLogging, METH_NOARGS, 0},
  {"disableLogging", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_19disableLogging, METH_NOARGS, 0},
  {"enableFileLogging", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_21enableFileLogging, METH_O, 0},
  {"isRunning", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_23isRunning, METH_NOARGS, 0},
  {"getBound", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_25getBound, METH_VARARGS|METH_KEYWORDS, 0},
  {"getStorageLog", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_27getStorageLog, METH_NOARGS, 0},
  {"getRoutingTablesLog", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_29getRoutingTablesLog, METH_O, 0},
  {"getSearchesLog", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_31getSearchesLog, METH_O, 0},
  {"getNodeMessageStats", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_33getNodeMessageStats, METH_NOARGS, 0},
  {"get", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_35get, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7opendht_9DhtRunner_34get},
  {"put", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_37put, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7opendht_9DhtRunner_36put},
  {"listen", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_39listen, METH_VARARGS|METH_KEYWORDS, 0},
  {"cancelListen", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_41cancelListen, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_43__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_9DhtRunner_45__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_DhtRunner = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.DhtRunner", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_DhtRunner), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_DhtRunner, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opendht_7_WithID_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opendht_7_WithID_3__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_DhtRunner, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_DhtRunner, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_IndexValue(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opendht_IndexValue *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opendht_IndexValue *)o);
  new((void*)&(p->_value)) std::shared_ptr<dht::indexation::Value> ();
  return o;
}

static void __pyx_tp_dealloc_7opendht_IndexValue(PyObject *o) {
  struct __pyx_obj_7opendht_IndexValue *p = (struct __pyx_obj_7opendht_IndexValue *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_value);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7opendht_IndexValue[] = {
  {"getKey", (PyCFunction)__pyx_pw_7opendht_10IndexValue_5getKey, METH_NOARGS, 0},
  {"getValueId", (PyCFunction)__pyx_pw_7opendht_10IndexValue_7getValueId, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_10IndexValue_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_10IndexValue_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_IndexValue = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.IndexValue", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_IndexValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_IndexValue, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_7opendht_10IndexValue_3__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_IndexValue, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7opendht_10IndexValue_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_IndexValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opendht_Pht(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7opendht_3Pht_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7opendht_Pht(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7opendht_3Pht_MAX_NODE_ENTRY_COUNT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opendht_3Pht_20MAX_NODE_ENTRY_COUNT_1__get__(o);
}

static PyMethodDef __pyx_methods_7opendht_Pht[] = {
  {"lookup", (PyCFunction)__pyx_pw_7opendht_3Pht_3lookup, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7opendht_3Pht_2lookup},
  {"insert", (PyCFunction)__pyx_pw_7opendht_3Pht_5insert, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7opendht_3Pht_4insert},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opendht_3Pht_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opendht_3Pht_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7opendht_Pht[] = {
  {(char *)"MAX_NODE_ENTRY_COUNT", __pyx_getprop_7opendht_3Pht_MAX_NODE_ENTRY_COUNT, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opendht_Pht = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.Pht", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht_Pht), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht_Pht, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opendht_Pht, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7opendht_Pht, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht_Pht, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_7opendht___pyx_scope_struct__ping *__pyx_freelist_7opendht___pyx_scope_struct__ping[8];
static int __pyx_freecount_7opendht___pyx_scope_struct__ping = 0;

static PyObject *__pyx_tp_new_7opendht___pyx_scope_struct__ping(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7opendht___pyx_scope_struct__ping > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7opendht___pyx_scope_struct__ping)))) {
    o = (PyObject*)__pyx_freelist_7opendht___pyx_scope_struct__ping[--__pyx_freecount_7opendht___pyx_scope_struct__ping];
    memset(o, 0, sizeof(struct __pyx_obj_7opendht___pyx_scope_struct__ping));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7opendht___pyx_scope_struct__ping(PyObject *o) {
  struct __pyx_obj_7opendht___pyx_scope_struct__ping *p = (struct __pyx_obj_7opendht___pyx_scope_struct__ping *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_lock);
  Py_CLEAR(p->__pyx_v_ok);
  Py_CLEAR(p->__pyx_v_pending);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7opendht___pyx_scope_struct__ping < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7opendht___pyx_scope_struct__ping)))) {
    __pyx_freelist_7opendht___pyx_scope_struct__ping[__pyx_freecount_7opendht___pyx_scope_struct__ping++] = ((struct __pyx_obj_7opendht___pyx_scope_struct__ping *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7opendht___pyx_scope_struct__ping(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7opendht___pyx_scope_struct__ping *p = (struct __pyx_obj_7opendht___pyx_scope_struct__ping *)o;
  if (p->__pyx_v_lock) {
    e = (*v)(p->__pyx_v_lock, a); if (e) return e;
  }
  if (p->__pyx_v_ok) {
    e = (*v)(p->__pyx_v_ok, a); if (e) return e;
  }
  if (p->__pyx_v_pending) {
    e = (*v)(p->__pyx_v_pending, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7opendht___pyx_scope_struct__ping(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7opendht___pyx_scope_struct__ping *p = (struct __pyx_obj_7opendht___pyx_scope_struct__ping *)o;
  tmp = ((PyObject*)p->__pyx_v_lock);
  p->__pyx_v_lock = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ok);
  p->__pyx_v_ok = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_pending);
  p->__pyx_v_pending = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_7opendht___pyx_scope_struct__ping = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.__pyx_scope_struct__ping", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht___pyx_scope_struct__ping), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht___pyx_scope_struct__ping, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opendht___pyx_scope_struct__ping, /*tp_traverse*/
  __pyx_tp_clear_7opendht___pyx_scope_struct__ping, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht___pyx_scope_struct__ping, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_7opendht___pyx_scope_struct_1_get *__pyx_freelist_7opendht___pyx_scope_struct_1_get[8];
static int __pyx_freecount_7opendht___pyx_scope_struct_1_get = 0;

static PyObject *__pyx_tp_new_7opendht___pyx_scope_struct_1_get(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7opendht___pyx_scope_struct_1_get > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7opendht___pyx_scope_struct_1_get)))) {
    o = (PyObject*)__pyx_freelist_7opendht___pyx_scope_struct_1_get[--__pyx_freecount_7opendht___pyx_scope_struct_1_get];
    memset(o, 0, sizeof(struct __pyx_obj_7opendht___pyx_scope_struct_1_get));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7opendht___pyx_scope_struct_1_get(PyObject *o) {
  struct __pyx_obj_7opendht___pyx_scope_struct_1_get *p = (struct __pyx_obj_7opendht___pyx_scope_struct_1_get *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_lock);
  Py_CLEAR(p->__pyx_v_pending);
  Py_CLEAR(p->__pyx_v_res);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7opendht___pyx_scope_struct_1_get < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7opendht___pyx_scope_struct_1_get)))) {
    __pyx_freelist_7opendht___pyx_scope_struct_1_get[__pyx_freecount_7opendht___pyx_scope_struct_1_get++] = ((struct __pyx_obj_7opendht___pyx_scope_struct_1_get *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7opendht___pyx_scope_struct_1_get(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7opendht___pyx_scope_struct_1_get *p = (struct __pyx_obj_7opendht___pyx_scope_struct_1_get *)o;
  if (p->__pyx_v_lock) {
    e = (*v)(p->__pyx_v_lock, a); if (e) return e;
  }
  if (p->__pyx_v_pending) {
    e = (*v)(p->__pyx_v_pending, a); if (e) return e;
  }
  if (p->__pyx_v_res) {
    e = (*v)(p->__pyx_v_res, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7opendht___pyx_scope_struct_1_get(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7opendht___pyx_scope_struct_1_get *p = (struct __pyx_obj_7opendht___pyx_scope_struct_1_get *)o;
  tmp = ((PyObject*)p->__pyx_v_lock);
  p->__pyx_v_lock = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_pending);
  p->__pyx_v_pending = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_res);
  p->__pyx_v_res = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_7opendht___pyx_scope_struct_1_get = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.__pyx_scope_struct_1_get", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht___pyx_scope_struct_1_get), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht___pyx_scope_struct_1_get, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opendht___pyx_scope_struct_1_get, /*tp_traverse*/
  __pyx_tp_clear_7opendht___pyx_scope_struct_1_get, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht___pyx_scope_struct_1_get, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_7opendht___pyx_scope_struct_2_put *__pyx_freelist_7opendht___pyx_scope_struct_2_put[8];
static int __pyx_freecount_7opendht___pyx_scope_struct_2_put = 0;

static PyObject *__pyx_tp_new_7opendht___pyx_scope_struct_2_put(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7opendht___pyx_scope_struct_2_put > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7opendht___pyx_scope_struct_2_put)))) {
    o = (PyObject*)__pyx_freelist_7opendht___pyx_scope_struct_2_put[--__pyx_freecount_7opendht___pyx_scope_struct_2_put];
    memset(o, 0, sizeof(struct __pyx_obj_7opendht___pyx_scope_struct_2_put));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7opendht___pyx_scope_struct_2_put(PyObject *o) {
  struct __pyx_obj_7opendht___pyx_scope_struct_2_put *p = (struct __pyx_obj_7opendht___pyx_scope_struct_2_put *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_lock);
  Py_CLEAR(p->__pyx_v_ok);
  Py_CLEAR(p->__pyx_v_pending);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7opendht___pyx_scope_struct_2_put < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7opendht___pyx_scope_struct_2_put)))) {
    __pyx_freelist_7opendht___pyx_scope_struct_2_put[__pyx_freecount_7opendht___pyx_scope_struct_2_put++] = ((struct __pyx_obj_7opendht___pyx_scope_struct_2_put *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7opendht___pyx_scope_struct_2_put(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7opendht___pyx_scope_struct_2_put *p = (struct __pyx_obj_7opendht___pyx_scope_struct_2_put *)o;
  if (p->__pyx_v_lock) {
    e = (*v)(p->__pyx_v_lock, a); if (e) return e;
  }
  if (p->__pyx_v_ok) {
    e = (*v)(p->__pyx_v_ok, a); if (e) return e;
  }
  if (p->__pyx_v_pending) {
    e = (*v)(p->__pyx_v_pending, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7opendht___pyx_scope_struct_2_put(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7opendht___pyx_scope_struct_2_put *p = (struct __pyx_obj_7opendht___pyx_scope_struct_2_put *)o;
  tmp = ((PyObject*)p->__pyx_v_lock);
  p->__pyx_v_lock = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ok);
  p->__pyx_v_ok = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_pending);
  p->__pyx_v_pending = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_7opendht___pyx_scope_struct_2_put = {
  PyVarObject_HEAD_INIT(0, 0)
  "opendht.__pyx_scope_struct_2_put", /*tp_name*/
  sizeof(struct __pyx_obj_7opendht___pyx_scope_struct_2_put), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opendht___pyx_scope_struct_2_put, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opendht___pyx_scope_struct_2_put, /*tp_traverse*/
  __pyx_tp_clear_7opendht___pyx_scope_struct_2_put, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opendht___pyx_scope_struct_2_put, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "opendht",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_b_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 0, 0},
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_kp_b_4222, __pyx_k_4222, sizeof(__pyx_k_4222), 0, 0, 0, 0},
  {&__pyx_n_s_Condition, __pyx_k_Condition, sizeof(__pyx_k_Condition), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_k_Incompatible_checksums_s_vs_0xd4, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xd4), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplemented, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 1, 0, 0},
  {&__pyx_kp_u__21, __pyx_k__21, sizeof(__pyx_k__21), 0, 1, 0, 0},
  {&__pyx_kp_u__59, __pyx_k__59, sizeof(__pyx_k__59), 0, 1, 0, 0},
  {&__pyx_kp_u__60, __pyx_k__60, sizeof(__pyx_k__60), 0, 1, 0, 0},
  {&__pyx_kp_u__61, __pyx_k__61, sizeof(__pyx_k__61), 0, 1, 0, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_addr, __pyx_k_addr, sizeof(__pyx_k_addr), 0, 0, 1, 1},
  {&__pyx_n_s_af, __pyx_k_af, sizeof(__pyx_k_af), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_bit, __pyx_k_bit, sizeof(__pyx_k_bit), 0, 0, 1, 1},
  {&__pyx_n_s_bits, __pyx_k_bits, sizeof(__pyx_k_bits), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_ca, __pyx_k_ca, sizeof(__pyx_k_ca), 0, 0, 1, 1},
  {&__pyx_n_s_cb, __pyx_k_cb, sizeof(__pyx_k_cb), 0, 0, 1, 1},
  {&__pyx_n_u_cb_2, __pyx_k_cb_2, sizeof(__pyx_k_cb_2), 0, 1, 0, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_commonBits, __pyx_k_commonBits, sizeof(__pyx_k_commonBits), 0, 0, 1, 1},
  {&__pyx_n_s_config, __pyx_k_config, sizeof(__pyx_k_config), 0, 0, 1, 1},
  {&__pyx_n_s_dat, __pyx_k_dat, sizeof(__pyx_k_dat), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_dht, __pyx_k_dht, sizeof(__pyx_k_dht), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_u_done, __pyx_k_done, sizeof(__pyx_k_done), 0, 1, 0, 1},
  {&__pyx_n_s_done_cb, __pyx_k_done_cb, sizeof(__pyx_k_done_cb), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_filter, __pyx_k_filter, sizeof(__pyx_k_filter), 0, 0, 1, 1},
  {&__pyx_n_u_filter, __pyx_k_filter, sizeof(__pyx_k_filter), 0, 1, 0, 1},
  {&__pyx_n_s_generate, __pyx_k_generate, sizeof(__pyx_k_generate), 0, 0, 1, 1},
  {&__pyx_n_s_generateEC, __pyx_k_generateEC, sizeof(__pyx_k_generateEC), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_u_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 1, 0, 1},
  {&__pyx_n_s_getId, __pyx_k_getId, sizeof(__pyx_k_getId), 0, 0, 1, 1},
  {&__pyx_n_s_getKey, __pyx_k_getKey, sizeof(__pyx_k_getKey), 0, 0, 1, 1},
  {&__pyx_n_s_getRandom, __pyx_k_getRandom, sizeof(__pyx_k_getRandom), 0, 0, 1, 1},
  {&__pyx_n_s_getValueId, __pyx_k_getValueId, sizeof(__pyx_k_getValueId), 0, 0, 1, 1},
  {&__pyx_n_s_get_cb, __pyx_k_get_cb, sizeof(__pyx_k_get_cb), 0, 0, 1, 1},
  {&__pyx_n_s_get_locals_tmp_done, __pyx_k_get_locals_tmp_done, sizeof(__pyx_k_get_locals_tmp_done), 0, 0, 1, 1},
  {&__pyx_n_s_get_locals_tmp_get, __pyx_k_get_locals_tmp_get, sizeof(__pyx_k_get_locals_tmp_get), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_kp_s_home_sylvain_opendht_python_ope, __pyx_k_home_sylvain_opendht_python_ope, sizeof(__pyx_k_home_sylvain_opendht_python_ope), 0, 0, 1, 0},
  {&__pyx_n_s_host, __pyx_k_host, sizeof(__pyx_k_host), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_insert, __pyx_k_insert, sizeof(__pyx_k_insert), 0, 0, 1, 1},
  {&__pyx_n_s_ipv4, __pyx_k_ipv4, sizeof(__pyx_k_ipv4), 0, 0, 1, 1},
  {&__pyx_n_s_ipv6, __pyx_k_ipv6, sizeof(__pyx_k_ipv6), 0, 0, 1, 1},
  {&__pyx_n_s_is_bootstrap, __pyx_k_is_bootstrap, sizeof(__pyx_k_is_bootstrap), 0, 0, 1, 1},
  {&__pyx_n_s_is_ca, __pyx_k_is_ca, sizeof(__pyx_k_is_ca), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_key_spec, __pyx_k_key_spec, sizeof(__pyx_k_key_spec), 0, 0, 1, 1},
  {&__pyx_n_u_lookup, __pyx_k_lookup, sizeof(__pyx_k_lookup), 0, 1, 0, 1},
  {&__pyx_n_s_lookup_cb, __pyx_k_lookup_cb, sizeof(__pyx_k_lookup_cb), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_nodes, __pyx_k_nodes, sizeof(__pyx_k_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_notify, __pyx_k_notify, sizeof(__pyx_k_notify), 0, 0, 1, 1},
  {&__pyx_n_s_ok, __pyx_k_ok, sizeof(__pyx_k_ok), 0, 0, 1, 1},
  {&__pyx_n_s_ok_ret, __pyx_k_ok_ret, sizeof(__pyx_k_ok_ret), 0, 0, 1, 1},
  {&__pyx_n_s_opendht, __pyx_k_opendht, sizeof(__pyx_k_opendht), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_ping, __pyx_k_ping, sizeof(__pyx_k_ping), 0, 0, 1, 1},
  {&__pyx_n_s_ping_locals_tmp_done, __pyx_k_ping_locals_tmp_done, sizeof(__pyx_k_ping_locals_tmp_done), 0, 0, 1, 1},
  {&__pyx_n_s_port, __pyx_k_port, sizeof(__pyx_k_port), 0, 0, 1, 1},
  {&__pyx_n_s_put, __pyx_k_put, sizeof(__pyx_k_put), 0, 0, 1, 1},
  {&__pyx_n_s_put_locals_tmp_done, __pyx_k_put_locals_tmp_done, sizeof(__pyx_k_put_locals_tmp_done), 0, 0, 1, 1},
  {&__pyx_n_u_pydht, __pyx_k_pydht, sizeof(__pyx_k_pydht), 0, 1, 0, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle__WithID, __pyx_k_pyx_unpickle__WithID, sizeof(__pyx_k_pyx_unpickle__WithID), 0, 0, 1, 1},
  {&__pyx_n_s_q_str, __pyx_k_q_str, sizeof(__pyx_k_q_str), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_kp_u_s_s, __pyx_k_s_s, sizeof(__pyx_k_s_s), 0, 1, 0, 0},
  {&__pyx_kp_s_self__addr_cannot_be_converted_t, __pyx_k_self__addr_cannot_be_converted_t, sizeof(__pyx_k_self__addr_cannot_be_converted_t), 0, 0, 1, 0},
  {&__pyx_kp_s_self__cert_cannot_be_converted_t, __pyx_k_self__cert_cannot_be_converted_t, sizeof(__pyx_k_self__cert_cannot_be_converted_t), 0, 0, 1, 0},
  {&__pyx_kp_s_self__config_cannot_be_converted, __pyx_k_self__config_cannot_be_converted, sizeof(__pyx_k_self__config_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_s_self__curIter_self__nodes_cannot, __pyx_k_self__curIter_self__nodes_cannot, sizeof(__pyx_k_self__curIter_self__nodes_cannot), 0, 0, 1, 0},
  {&__pyx_kp_s_self__h_self__t_cannot_be_conver, __pyx_k_self__h_self__t_cannot_be_conver, sizeof(__pyx_k_self__h_self__t_cannot_be_conver), 0, 0, 1, 0},
  {&__pyx_kp_s_self__id_cannot_be_converted_to, __pyx_k_self__id_cannot_be_converted_to, sizeof(__pyx_k_self__id_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_kp_s_self__key_cannot_be_converted_to, __pyx_k_self__key_cannot_be_converted_to, sizeof(__pyx_k_self__key_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_kp_s_self__node_cannot_be_converted_t, __pyx_k_self__node_cannot_be_converted_t, sizeof(__pyx_k_self__node_cannot_be_converted_t), 0, 0, 1, 0},
  {&__pyx_kp_s_self__nodes_cannot_be_converted, __pyx_k_self__nodes_cannot_be_converted, sizeof(__pyx_k_self__nodes_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_s_self__result_cannot_be_converted, __pyx_k_self__result_cannot_be_converted, sizeof(__pyx_k_self__result_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_s_self__trust_cannot_be_converted, __pyx_k_self__trust_cannot_be_converted, sizeof(__pyx_k_self__trust_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_s_self__v_cannot_be_converted_to_a, __pyx_k_self__v_cannot_be_converted_to_a, sizeof(__pyx_k_self__v_cannot_be_converted_to_a), 0, 0, 1, 0},
  {&__pyx_kp_s_self__value_cannot_be_converted, __pyx_k_self__value_cannot_be_converted, sizeof(__pyx_k_self__value_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_n_s_setIdentity, __pyx_k_setIdentity, sizeof(__pyx_k_setIdentity), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_u_shutdown, __pyx_k_shutdown, sizeof(__pyx_k_shutdown), 0, 1, 0, 1},
  {&__pyx_n_s_shutdown_cb, __pyx_k_shutdown_cb, sizeof(__pyx_k_shutdown_cb), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_threading, __pyx_k_threading, sizeof(__pyx_k_threading), 0, 0, 1, 1},
  {&__pyx_n_s_tmp_done, __pyx_k_tmp_done, sizeof(__pyx_k_tmp_done), 0, 0, 1, 1},
  {&__pyx_n_s_tmp_get, __pyx_k_tmp_get, sizeof(__pyx_k_tmp_get), 0, 0, 1, 1},
  {&__pyx_n_s_toString, __pyx_k_toString, sizeof(__pyx_k_toString), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_kp_u_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 1, 0, 0},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_vid, __pyx_k_vid, sizeof(__pyx_k_vid), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_wait, __pyx_k_wait, sizeof(__pyx_k_wait), 0, 0, 1, 1},
  {&__pyx_n_s_where, __pyx_k_where, sizeof(__pyx_k_where), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 116, __pyx_L1_error)
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s_NotImplemented); if (!__pyx_builtin_NotImplemented) __PYX_ERR(0, 105, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 273, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 290, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._addr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._addr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_self__addr_cannot_be_converted_t); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":4
 *     raise TypeError("self._addr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._addr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_self__addr_cannot_be_converted_t); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self__node_cannot_be_converted_t); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":4
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_self__node_cannot_be_converted_t); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._v cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._v cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_self__v_cannot_be_converted_to_a); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":4
 *     raise TypeError("self._v cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._v cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_self__v_cannot_be_converted_to_a); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_self__value_cannot_be_converted); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":4
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_self__value_cannot_be_converted); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._curIter,self._nodes cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._curIter,self._nodes cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_self__curIter_self__nodes_cannot); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":4
 *     raise TypeError("self._curIter,self._nodes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._curIter,self._nodes cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_self__curIter_self__nodes_cannot); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._nodes cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._nodes cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_self__nodes_cannot_be_converted); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":4
 *     raise TypeError("self._nodes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._nodes cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_self__nodes_cannot_be_converted); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_self__key_cannot_be_converted_to); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":4
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_self__key_cannot_be_converted_to); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_self__key_cannot_be_converted_to); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":4
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._key cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_self__key_cannot_be_converted_to); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._cert cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._cert cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_self__cert_cannot_be_converted_t); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":4
 *     raise TypeError("self._cert cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._cert cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_self__cert_cannot_be_converted_t); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._result cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._result cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_self__result_cannot_be_converted); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":4
 *     raise TypeError("self._result cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._result cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_self__result_cannot_be_converted); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._trust cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._trust cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_self__trust_cannot_be_converted); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":4
 *     raise TypeError("self._trust cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._trust cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_self__trust_cannot_be_converted); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._h,self._t cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._h,self._t cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_self__h_self__t_cannot_be_conver); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "(tree fragment)":4
 *     raise TypeError("self._h,self._t cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._h,self._t cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_self__h_self__t_cannot_be_conver); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._id cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._id cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_self__id_cannot_be_converted_to); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "(tree fragment)":4
 *     raise TypeError("self._id cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._id cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_self__id_cannot_be_converted_to); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._config cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._config cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_self__config_cannot_be_converted); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "(tree fragment)":4
 *     raise TypeError("self._config cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._config cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_self__config_cannot_be_converted); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "opendht.pyx":476
 *             def tmp_done(ok_ret):
 *                 nonlocal pending, ok, lock
 *                 with lock:             # <<<<<<<<<<<<<<
 *                     ok = ok_ret
 *                     pending -= 1
 */
  __pyx_tuple__42 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "opendht.pyx":474
 *             pending = 0
 *             ok = False
 *             def tmp_done(ok_ret):             # <<<<<<<<<<<<<<
 *                 nonlocal pending, ok, lock
 *                 with lock:
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_n_s_ok_ret); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sylvain_opendht_python_ope, __pyx_n_s_tmp_done, 474, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 474, __pyx_L1_error)

  /* "opendht.pyx":480
 *                     pending -= 1
 *                     lock.notify()
 *             with lock:             # <<<<<<<<<<<<<<
 *                 pending += 1
 *                 self.ping(addr, done_cb=tmp_done)
 */
  __pyx_tuple__45 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "opendht.pyx":558
 *             def tmp_done(ok, nodes):
 *                 nonlocal pending, lock
 *                 with lock:             # <<<<<<<<<<<<<<
 *                     pending -= 1
 *                     lock.notify()
 */
  __pyx_tuple__47 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "opendht.pyx":552
 *             pending = 0
 *             res = []
 *             def tmp_get(v):             # <<<<<<<<<<<<<<
 *                 nonlocal res
 *                 res.append(v)
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_n_s_v); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sylvain_opendht_python_ope, __pyx_n_s_tmp_get, 552, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 552, __pyx_L1_error)

  /* "opendht.pyx":556
 *                 res.append(v)
 *                 return True
 *             def tmp_done(ok, nodes):             # <<<<<<<<<<<<<<
 *                 nonlocal pending, lock
 *                 with lock:
 */
  __pyx_tuple__50 = PyTuple_Pack(2, __pyx_n_s_ok, __pyx_n_s_nodes); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sylvain_opendht_python_ope, __pyx_n_s_tmp_done, 556, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 556, __pyx_L1_error)

  /* "opendht.pyx":561
 *                     pending -= 1
 *                     lock.notify()
 *             with lock:             # <<<<<<<<<<<<<<
 *                 pending += 1
 *                 self.get(key, get_cb=tmp_get, done_cb=tmp_done, filter=filter, where=where)
 */
  __pyx_tuple__52 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "opendht.pyx":584
 *             def tmp_done(ok_ret, nodes):
 *                 nonlocal pending, ok, lock
 *                 with lock:             # <<<<<<<<<<<<<<
 *                     ok = ok_ret
 *                     pending -= 1
 */
  __pyx_tuple__53 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "opendht.pyx":582
 *             pending = 0
 *             ok = False
 *             def tmp_done(ok_ret, nodes):             # <<<<<<<<<<<<<<
 *                 nonlocal pending, ok, lock
 *                 with lock:
 */
  __pyx_tuple__54 = PyTuple_Pack(2, __pyx_n_s_ok_ret, __pyx_n_s_nodes); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sylvain_opendht_python_ope, __pyx_n_s_tmp_done, 582, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 582, __pyx_L1_error)

  /* "opendht.pyx":588
 *                     pending -= 1
 *                     lock.notify()
 *             with lock:             # <<<<<<<<<<<<<<
 *                 pending += 1
 *                 self.put(key, val, done_cb=tmp_done)
 */
  __pyx_tuple__56 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_self__value_cannot_be_converted); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "(tree fragment)":4
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._value cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_self__value_cannot_be_converted); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "opendht.pyx":117
 *         return self._infohash.toFloat()
 *     @staticmethod
 *     def commonBits(InfoHash a, InfoHash b):             # <<<<<<<<<<<<<<
 *         return cpp.InfoHash.commonBits(a._infohash, b._infohash)
 *     @staticmethod
 */
  __pyx_tuple__66 = PyTuple_Pack(2, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sylvain_opendht_python_ope, __pyx_n_s_commonBits, 117, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(0, 117, __pyx_L1_error)

  /* "opendht.pyx":120
 *         return cpp.InfoHash.commonBits(a._infohash, b._infohash)
 *     @staticmethod
 *     def get(str key):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = cpp.InfoHash.get(key.encode())
 */
  __pyx_tuple__68 = PyTuple_Pack(2, __pyx_n_s_key, __pyx_n_s_h); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sylvain_opendht_python_ope, __pyx_n_s_get, 120, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(0, 120, __pyx_L1_error)

  /* "opendht.pyx":125
 *         return h
 *     @staticmethod
 *     def getRandom():             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = cpp.InfoHash.getRandom()
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_n_s_h); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sylvain_opendht_python_ope, __pyx_n_s_getRandom, 125, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 125, __pyx_L1_error)

  /* "opendht.pyx":332
 *         return self.getId().toString().decode()
 *     @staticmethod
 *     def generate():             # <<<<<<<<<<<<<<
 *         k = PrivateKey()
 *         k._key = cpp.make_shared[cpp.PrivateKey](cpp.PrivateKey.generate())
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_n_s_k); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sylvain_opendht_python_ope, __pyx_n_s_generate, 332, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 332, __pyx_L1_error)

  /* "opendht.pyx":337
 *         return k
 *     @staticmethod
 *     def generateEC():             # <<<<<<<<<<<<<<
 *         k = PrivateKey()
 *         k._key = cpp.make_shared[cpp.PrivateKey](cpp.PrivateKey.generateEC())
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_n_s_k); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sylvain_opendht_python_ope, __pyx_n_s_generateEC, 337, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 337, __pyx_L1_error)

  /* "opendht.pyx":382
 *             return c;
 *     @staticmethod
 *     def generate(PrivateKey k, str name, Identity i = Identity(), bool is_ca = False):             # <<<<<<<<<<<<<<
 *         c = Certificate()
 *         c._cert = cpp.make_shared[cpp.Certificate](cpp.Certificate.generate(deref(k._key.get()), name.encode(), i._id, is_ca))
 */
  __pyx_tuple__76 = PyTuple_Pack(5, __pyx_n_s_k, __pyx_n_s_name_2, __pyx_n_s_i, __pyx_n_s_is_ca, __pyx_n_s_c); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sylvain_opendht_python_ope, __pyx_n_s_generate, 382, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 382, __pyx_L1_error)

  /* "opendht.pyx":418
 *             self._id.second = c._cert
 *     @staticmethod
 *     def generate(str name = "pydht", Identity ca = Identity(), unsigned bits = 4096):             # <<<<<<<<<<<<<<
 *         i = Identity()
 *         i._id = cpp.generateIdentity(name.encode(), ca._id, bits)
 */
  __pyx_tuple__78 = PyTuple_Pack(4, __pyx_n_s_name_2, __pyx_n_s_ca, __pyx_n_s_bits, __pyx_n_s_i); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sylvain_opendht_python_ope, __pyx_n_s_generate, 418, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 418, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle__WithID(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 */
  __pyx_tuple__80 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle__WithID, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  /* InitThreads.init */
  #ifdef WITH_THREAD
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initopendht(void); /*proto*/
PyMODINIT_FUNC initopendht(void)
#else
PyMODINIT_FUNC PyInit_opendht(void); /*proto*/
PyMODINIT_FUNC PyInit_opendht(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_opendht(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("opendht", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_opendht) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "opendht")) {
      if (unlikely(PyDict_SetItemString(modules, "opendht", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_7opendht__WithID) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  __pyx_type_7opendht__WithID.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "_WithID", (PyObject *)&__pyx_type_7opendht__WithID) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht__WithID) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  __pyx_ptype_7opendht__WithID = &__pyx_type_7opendht__WithID;
  __pyx_type_7opendht_InfoHash.tp_base = __pyx_ptype_7opendht__WithID;
  if (PyType_Ready(&__pyx_type_7opendht_InfoHash) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __pyx_type_7opendht_InfoHash.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "InfoHash", (PyObject *)&__pyx_type_7opendht_InfoHash) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_InfoHash) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __pyx_ptype_7opendht_InfoHash = &__pyx_type_7opendht_InfoHash;
  if (PyType_Ready(&__pyx_type_7opendht_SockAddr) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __pyx_type_7opendht_SockAddr.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "SockAddr", (PyObject *)&__pyx_type_7opendht_SockAddr) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_SockAddr) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __pyx_ptype_7opendht_SockAddr = &__pyx_type_7opendht_SockAddr;
  __pyx_type_7opendht_Node.tp_base = __pyx_ptype_7opendht__WithID;
  if (PyType_Ready(&__pyx_type_7opendht_Node) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  __pyx_type_7opendht_Node.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Node", (PyObject *)&__pyx_type_7opendht_Node) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_Node) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  __pyx_ptype_7opendht_Node = &__pyx_type_7opendht_Node;
  __pyx_type_7opendht_NodeEntry.tp_base = __pyx_ptype_7opendht__WithID;
  if (PyType_Ready(&__pyx_type_7opendht_NodeEntry) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_type_7opendht_NodeEntry.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "NodeEntry", (PyObject *)&__pyx_type_7opendht_NodeEntry) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_NodeEntry) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_ptype_7opendht_NodeEntry = &__pyx_type_7opendht_NodeEntry;
  if (PyType_Ready(&__pyx_type_7opendht_Query) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
  __pyx_type_7opendht_Query.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Query", (PyObject *)&__pyx_type_7opendht_Query) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_Query) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
  __pyx_ptype_7opendht_Query = &__pyx_type_7opendht_Query;
  if (PyType_Ready(&__pyx_type_7opendht_Select) < 0) __PYX_ERR(0, 186, __pyx_L1_error)
  __pyx_type_7opendht_Select.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Select", (PyObject *)&__pyx_type_7opendht_Select) < 0) __PYX_ERR(0, 186, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_Select) < 0) __PYX_ERR(0, 186, __pyx_L1_error)
  __pyx_ptype_7opendht_Select = &__pyx_type_7opendht_Select;
  if (PyType_Ready(&__pyx_type_7opendht_Where) < 0) __PYX_ERR(0, 201, __pyx_L1_error)
  __pyx_type_7opendht_Where.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Where", (PyObject *)&__pyx_type_7opendht_Where) < 0) __PYX_ERR(0, 201, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_Where) < 0) __PYX_ERR(0, 201, __pyx_L1_error)
  __pyx_ptype_7opendht_Where = &__pyx_type_7opendht_Where;
  if (PyType_Ready(&__pyx_type_7opendht_Value) < 0) __PYX_ERR(0, 228, __pyx_L1_error)
  __pyx_type_7opendht_Value.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Value", (PyObject *)&__pyx_type_7opendht_Value) < 0) __PYX_ERR(0, 228, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_Value) < 0) __PYX_ERR(0, 228, __pyx_L1_error)
  __pyx_ptype_7opendht_Value = &__pyx_type_7opendht_Value;
  if (PyType_Ready(&__pyx_type_7opendht_NodeSetIter) < 0) __PYX_ERR(0, 265, __pyx_L1_error)
  __pyx_type_7opendht_NodeSetIter.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "NodeSetIter", (PyObject *)&__pyx_type_7opendht_NodeSetIter) < 0) __PYX_ERR(0, 265, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_NodeSetIter) < 0) __PYX_ERR(0, 265, __pyx_L1_error)
  __pyx_ptype_7opendht_NodeSetIter = &__pyx_type_7opendht_NodeSetIter;
  if (PyType_Ready(&__pyx_type_7opendht_NodeSet) < 0) __PYX_ERR(0, 279, __pyx_L1_error)
  __pyx_type_7opendht_NodeSet.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "NodeSet", (PyObject *)&__pyx_type_7opendht_NodeSet) < 0) __PYX_ERR(0, 279, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_NodeSet) < 0) __PYX_ERR(0, 279, __pyx_L1_error)
  __pyx_ptype_7opendht_NodeSet = &__pyx_type_7opendht_NodeSet;
  __pyx_type_7opendht_PrivateKey.tp_base = __pyx_ptype_7opendht__WithID;
  if (PyType_Ready(&__pyx_type_7opendht_PrivateKey) < 0) __PYX_ERR(0, 310, __pyx_L1_error)
  __pyx_type_7opendht_PrivateKey.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PrivateKey", (PyObject *)&__pyx_type_7opendht_PrivateKey) < 0) __PYX_ERR(0, 310, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_PrivateKey) < 0) __PYX_ERR(0, 310, __pyx_L1_error)
  __pyx_ptype_7opendht_PrivateKey = &__pyx_type_7opendht_PrivateKey;
  __pyx_type_7opendht_PublicKey.tp_base = __pyx_ptype_7opendht__WithID;
  if (PyType_Ready(&__pyx_type_7opendht_PublicKey) < 0) __PYX_ERR(0, 342, __pyx_L1_error)
  __pyx_type_7opendht_PublicKey.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PublicKey", (PyObject *)&__pyx_type_7opendht_PublicKey) < 0) __PYX_ERR(0, 342, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_PublicKey) < 0) __PYX_ERR(0, 342, __pyx_L1_error)
  __pyx_ptype_7opendht_PublicKey = &__pyx_type_7opendht_PublicKey;
  __pyx_type_7opendht_Certificate.tp_base = __pyx_ptype_7opendht__WithID;
  if (PyType_Ready(&__pyx_type_7opendht_Certificate) < 0) __PYX_ERR(0, 358, __pyx_L1_error)
  __pyx_type_7opendht_Certificate.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Certificate", (PyObject *)&__pyx_type_7opendht_Certificate) < 0) __PYX_ERR(0, 358, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_Certificate) < 0) __PYX_ERR(0, 358, __pyx_L1_error)
  __pyx_ptype_7opendht_Certificate = &__pyx_type_7opendht_Certificate;
  if (PyType_Ready(&__pyx_type_7opendht_VerifyResult) < 0) __PYX_ERR(0, 387, __pyx_L1_error)
  __pyx_type_7opendht_VerifyResult.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "VerifyResult", (PyObject *)&__pyx_type_7opendht_VerifyResult) < 0) __PYX_ERR(0, 387, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_VerifyResult) < 0) __PYX_ERR(0, 387, __pyx_L1_error)
  __pyx_ptype_7opendht_VerifyResult = &__pyx_type_7opendht_VerifyResult;
  if (PyType_Ready(&__pyx_type_7opendht_TrustList) < 0) __PYX_ERR(0, 394, __pyx_L1_error)
  __pyx_type_7opendht_TrustList.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "TrustList", (PyObject *)&__pyx_type_7opendht_TrustList) < 0) __PYX_ERR(0, 394, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_TrustList) < 0) __PYX_ERR(0, 394, __pyx_L1_error)
  __pyx_ptype_7opendht_TrustList = &__pyx_type_7opendht_TrustList;
  if (PyType_Ready(&__pyx_type_7opendht_ListenToken) < 0) __PYX_ERR(0, 405, __pyx_L1_error)
  __pyx_type_7opendht_ListenToken.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "ListenToken", (PyObject *)&__pyx_type_7opendht_ListenToken) < 0) __PYX_ERR(0, 405, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_ListenToken) < 0) __PYX_ERR(0, 405, __pyx_L1_error)
  __pyx_ptype_7opendht_ListenToken = &__pyx_type_7opendht_ListenToken;
  if (PyType_Ready(&__pyx_type_7opendht_Identity) < 0) __PYX_ERR(0, 410, __pyx_L1_error)
  __pyx_type_7opendht_Identity.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Identity", (PyObject *)&__pyx_type_7opendht_Identity) < 0) __PYX_ERR(0, 410, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_Identity) < 0) __PYX_ERR(0, 410, __pyx_L1_error)
  __pyx_ptype_7opendht_Identity = &__pyx_type_7opendht_Identity;
  if (PyType_Ready(&__pyx_type_7opendht_DhtConfig) < 0) __PYX_ERR(0, 438, __pyx_L1_error)
  __pyx_type_7opendht_DhtConfig.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "DhtConfig", (PyObject *)&__pyx_type_7opendht_DhtConfig) < 0) __PYX_ERR(0, 438, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_DhtConfig) < 0) __PYX_ERR(0, 438, __pyx_L1_error)
  __pyx_ptype_7opendht_DhtConfig = &__pyx_type_7opendht_DhtConfig;
  __pyx_type_7opendht_DhtRunner.tp_base = __pyx_ptype_7opendht__WithID;
  if (PyType_Ready(&__pyx_type_7opendht_DhtRunner) < 0) __PYX_ERR(0, 454, __pyx_L1_error)
  __pyx_type_7opendht_DhtRunner.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "DhtRunner", (PyObject *)&__pyx_type_7opendht_DhtRunner) < 0) __PYX_ERR(0, 454, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_DhtRunner) < 0) __PYX_ERR(0, 454, __pyx_L1_error)
  __pyx_ptype_7opendht_DhtRunner = &__pyx_type_7opendht_DhtRunner;
  if (PyType_Ready(&__pyx_type_7opendht_IndexValue) < 0) __PYX_ERR(0, 608, __pyx_L1_error)
  __pyx_type_7opendht_IndexValue.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "IndexValue", (PyObject *)&__pyx_type_7opendht_IndexValue) < 0) __PYX_ERR(0, 608, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_IndexValue) < 0) __PYX_ERR(0, 608, __pyx_L1_error)
  __pyx_ptype_7opendht_IndexValue = &__pyx_type_7opendht_IndexValue;
  if (PyType_Ready(&__pyx_type_7opendht_Pht) < 0) __PYX_ERR(0, 622, __pyx_L1_error)
  __pyx_type_7opendht_Pht.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Pht", (PyObject *)&__pyx_type_7opendht_Pht) < 0) __PYX_ERR(0, 622, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opendht_Pht) < 0) __PYX_ERR(0, 622, __pyx_L1_error)
  __pyx_ptype_7opendht_Pht = &__pyx_type_7opendht_Pht;
  if (PyType_Ready(&__pyx_type_7opendht___pyx_scope_struct__ping) < 0) __PYX_ERR(0, 465, __pyx_L1_error)
  __pyx_type_7opendht___pyx_scope_struct__ping.tp_print = 0;
  __pyx_ptype_7opendht___pyx_scope_struct__ping = &__pyx_type_7opendht___pyx_scope_struct__ping;
  if (PyType_Ready(&__pyx_type_7opendht___pyx_scope_struct_1_get) < 0) __PYX_ERR(0, 530, __pyx_L1_error)
  __pyx_type_7opendht___pyx_scope_struct_1_get.tp_print = 0;
  __pyx_ptype_7opendht___pyx_scope_struct_1_get = &__pyx_type_7opendht___pyx_scope_struct_1_get;
  if (PyType_Ready(&__pyx_type_7opendht___pyx_scope_struct_2_put) < 0) __PYX_ERR(0, 567, __pyx_L1_error)
  __pyx_type_7opendht___pyx_scope_struct_2_put.tp_print = 0;
  __pyx_ptype_7opendht___pyx_scope_struct_2_put = &__pyx_type_7opendht___pyx_scope_struct_2_put;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(2, 9, __pyx_L1_error)
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) __PYX_ERR(3, 8, __pyx_L1_error)
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) __PYX_ERR(4, 15, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "opendht.pyx":42
 * cimport opendht_cpp as cpp
 * 
 * import threading             # <<<<<<<<<<<<<<
 * 
 * cdef inline void lookup_callback(cpp.vector[cpp.shared_ptr[cpp.IndexValue]]* values, cpp.Prefix* p, void *user_data) with gil:
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_threading, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_threading, __pyx_t_1) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "opendht.pyx":117
 *         return self._infohash.toFloat()
 *     @staticmethod
 *     def commonBits(InfoHash a, InfoHash b):             # <<<<<<<<<<<<<<
 *         return cpp.InfoHash.commonBits(a._infohash, b._infohash)
 *     @staticmethod
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7opendht_8InfoHash_17commonBits, NULL, __pyx_n_s_opendht); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opendht_InfoHash->tp_dict, __pyx_n_s_commonBits, __pyx_t_1) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7opendht_InfoHash);

  /* "opendht.pyx":116
 *     def toFloat(InfoHash self):
 *         return self._infohash.toFloat()
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def commonBits(InfoHash a, InfoHash b):
 *         return cpp.InfoHash.commonBits(a._infohash, b._infohash)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_7opendht_InfoHash, __pyx_n_s_commonBits); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opendht_InfoHash->tp_dict, __pyx_n_s_commonBits, __pyx_t_1) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7opendht_InfoHash);

  /* "opendht.pyx":120
 *         return cpp.InfoHash.commonBits(a._infohash, b._infohash)
 *     @staticmethod
 *     def get(str key):             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = cpp.InfoHash.get(key.encode())
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7opendht_8InfoHash_19get, NULL, __pyx_n_s_opendht); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opendht_InfoHash->tp_dict, __pyx_n_s_get, __pyx_t_1) < 0) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7opendht_InfoHash);

  /* "opendht.pyx":119
 *     def commonBits(InfoHash a, InfoHash b):
 *         return cpp.InfoHash.commonBits(a._infohash, b._infohash)
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def get(str key):
 *         h = InfoHash()
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_7opendht_InfoHash, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opendht_InfoHash->tp_dict, __pyx_n_s_get, __pyx_t_1) < 0) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7opendht_InfoHash);

  /* "opendht.pyx":125
 *         return h
 *     @staticmethod
 *     def getRandom():             # <<<<<<<<<<<<<<
 *         h = InfoHash()
 *         h._infohash = cpp.InfoHash.getRandom()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7opendht_8InfoHash_21getRandom, NULL, __pyx_n_s_opendht); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opendht_InfoHash->tp_dict, __pyx_n_s_getRandom, __pyx_t_1) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7opendht_InfoHash);

  /* "opendht.pyx":124
 *         h._infohash = cpp.InfoHash.get(key.encode())
 *         return h
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def getRandom():
 *         h = InfoHash()
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_7opendht_InfoHash, __pyx_n_s_getRandom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opendht_InfoHash->tp_dict, __pyx_n_s_getRandom, __pyx_t_1) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7opendht_InfoHash);

  /* "opendht.pyx":332
 *         return self.getId().toString().decode()
 *     @staticmethod
 *     def generate():             # <<<<<<<<<<<<<<
 *         k = PrivateKey()
 *         k._key = cpp.make_shared[cpp.PrivateKey](cpp.PrivateKey.generate())
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7opendht_10PrivateKey_9generate, NULL, __pyx_n_s_opendht); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opendht_PrivateKey->tp_dict, __pyx_n_s_generate, __pyx_t_1) < 0) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7opendht_PrivateKey);

  /* "opendht.pyx":331
 *     def __str__(self):
 *         return self.getId().toString().decode()
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def generate():
 *         k = PrivateKey()
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_7opendht_PrivateKey, __pyx_n_s_generate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opendht_PrivateKey->tp_dict, __pyx_n_s_generate, __pyx_t_1) < 0) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7opendht_PrivateKey);

  /* "opendht.pyx":337
 *         return k
 *     @staticmethod
 *     def generateEC():             # <<<<<<<<<<<<<<
 *         k = PrivateKey()
 *         k._key = cpp.make_shared[cpp.PrivateKey](cpp.PrivateKey.generateEC())
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7opendht_10PrivateKey_11generateEC, NULL, __pyx_n_s_opendht); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opendht_PrivateKey->tp_dict, __pyx_n_s_generateEC, __pyx_t_1) < 0) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7opendht_PrivateKey);

  /* "opendht.pyx":336
 *         k._key = cpp.make_shared[cpp.PrivateKey](cpp.PrivateKey.generate())
 *         return k
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def generateEC():
 *         k = PrivateKey()
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_7opendht_PrivateKey, __pyx_n_s_generateEC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opendht_PrivateKey->tp_dict, __pyx_n_s_generateEC, __pyx_t_1) < 0) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7opendht_PrivateKey);

  /* "opendht.pyx":382
 *             return c;
 *     @staticmethod
 *     def generate(PrivateKey k, str name, Identity i = Identity(), bool is_ca = False):             # <<<<<<<<<<<<<<
 *         c = Certificate()
 *         c._cert = cpp.make_shared[cpp.Certificate](cpp.Certificate.generate(deref(k._key.get()), name.encode(), i._id, is_ca))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_Identity), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__28 = ((struct __pyx_obj_7opendht_Identity *)__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7opendht_11Certificate_13generate, NULL, __pyx_n_s_opendht); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opendht_Certificate->tp_dict, __pyx_n_s_generate, __pyx_t_1) < 0) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7opendht_Certificate);

  /* "opendht.pyx":381
 *             c._cert = self._cert.get().issuer
 *             return c;
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def generate(PrivateKey k, str name, Identity i = Identity(), bool is_ca = False):
 *         c = Certificate()
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_7opendht_Certificate, __pyx_n_s_generate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opendht_Certificate->tp_dict, __pyx_n_s_generate, __pyx_t_1) < 0) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7opendht_Certificate);

  /* "opendht.pyx":408
 *     cdef cpp.InfoHash _h
 *     cdef cpp.shared_future[size_t] _t
 *     _cb = dict()             # <<<<<<<<<<<<<<
 * 
 * cdef class Identity(object):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opendht_ListenToken->tp_dict, __pyx_n_s_cb, __pyx_t_1) < 0) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7opendht_ListenToken);

  /* "opendht.pyx":418
 *             self._id.second = c._cert
 *     @staticmethod
 *     def generate(str name = "pydht", Identity ca = Identity(), unsigned bits = 4096):             # <<<<<<<<<<<<<<
 *         i = Identity()
 *         i._id = cpp.generateIdentity(name.encode(), ca._id, bits)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_Identity), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__37 = ((struct __pyx_obj_7opendht_Identity *)__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7opendht_8Identity_3generate, NULL, __pyx_n_s_opendht); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opendht_Identity->tp_dict, __pyx_n_s_generate, __pyx_t_1) < 0) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7opendht_Identity);

  /* "opendht.pyx":417
 *         if c:
 *             self._id.second = c._cert
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def generate(str name = "pydht", Identity ca = Identity(), unsigned bits = 4096):
 *         i = Identity()
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_7opendht_Identity, __pyx_n_s_generate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opendht_Identity->tp_dict, __pyx_n_s_generate, __pyx_t_1) < 0) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7opendht_Identity);

  /* "opendht.pyx":490
 *         port_bytes = port.encode() if port else b'4222'
 *         self.thisptr.get().bootstrap(<cpp.const_char*>host_bytes, <cpp.const_char*>port_bytes)
 *     def run(self, Identity id=None, is_bootstrap=False, cpp.in_port_t port=0, str ipv4="", str ipv6="", DhtConfig config=DhtConfig()):             # <<<<<<<<<<<<<<
 *         if id:
 *             config.setIdentity(id)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opendht_DhtConfig), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__46 = ((struct __pyx_obj_7opendht_DhtConfig *)__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle__WithID(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7opendht_1__pyx_unpickle__WithID, NULL, __pyx_n_s_opendht); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle__WithID, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "opendht.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # distutils: extra_compile_args = -std=c++11
 * # distutils: include_dirs = ../../include
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_uint8_t")
 * cdef vector[X] __pyx_convert_vector_from_py_uint8_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init opendht", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init opendht");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* GetAttr */
  static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_COMPILING_IN_CPYTHON
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
  static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            goto bad;
        PyErr_Clear();
        r = d;
        Py_INCREF(d);
    }
    return r;
bad:
    return NULL;
}

/* GetModuleGlobalName */
  static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* RaiseDoubleKeywords */
    static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
    static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
    static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
    static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* KeywordStringCheck */
    static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseException */
    #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* decode_c_bytes */
      static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* None */
      static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* PyIntBinop */
      #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* SaveResetException */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
      #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* FetchCommonType */
        static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
        static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* PyIntBinop */
            #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* IterFinish */
            static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectCallMethod0 */
            static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
            static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
            static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
            static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
            static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
            static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
            static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
            static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        const char *name = PyUnicode_AsUTF8(method_name);
        PyObject **pp = NULL;
        if (strcmp(name, "iteritems") == 0) pp = &py_items;
        else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
        else if (strcmp(name, "itervalues") == 0) pp = &py_values;
        if (pp) {
            if (!*pp) {
                *pp = PyUnicode_FromString(name + 4);
                if (!*pp)
                    return NULL;
            }
            method_name = *pp;
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* Import */
            static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
            static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
            static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* GetItemInt */
            static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* SetupReduce */
            static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_COMPILING_IN_CPYTHON
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* GetNameInClass */
            static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

/* CLineInTraceback */
            static int __Pyx_CLineForTraceback(int c_line) {
#ifdef CYTHON_CLINE_IN_TRACEBACK
    return ((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0;
#else
    PyObject *use_cline;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *ptype, *pvalue, *ptraceback;
      PyObject *use_cline_obj;
      PyErr_Fetch(&ptype, &pvalue, &ptraceback);
      use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        use_cline = NULL;
      }
      PyErr_Restore(ptype, pvalue, ptraceback);
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    return c_line;
#endif
}

/* CodeObjectCache */
            static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
            #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
            #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint16_t(uint16_t value) {
    const uint16_t neg_one = (uint16_t) -1, const_zero = (uint16_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint16_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint16_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint16_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint16_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint16_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint16_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_short(unsigned short value) {
    const unsigned short neg_one = (unsigned short) -1, const_zero = (unsigned short) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned short) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned short) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned short) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned short) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned short) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned short),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
            static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE uint16_t __Pyx_PyInt_As_uint16_t(PyObject *x) {
    const uint16_t neg_one = (uint16_t) -1, const_zero = (uint16_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint16_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint16_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint16_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint16_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint16_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint16_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) >= 2 * PyLong_SHIFT) {
                            return (uint16_t) (((((uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint16_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) >= 3 * PyLong_SHIFT) {
                            return (uint16_t) (((((((uint16_t)digits[2]) << PyLong_SHIFT) | (uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint16_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) >= 4 * PyLong_SHIFT) {
                            return (uint16_t) (((((((((uint16_t)digits[3]) << PyLong_SHIFT) | (uint16_t)digits[2]) << PyLong_SHIFT) | (uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint16_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint16_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint16_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint16_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint16_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint16_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint16_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint16_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint16_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint16_t) (((uint16_t)-1)*(((((uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint16_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint16_t) ((((((uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint16_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint16_t) (((uint16_t)-1)*(((((((uint16_t)digits[2]) << PyLong_SHIFT) | (uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint16_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint16_t) ((((((((uint16_t)digits[2]) << PyLong_SHIFT) | (uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint16_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint16_t) (((uint16_t)-1)*(((((((((uint16_t)digits[3]) << PyLong_SHIFT) | (uint16_t)digits[2]) << PyLong_SHIFT) | (uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint16_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint16_t) ((((((((((uint16_t)digits[3]) << PyLong_SHIFT) | (uint16_t)digits[2]) << PyLong_SHIFT) | (uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint16_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint16_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint16_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint16_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint16_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint16_t) -1;
        }
    } else {
        uint16_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint16_t) -1;
        val = __Pyx_PyInt_As_uint16_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint16_t");
    return (uint16_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint16_t");
    return (uint16_t) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE unsigned short __Pyx_PyInt_As_unsigned_short(PyObject *x) {
    const unsigned short neg_one = (unsigned short) -1, const_zero = (unsigned short) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned short) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned short, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned short) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned short) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned short, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned short) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) >= 2 * PyLong_SHIFT) {
                            return (unsigned short) (((((unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned short) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) >= 3 * PyLong_SHIFT) {
                            return (unsigned short) (((((((unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned short) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) >= 4 * PyLong_SHIFT) {
                            return (unsigned short) (((((((((unsigned short)digits[3]) << PyLong_SHIFT) | (unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned short) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned short) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned short, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned short) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned short, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned short) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned short, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned short,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned short) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned short) (((unsigned short)-1)*(((((unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned short) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned short) ((((((unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned short) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned short) (((unsigned short)-1)*(((((((unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned short) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned short) ((((((((unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned short) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned short) (((unsigned short)-1)*(((((((((unsigned short)digits[3]) << PyLong_SHIFT) | (unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned short) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned short) ((((((((((unsigned short)digits[3]) << PyLong_SHIFT) | (unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned short) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned short, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned short) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned short, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned short val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned short) -1;
        }
    } else {
        unsigned short val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned short) -1;
        val = __Pyx_PyInt_As_unsigned_short(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned short");
    return (unsigned short) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned short");
    return (unsigned short) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT) {
                            return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT) {
                            return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT) {
                            return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE uint8_t __Pyx_PyInt_As_uint8_t(PyObject *x) {
    const uint8_t neg_one = (uint8_t) -1, const_zero = (uint8_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint8_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint8_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint8_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint8_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint8_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint8_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) >= 2 * PyLong_SHIFT) {
                            return (uint8_t) (((((uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint8_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) >= 3 * PyLong_SHIFT) {
                            return (uint8_t) (((((((uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint8_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) >= 4 * PyLong_SHIFT) {
                            return (uint8_t) (((((((((uint8_t)digits[3]) << PyLong_SHIFT) | (uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint8_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint8_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint8_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint8_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint8_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint8_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint8_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint8_t) (((uint8_t)-1)*(((((uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint8_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint8_t) ((((((uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint8_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint8_t) (((uint8_t)-1)*(((((((uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint8_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint8_t) ((((((((uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint8_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint8_t) (((uint8_t)-1)*(((((((((uint8_t)digits[3]) << PyLong_SHIFT) | (uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint8_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint8_t) ((((((((((uint8_t)digits[3]) << PyLong_SHIFT) | (uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint8_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint8_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint8_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint8_t) -1;
        }
    } else {
        uint8_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint8_t) -1;
        val = __Pyx_PyInt_As_uint8_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint8_t");
    return (uint8_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint8_t");
    return (uint8_t) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *x) {
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 2 * PyLong_SHIFT) {
                            return (uint32_t) (((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 3 * PyLong_SHIFT) {
                            return (uint32_t) (((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 4 * PyLong_SHIFT) {
                            return (uint32_t) (((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint32_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint32_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) ((((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint32_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint32_t) -1;
        }
    } else {
        uint32_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint32_t) -1;
        val = __Pyx_PyInt_As_uint32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint32_t");
    return (uint32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint32_t");
    return (uint32_t) -1;
}

/* CheckBinaryVersion */
            static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
            #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
            #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
            static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            PyErr_Clear();
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
